{"version":3,"file":"451.bundle.44a0aaa91f1e65ee8fa2.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createSEGToolGroupAndAddTools;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateSEG({\r\n  servicesManager,\r\n  segDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateSEGDisplaySet,\r\n}) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = await _askHydrate(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      preHydrateCallbacks?.forEach(callback => {\r\n        callback();\r\n      });\r\n\r\n      const isHydrated = await hydrateSEGDisplaySet({\r\n        segDisplaySet,\r\n        viewportId,\r\n      });\r\n\r\n      resolve(isHydrated);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateSEG;\r\n","import PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport { LoadingIndicatorTotalPercent, useViewportGrid, ViewportActionBar } from '@ohif/ui';\r\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\r\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\r\nimport _getStatusComponent from './_getStatusComponent';\r\n\r\nconst { formatDate } = utils;\r\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\r\n\r\nfunction OHIFCornerstoneSEGViewport(props) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SEGViewport');\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    displaySetService,\r\n    toolGroupService,\r\n    segmentationService,\r\n    uiNotificationService,\r\n    customizationService,\r\n  } = servicesManager.services;\r\n\r\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // SEG viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SEG viewport should only have a single display set');\r\n  }\r\n\r\n  const segDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const [selectedSegment, setSelectedSegment] = useState(1);\r\n\r\n  // Hydration means that the SEG is opened and segments are loaded into the\r\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\r\n  // loading basically means SEG loading over network and bit unpacking of the\r\n  // SEG data.\r\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\r\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n\r\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    segDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const storePresentationState = useCallback(() => {\r\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\r\n      commandsManager.runCommand('storePresentation', {\r\n        viewportId,\r\n      });\r\n    });\r\n  }, [viewportGrid]);\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, segDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        onElementDisabled={onElementDisabled}\r\n        // initialImageIndex={initialImageIndex}\r\n      ></Component>\r\n    );\r\n  }, [viewportId, segDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      direction = direction === 'left' ? -1 : 1;\r\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { segments } = segmentation;\r\n\r\n      const numberOfSegments = Object.keys(segments).length;\r\n\r\n      let newSelectedSegmentIndex = selectedSegment + direction;\r\n\r\n      // Segment 0 is always background\r\n\r\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\r\n        newSelectedSegmentIndex = 1;\r\n      } else if (newSelectedSegmentIndex === 0) {\r\n        newSelectedSegmentIndex = numberOfSegments - 1;\r\n      }\r\n\r\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, toolGroupId);\r\n      setSelectedSegment(newSelectedSegmentIndex);\r\n    },\r\n    [selectedSegment]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (segIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportId,\r\n      segDisplaySet,\r\n      preHydrateCallbacks: [storePresentationState],\r\n      hydrateSEGDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\r\n          setSegIsLoading(false);\r\n        }\r\n\r\n        if (evt.overlappingSegments) {\r\n          uiNotificationService.show({\r\n            title: 'Overlapping Segments',\r\n            message: 'Overlapping segments detected which is not currently supported',\r\n            type: 'warning',\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    // This creates a custom tool group which has the lifetime of this view\r\n    // only, and does NOT interfere with currently displayed segmentations.\r\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\r\n\r\n      // Only destroy the viewport specific implementation\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(segDisplaySet.isHydrated);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\r\n      referencedDisplaySetRef.current = null;\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n  } = referencedDisplaySetRef.current.metadata;\r\n\r\n  const hydrateSEGDisplaySet = ({ segDisplaySet, viewportId }) => {\r\n    commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\r\n      displaySets: [segDisplaySet],\r\n      viewportId,\r\n    });\r\n  };\r\n\r\n  const onStatusClick = async () => {\r\n    // Before hydrating a SEG and make it added to all viewports in the grid\r\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\r\n    // presentation state, so that we can restore it after hydrating the SEG. This is\r\n    // required if the user has changed the viewport (other viewport than SEG viewport)\r\n    // presentation state (w/l and invert) and then opens the SEG. If we don't store\r\n    // the presentation state, the viewport will be reset to the default presentation\r\n    storePresentationState();\r\n    const isHydrated = await hydrateSEGDisplaySet({\r\n      segDisplaySet,\r\n      viewportId,\r\n    });\r\n\r\n    setIsHydrated(isHydrated);\r\n  };\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onSegmentChange}\r\n        getStatusComponent={() => {\r\n          return _getStatusComponent({\r\n            isHydrated,\r\n            onStatusClick,\r\n          });\r\n        }}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\r\n          patientInformation: {\r\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName.Alphabetic) : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? utils.roundNumber(SliceThickness, 2) : '',\r\n            thicknessUnits: SliceThickness !== undefined ? 'mm' : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined ? utils.roundNumber(SpacingBetweenSlices, 2) : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {segIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading SEG...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSEGViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneSEGViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneSEGViewport;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon, Tooltip } from '@ohif/ui';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  const { t } = useTranslation('Common');\r\n  const loadStr = t('LOAD');\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => <Icon name=\"status-alert\" />;\r\n\r\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\r\n      break;\r\n    case false:\r\n      StatusIcon = () => (\r\n        <Icon\r\n          className=\"text-aqua-pale\"\r\n          name=\"status-untracked\"\r\n        />\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\r\n  }\r\n\r\n  const StatusArea = () => (\r\n    <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\r\n      <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\r\n        <StatusIcon />\r\n        <span className=\"ml-1\">SEG</span>\r\n      </div>\r\n      {!isHydrated && (\r\n        <div\r\n          className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\r\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\r\n          onMouseUp={onStatusClick}\r\n        >\r\n          {loadStr}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip\r\n          content={<ToolTipMessage />}\r\n          position=\"bottom-left\"\r\n        >\r\n          <StatusArea />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","_ref","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateSEGDisplaySet","uiViewportDialogService","services","Promise","async","resolve","reject","promptResult","message","actions","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askHydrate","forEach","callback","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportOptions","viewportLabel","extensionManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","segmentationService","uiNotificationService","length","Error","viewportGrid","viewportGridService","useViewportGrid","selectedSegment","setSelectedSegment","useState","isHydrated","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","React","_extends","viewportType","orientation","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","_ref2","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","_ref3","displaySetInstanceUIDs","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","index","key","_ref4","onStatusClick","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","loadStr","Icon","name","className","StatusArea","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","roundNumber","thicknessUnits","undefined","spacing","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}
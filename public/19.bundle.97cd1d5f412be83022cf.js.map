{"version":3,"file":"19.bundle.97cd1d5f412be83022cf.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.js","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/ActionButtons.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: 'promptBeginTracking',\r\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration };\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No, do not ask again',\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to add this measurement to the existing report?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(UIViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'No', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, do not ask again for this series',\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","const MIN_SR_SERIES_NUMBER = 4700;\r\n\r\nexport default function getNextSRSeriesNumber(displaySetService) {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\r\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\r\n\r\n  return maxSeriesNumber + 1;\r\n}\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nexport default RESPONSE;\r\n","import { createReportAsync, createReportDialogPrompt } from '@ohif/extension-default';\r\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\r\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\r\n\r\nfunction promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt) {\r\n  const { uiDialogService, measurementService, displaySetService } = servicesManager.services;\r\n  const viewportId = evt.viewportId === undefined ? evt.data.viewportId : evt.viewportId;\r\n  const isBackupSave = evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\r\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\r\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\r\n\r\n  const { trackedStudy, trackedSeries } = ctx;\r\n  let displaySetInstanceUIDs;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    // TODO: Fallback if (uiDialogService) {\r\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\r\n      extensionManager,\r\n    });\r\n\r\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\r\n      const dataSources = extensionManager.getDataSources();\r\n      const dataSource = dataSources[0];\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      const SeriesDescription =\r\n        // isUndefinedOrEmpty\r\n        promptResult.value === undefined || promptResult.value === ''\r\n          ? 'Research Derived Series' // default\r\n          : promptResult.value; // provided value\r\n\r\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\r\n\r\n      const getReport = async () => {\r\n        return commandsManager.runCommand(\r\n          'storeMeasurements',\r\n          {\r\n            measurementData: trackedMeasurements,\r\n            dataSource,\r\n            additionalFindingTypes: ['ArrowAnnotate'],\r\n            options: {\r\n              SeriesDescription,\r\n              SeriesNumber,\r\n            },\r\n          },\r\n          'CORNERSTONE_STRUCTURED_REPORT'\r\n        );\r\n      };\r\n      displaySetInstanceUIDs = await createReportAsync({\r\n        servicesManager,\r\n        getReport,\r\n      });\r\n    } else if (promptResult.action === RESPONSE.CANCEL) {\r\n      // Do nothing\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult.action,\r\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave,\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptSaveReport;\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\r\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager, appConfig },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to continue tracking measurements for this study?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport { machineConfiguration, defaultOptions } from './measurementTrackingMachine';\r\nimport promptBeginTracking from './promptBeginTracking';\r\nimport promptTrackNewSeries from './promptTrackNewSeries';\r\nimport promptTrackNewStudy from './promptTrackNewStudy';\r\nimport promptSaveReport from './promptSaveReport';\r\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTracking.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReport.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = Machine(machineConfiguration, machineOptions);\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    if (viewports.size > 0) {\r\n      const activeViewport = viewports.get(activeViewportId);\r\n\r\n      if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n        return;\r\n      }\r\n\r\n      // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n      // tracking fusion viewports yet. This should change when we do.\r\n      const { displaySetService } = servicesManager.services;\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        activeViewport.displaySetInstanceUIDs[0]\r\n      );\r\n\r\n      if (!displaySet) {\r\n        return;\r\n      }\r\n\r\n      // If this is an SR produced by our SR SOPClassHandler,\r\n      // and it hasn't been loaded yet, do that now so we\r\n      // can check if it can be rehydrated or not.\r\n      //\r\n      // Note: This happens:\r\n      // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n      // - If the displaySet has never been hung\r\n      //\r\n      // Otherwise, the displaySet will be loaded by the useEffect handler\r\n      // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n      // The issue here is that this handler in TrackedMeasurementsContext\r\n      // ends up occurring before the Viewport is created, so the displaySet\r\n      // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        !displaySet.isLoaded &&\r\n        displaySet.load\r\n      ) {\r\n        displaySet.load();\r\n      }\r\n\r\n      // Magic string\r\n      // load function added by our sopClassHandler module\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        displaySet.isRehydratable === true\r\n      ) {\r\n        console.log('sending event...', trackedMeasurements);\r\n        sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\r\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n          viewportId: activeViewportId,\r\n        });\r\n      }\r\n    }\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent, servicesManager.services, viewports]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\nimport { utils } from '@ohif/core';\r\nimport { StudyBrowser, useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst { formatDate } = utils;\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction PanelStudyBrowserTracking({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const { displaySetService, uiDialogService, hangingProtocolService, uiNotificationService } =\r\n    servicesManager.services;\r\n  const navigate = useNavigate();\r\n\r\n  const { t } = useTranslation('Common');\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const [activeTabName, setActiveTabName] = useState('primary');\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportId = activeViewportId;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message:\r\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  const activeViewportDisplaySetInstanceUIDs =\r\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      if (!qidoForStudyUID?.length) {\r\n        navigate('/notfoundstudy', '_self');\r\n        throw new Error('Invalid study URL');\r\n      }\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\r\n\r\n  // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\r\n      if (!imageId || displaySet?.unsupported) {\r\n        return;\r\n      }\r\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\r\n\r\n      setThumbnailImageSrcMap(prevState => {\r\n        return { ...prevState, ...newImageSrcEntry };\r\n      });\r\n    });\r\n  }, [displaySetService, dataSource, getImageSrc]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const mappedDisplaySets = _mapDisplaySets(\r\n      currentDisplaySets,\r\n      thumbnailImageSrcMap,\r\n      trackedSeries,\r\n      viewports,\r\n      viewportGridService,\r\n      dataSource,\r\n      displaySetService,\r\n      uiDialogService,\r\n      uiNotificationService\r\n    );\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService.activeDisplaySets,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    thumbnailImageSrcMap,\r\n  ]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\r\n\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n          if (displaySet?.unsupported) {\r\n            return;\r\n          }\r\n\r\n          if (options.madeInClient) {\r\n            setJumpToDisplaySet(displaySetInstanceUID);\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (!imageId) {\r\n            return;\r\n          }\r\n\r\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\r\n          setThumbnailImageSrcMap(prevState => {\r\n            return { ...prevState, ...newImageSrcEntry };\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\r\n\r\n  useEffect(() => {\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          changedDisplaySets,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      () => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          displaySetService.getActiveDisplaySets(),\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\r\n    };\r\n  }, [thumbnailImageSrcMap, trackedSeries, viewports, dataSource, displaySetService]);\r\n\r\n  const tabs = _createStudyBrowserTabs(\r\n    StudyInstanceUIDs,\r\n    studyDisplayList,\r\n    displaySets,\r\n    hangingProtocolService\r\n  );\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jumpToDisplaySet) {\r\n      // Get element by displaySetInstanceUID\r\n      const displaySetInstanceUID = jumpToDisplaySet;\r\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\r\n\r\n      if (element && typeof element.scrollIntoView === 'function') {\r\n        // TODO: Any way to support IE here?\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        setJumpToDisplaySet(null);\r\n      }\r\n    }\r\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\r\n\r\n  useEffect(() => {\r\n    if (!jumpToDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInstanceUID = jumpToDisplaySet;\r\n    // Set the activeTabName and expand the study\r\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\r\n    if (!thumbnailLocation) {\r\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\r\n\r\n      return;\r\n    }\r\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\r\n    setActiveTabName(tabName);\r\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    if (!studyExpanded) {\r\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n    }\r\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\r\n\r\n  return (\r\n    <StudyBrowser\r\n      tabs={tabs}\r\n      servicesManager={servicesManager}\r\n      activeTabName={activeTabName}\r\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n      onClickStudy={_handleStudyClick}\r\n      onClickTab={clickedTabName => {\r\n        setActiveTabName(clickedTabName);\r\n      }}\r\n      onClickUntrack={displaySetInstanceUID => {\r\n        const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n        // TODO: shift this somewhere else where we're centralizing this logic?\r\n        // Potentially a helper from displaySetInstanceUID to this\r\n        sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n        });\r\n      }}\r\n      onClickThumbnail={() => {}}\r\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PanelStudyBrowserTracking;\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(\r\n  displaySets,\r\n  thumbnailImageSrcMap,\r\n  trackedSeriesInstanceUIDs,\r\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\r\n  viewportGridService,\r\n  dataSource,\r\n  displaySetService,\r\n  uiDialogService,\r\n  uiNotificationService\r\n) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds);\r\n      const numPanes = viewportGridService.getNumViewportPanes();\r\n      const viewportIdentificator = [];\r\n\r\n      if (numPanes !== 1) {\r\n        viewports.forEach(viewportData => {\r\n          if (viewportData?.displaySetInstanceUIDs?.includes(ds.displaySetInstanceUID)) {\r\n            viewportIdentificator.push(viewportData.viewportLabel);\r\n          }\r\n        });\r\n      }\r\n\r\n      const array =\r\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n      const { displaySetInstanceUID } = ds;\r\n\r\n      const thumbnailProps = {\r\n        displaySetInstanceUID,\r\n        description: ds.SeriesDescription,\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: formatDate(ds.SeriesDate),\r\n        numInstances: ds.numImageFrames,\r\n        countIcon: ds.countIcon,\r\n        messages: ds.messages,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\r\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n        viewportIdentificator,\r\n      };\r\n\r\n      if (componentType === 'thumbnailNoImage') {\r\n        if (dataSource.reject && dataSource.reject.series) {\r\n          thumbnailProps.canReject = !ds?.unsupported;\r\n          thumbnailProps.onReject = () => {\r\n            uiDialogService.create({\r\n              id: 'ds-reject-sr',\r\n              centralize: true,\r\n              isDraggable: false,\r\n              showOverlay: true,\r\n              content: Dialog,\r\n              contentProps: {\r\n                title: 'Delete Report',\r\n                body: () => (\r\n                  <div className=\"bg-primary-dark p-4 text-white\">\r\n                    <p>Are you sure you want to delete this report?</p>\r\n                    <p className=\"mt-2\">This action cannot be undone.</p>\r\n                  </div>\r\n                ),\r\n                actions: [\r\n                  {\r\n                    id: 'cancel',\r\n                    text: 'Cancel',\r\n                    type: ButtonEnums.type.secondary,\r\n                  },\r\n                  {\r\n                    id: 'yes',\r\n                    text: 'Yes',\r\n                    type: ButtonEnums.type.primary,\r\n                    classes: ['reject-yes-button'],\r\n                  },\r\n                ],\r\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\r\n                onShow: () => {\r\n                  const yesButton = document.querySelector('.reject-yes-button');\r\n\r\n                  yesButton.focus();\r\n                },\r\n                onSubmit: async ({ action }) => {\r\n                  switch (action.id) {\r\n                    case 'yes':\r\n                      try {\r\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\r\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Report deleted successfully',\r\n                          type: 'success',\r\n                        });\r\n                      } catch (error) {\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Failed to delete report',\r\n                          type: 'error',\r\n                        });\r\n                      }\r\n                      break;\r\n                    case 'cancel':\r\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                      break;\r\n                  }\r\n                },\r\n              },\r\n            });\r\n          };\r\n        } else {\r\n          thumbnailProps.canReject = false;\r\n        }\r\n      }\r\n\r\n      array.push(thumbnailProps);\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE', 'DOC', 'OT'];\r\n\r\nfunction _getComponentType(ds) {\r\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnailTracked';\r\n}\r\n\r\n/**\r\n *\r\n * @param {string[]} primaryStudyInstanceUIDs\r\n * @param {object[]} studyDisplayList\r\n * @param {string} studyDisplayList.studyInstanceUid\r\n * @param {string} studyDisplayList.date\r\n * @param {string} studyDisplayList.description\r\n * @param {string} studyDisplayList.modalities\r\n * @param {number} studyDisplayList.numInstances\r\n * @param {object[]} displaySets\r\n * @returns tabs - The prop object expected by the StudyBrowser component\r\n */\r\nfunction _createStudyBrowserTabs(\r\n  primaryStudyInstanceUIDs,\r\n  studyDisplayList,\r\n  displaySets,\r\n  hangingProtocolService\r\n) {\r\n  const primaryStudies = [];\r\n  const recentStudies = [];\r\n  const allStudies = [];\r\n\r\n  // Iterate over each study...\r\n  studyDisplayList.forEach(study => {\r\n    // Find it's display sets\r\n    const displaySetsForStudy = displaySets.filter(\r\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\r\n    );\r\n\r\n    // Sort them\r\n    const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\r\n    displaySetsForStudy.sort(dsSortFn);\r\n\r\n    /* Sort by series number, then by series date\r\n      displaySetsForStudy.sort((a, b) => {\r\n        if (a.seriesNumber !== b.seriesNumber) {\r\n          return a.seriesNumber - b.seriesNumber;\r\n        }\r\n\r\n        const seriesDateA = Date.parse(a.seriesDate);\r\n        const seriesDateB = Date.parse(b.seriesDate);\r\n\r\n        return seriesDateA - seriesDateB;\r\n      });\r\n    */\r\n\r\n    // Map the study to it's tab/view representation\r\n    const tabStudy = Object.assign({}, study, {\r\n      displaySets: displaySetsForStudy,\r\n    });\r\n\r\n    // Add the \"tab study\" to the 'primary', 'recent', and/or 'all' tab group(s)\r\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\r\n      primaryStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    } else {\r\n      // TODO: Filter allStudies to dates within one year of current date\r\n      recentStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    }\r\n  });\r\n\r\n  // Newest first\r\n  const _byDate = (a, b) => {\r\n    const dateA = Date.parse(a);\r\n    const dateB = Date.parse(b);\r\n\r\n    return dateB - dateA;\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      name: 'primary',\r\n      label: 'Primary',\r\n      studies: primaryStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\r\n    },\r\n    {\r\n      name: 'recent',\r\n      label: 'Recent',\r\n      studies: recentStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\r\n    },\r\n    {\r\n      name: 'all',\r\n      label: 'All',\r\n      studies: allStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\r\n    },\r\n  ];\r\n\r\n  return tabs;\r\n}\r\n\r\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\r\n  for (let t = 0; t < tabs.length; t++) {\r\n    const { studies } = tabs[t];\r\n\r\n    for (let s = 0; s < studies.length; s++) {\r\n      const { displaySets } = studies[s];\r\n\r\n      for (let d = 0; d < displaySets.length; d++) {\r\n        const displaySet = displaySets[d];\r\n\r\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\r\n          return {\r\n            tabName: tabs[t].name,\r\n            StudyInstanceUID: studies[s].studyInstanceUid,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking({ commandsManager, extensionManager, servicesManager }) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = _createGetImageSrcFromImageIdFn(extensionManager);\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      servicesManager={servicesManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowserTracking.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Button, ButtonEnums } from '@ohif/ui';\r\n\r\nfunction ActionButtons({ onExportClick, onCreateReportClick, disabled }) {\r\n  const { t } = useTranslation('MeasurementTable');\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        onClick={onExportClick}\r\n        disabled={disabled}\r\n        type={ButtonEnums.type.secondary}\r\n        size={ButtonEnums.size.small}\r\n      >\r\n        {t('Export')}\r\n      </Button>\r\n      <Button\r\n        className=\"ml-2\"\r\n        onClick={onCreateReportClick}\r\n        type={ButtonEnums.type.secondary}\r\n        size={ButtonEnums.size.small}\r\n        disabled={disabled}\r\n      >\r\n        {t('Create Report')}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nActionButtons.propTypes = {\r\n  onExportClick: PropTypes.func,\r\n  onCreateReportClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nActionButtons.defaultProps = {\r\n  onExportClick: () => alert('Export'),\r\n  onCreateReportClick: () => alert('Create Report'),\r\n  disabled: false,\r\n};\r\n\r\nexport default ActionButtons;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  StudySummary,\r\n  MeasurementTable,\r\n  Dialog,\r\n  Input,\r\n  useViewportGrid,\r\n  ButtonEnums,\r\n} from '@ohif/ui';\r\nimport { DicomMetadataStore, utils } from '@ohif/core';\r\nimport { useDebounce } from '@hooks';\r\nimport ActionButtons from './ActionButtons';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst { downloadCSVReport } = utils;\r\nconst { formatDate } = utils;\r\n\r\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\r\n  key: undefined, //\r\n  date: '', // '07-Sep-2010',\r\n  modality: '', // 'CT',\r\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\r\n};\r\n\r\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(Date.now().toString());\r\n  const debouncedMeasurementChangeTimestamp = useDebounce(measurementChangeTimestamp, 200);\r\n  const { measurementService, uiDialogService, displaySetService } = servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const [displayStudySummary, setDisplayStudySummary] = useState(\r\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\r\n  );\r\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\r\n  const measurementsPanelRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const measurements = measurementService.getMeasurements();\r\n    const filteredMeasurements = measurements.filter(\r\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    const mappedMeasurements = filteredMeasurements.map(m =>\r\n      _mapMeasurementToDisplay(m, measurementService.VALUE_TYPES, displaySetService)\r\n    );\r\n    setDisplayMeasurements(mappedMeasurements);\r\n    // eslint-ignore-next-line\r\n  }, [measurementService, trackedStudy, trackedSeries, debouncedMeasurementChangeTimestamp]);\r\n\r\n  const updateDisplayStudySummary = async () => {\r\n    if (trackedMeasurements.matches('tracking')) {\r\n      const StudyInstanceUID = trackedStudy;\r\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n      const instanceMeta = studyMeta.series[0].instances[0];\r\n      const { StudyDate, StudyDescription } = instanceMeta;\r\n\r\n      const modalities = new Set();\r\n      studyMeta.series.forEach(series => {\r\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\r\n          modalities.add(series.instances[0].Modality);\r\n        }\r\n      });\r\n      const modality = Array.from(modalities).join('/');\r\n\r\n      if (displayStudySummary.key !== StudyInstanceUID) {\r\n        setDisplayStudySummary({\r\n          key: StudyInstanceUID,\r\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\r\n          modality,\r\n          description: StudyDescription,\r\n        });\r\n      }\r\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\r\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\r\n    }\r\n  };\r\n\r\n  // ~~ DisplayStudySummary\r\n  useEffect(() => {\r\n    updateDisplayStudySummary();\r\n  }, [displayStudySummary.key, trackedMeasurements, trackedStudy, updateDisplayStudySummary]);\r\n\r\n  // TODO: Better way to consolidated, debounce, check on change?\r\n  // Are we exposing the right API for measurementService?\r\n  // This watches for ALL measurementService changes. It updates a timestamp,\r\n  // which is debounced. After a brief period of inactivity, this triggers\r\n  // a re-render where we grab up-to-date measurements\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\r\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\r\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, () => {\r\n          setMeasurementsUpdated(Date.now().toString());\r\n          if (evt === added) {\r\n            debounce(() => {\r\n              measurementsPanelRef.current.scrollTop = measurementsPanelRef.current.scrollHeight;\r\n            }, 300)();\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent]);\r\n\r\n  async function exportReport() {\r\n    const measurements = measurementService.getMeasurements();\r\n    const trackedMeasurements = measurements.filter(\r\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    downloadCSVReport(trackedMeasurements, measurementService);\r\n  }\r\n\r\n  const jumpToImage = ({ uid, isActive }) => {\r\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\r\n\r\n    onMeasurementItemClickHandler({ uid, isActive });\r\n  };\r\n\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\r\n    const measurement = measurementService.getMeasurement(uid);\r\n    jumpToImage({ uid, isActive });\r\n\r\n    const onSubmitHandler = ({ action, value }) => {\r\n      switch (action.id) {\r\n        case 'save': {\r\n          measurementService.update(\r\n            uid,\r\n            {\r\n              ...measurement,\r\n              ...value,\r\n            },\r\n            true\r\n          );\r\n        }\r\n      }\r\n      uiDialogService.dismiss({ id: 'enter-annotation' });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'enter-annotation',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Annotation',\r\n        noCloseButton: true,\r\n        value: { label: measurement.label || '' },\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              onSubmitHandler({ value, action: { id: 'save' } });\r\n            }\r\n          };\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white grow text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              id=\"annotation\"\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={onChangeHandler}\r\n              onKeyPress={onKeyPressHandler}\r\n            />\r\n          );\r\n        },\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\r\n    if (!isActive) {\r\n      const measurements = [...displayMeasurements];\r\n      const measurement = measurements.find(m => m.uid === uid);\r\n\r\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\r\n      measurement.isActive = true;\r\n      setDisplayMeasurements(measurements);\r\n    }\r\n  };\r\n\r\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT\r\n  );\r\n  const additionalFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        ref={measurementsPanelRef}\r\n        data-cy={'trackedMeasurements-panel'}\r\n      >\r\n        {displayStudySummary.key && (\r\n          <StudySummary\r\n            date={formatDate(displayStudySummary.date)}\r\n            modality={displayStudySummary.modality}\r\n            description={displayStudySummary.description}\r\n          />\r\n        )}\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          data={displayMeasurementsWithoutFindings}\r\n          servicesManager={servicesManager}\r\n          onClick={jumpToImage}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n        {additionalFindings.length !== 0 && (\r\n          <MeasurementTable\r\n            title=\"Additional Findings\"\r\n            data={additionalFindings}\r\n            servicesManager={servicesManager}\r\n            onClick={jumpToImage}\r\n            onEdit={onMeasurementItemEditHandler}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"flex justify-center p-4\">\r\n        <ActionButtons\r\n          onExportClick={exportReport}\r\n          onCreateReportClick={() => {\r\n            sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n              viewportId: viewportGrid.activeViewportId,\r\n              isBackupSave: true,\r\n            });\r\n          }}\r\n          disabled={\r\n            additionalFindings.length === 0 && displayMeasurementsWithoutFindings.length === 0\r\n          }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelMeasurementTableTracking.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// TODO: This could be a measurementService mapper\r\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\r\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\r\n\r\n  // TODO: We don't deal with multiframe well yet, would need to update\r\n  // This in OHIF-312 when we add FrameIndex to measurements.\r\n\r\n  const instance = DicomMetadataStore.getInstance(\r\n    referenceStudyUID,\r\n    referenceSeriesUID,\r\n    SOPInstanceUID\r\n  );\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(referenceSeriesUID);\r\n\r\n  if (!displaySets[0] || !displaySets[0].images) {\r\n    throw new Error('The tracked measurements panel should only be tracking \"stack\" displaySets.');\r\n  }\r\n\r\n  const {\r\n    displayText: baseDisplayText,\r\n    uid,\r\n    label: baseLabel,\r\n    type,\r\n    selected,\r\n    findingSites,\r\n    finding,\r\n  } = measurement;\r\n\r\n  const firstSite = findingSites?.[0];\r\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\r\n  let displayText = baseDisplayText || [];\r\n  if (findingSites) {\r\n    const siteText = [];\r\n    findingSites.forEach(site => {\r\n      if (site?.text !== label) {\r\n        siteText.push(site.text);\r\n      }\r\n    });\r\n    displayText = [...siteText, ...displayText];\r\n  }\r\n  if (finding && finding?.text !== label) {\r\n    displayText = [finding.text, ...displayText];\r\n  }\r\n\r\n  return {\r\n    uid,\r\n    label,\r\n    baseLabel,\r\n    measurementType: type,\r\n    displayText,\r\n    baseDisplayText,\r\n    isActive: selected,\r\n    finding,\r\n    findingSites,\r\n  };\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: 'Studies',\r\n      component: PanelStudyBrowserTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      component: PanelMeasurementTableTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n"],"names":["RESPONSE","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","idle","entry","on","TRACK_SERIES","SET_TRACKED_SERIES","target","actions","PROMPT_HYDRATE_SR","cond","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","guards","shouldSetDirty","undefined","includes","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","_ref","servicesManager","extensionManager","uiViewportDialogService","viewportId","Promise","async","resolve","reject","promptResult","message","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askTrackMeasurements","NO_NOT_FOR_SERIES","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","MIN_SR_SERIES_NUMBER","commandsManager","uiDialogService","measurementService","displaySetService","displaySetInstanceUIDs","createReportDialogPrompt","action","dataSource","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","getReport","runCommand","measurementData","additionalFindingTypes","options","createReportAsync","createdDisplaySetInstanceUIDs","HYDRATE_REPORT","appConfig","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","_ref2","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","get","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","uiNotificationService","navigate","useNavigate","t","useTranslation","StudyInstanceUIDs","useImageViewer","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","error","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","find","it","push","fetchStudiesForPatient","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","imageIds","getImageIdsForDisplaySet","floor","unsupported","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","unsubscribe","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","tabs","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","dsSortFn","getDisplaySetSortFunction","sort","tabStudy","_byDate","a","b","dateA","Date","parse","label","studyA","studyB","_createStudyBrowserTabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickUntrack","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","title","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","numPanes","getNumViewportPanes","viewportIdentificator","viewportData","viewportLabel","array","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","body","className","classes","onClose","dismiss","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","disabled","Button","onClick","small","defaultProps","alert","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","key","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","measurement","types","SOPInstanceUID","DicomMetadataStore","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","debounce","current","scrollTop","scrollHeight","unsub","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","_ref3","getMeasurement","onSubmitHandler","_ref4","update","noCloseButton","_ref5","setValue","Input","labelClassName","autoFocus","onChange","persist","onKeyPress","_ref6","measurements","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","ref","StudySummary","MeasurementTable","onEdit","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}
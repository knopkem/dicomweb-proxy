{"version":3,"file":"236.bundle.5c7a2732831ec4bc80eb.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/utils/callInputDialog.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.js","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { inv, multiply } from 'mathjs';\r\n\r\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\r\n// We should likely just expose this there.\r\n\r\nexport default function coordinateFormatScoord3d2Geometry(coordinates, pyramid) {\r\n  let transform = false;\r\n  if (!Array.isArray(coordinates[0])) {\r\n    coordinates = [coordinates];\r\n    transform = true;\r\n  }\r\n  const metadata = pyramid[pyramid.length - 1];\r\n  const orientation = metadata.ImageOrientationSlide;\r\n  const spacing = _getPixelSpacing(metadata);\r\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\r\n  const offset = [\r\n    Number(origin.XOffsetInSlideCoordinateSystem),\r\n    Number(origin.YOffsetInSlideCoordinateSystem),\r\n  ];\r\n\r\n  coordinates = coordinates.map(c => {\r\n    const slideCoord = [c[0], c[1]];\r\n    const pixelCoord = mapSlideCoord2PixelCoord({\r\n      offset,\r\n      orientation,\r\n      spacing,\r\n      point: slideCoord,\r\n    });\r\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\r\n  });\r\n  if (transform) {\r\n    return coordinates[0];\r\n  }\r\n  return coordinates;\r\n}\r\n\r\nfunction _getPixelSpacing(metadata) {\r\n  if (metadata.PixelSpacing) {\r\n    return metadata.PixelSpacing;\r\n  }\r\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\r\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\r\n  return pixelMeasures.PixelSpacing;\r\n}\r\n\r\nfunction mapSlideCoord2PixelCoord(options) {\r\n  // X and Y Offset in Slide Coordinate System\r\n  if (!('offset' in options)) {\r\n    throw new Error('Option \"offset\" is required.');\r\n  }\r\n  if (!Array.isArray(options.offset)) {\r\n    throw new Error('Option \"offset\" must be an array.');\r\n  }\r\n  if (options.offset.length !== 2) {\r\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\r\n  }\r\n  const offset = options.offset;\r\n\r\n  // Image Orientation Slide with direction cosines for Row and Column direction\r\n  if (!('orientation' in options)) {\r\n    throw new Error('Option \"orientation\" is required.');\r\n  }\r\n  if (!Array.isArray(options.orientation)) {\r\n    throw new Error('Option \"orientation\" must be an array.');\r\n  }\r\n  if (options.orientation.length !== 6) {\r\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\r\n  }\r\n  const orientation = options.orientation;\r\n\r\n  // Pixel Spacing along the Row and Column direction\r\n  if (!('spacing' in options)) {\r\n    throw new Error('Option \"spacing\" is required.');\r\n  }\r\n  if (!Array.isArray(options.spacing)) {\r\n    throw new Error('Option \"spacing\" must be an array.');\r\n  }\r\n  if (options.spacing.length !== 2) {\r\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\r\n  }\r\n  const spacing = options.spacing;\r\n\r\n  // X and Y coordinate in the Slide Coordinate System\r\n  if (!('point' in options)) {\r\n    throw new Error('Option \"point\" is required.');\r\n  }\r\n  if (!Array.isArray(options.point)) {\r\n    throw new Error('Option \"point\" must be an array.');\r\n  }\r\n  if (options.point.length !== 2) {\r\n    throw new Error('Option \"point\" must be an array with 2 elements.');\r\n  }\r\n  const point = options.point;\r\n\r\n  const m = [\r\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\r\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\r\n    [0, 0, 1],\r\n  ];\r\n  const mInverted = inv(m);\r\n\r\n  const vSlide = [[point[0]], [point[1]], [1]];\r\n\r\n  const vImage = multiply(mInverted, vSlide);\r\n\r\n  const row = Number(vImage[1][0].toFixed(4));\r\n  const col = Number(vImage[0][0].toFixed(4));\r\n  return [col, row];\r\n}\r\n","const defaultFill = {\r\n  color: 'rgba(255,255,255,0.4)',\r\n};\r\n\r\nconst emptyFill = {\r\n  color: 'rgba(255,255,255,0.0)',\r\n};\r\n\r\nconst defaultStroke = {\r\n  color: 'rgb(0,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst activeStroke = {\r\n  color: 'rgb(255,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst defaultStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: defaultFill,\r\n      stroke: activeStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: defaultFill,\r\n  stroke: activeStroke,\r\n};\r\n\r\nconst emptyStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: emptyFill,\r\n      stroke: defaultStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: emptyFill,\r\n  stroke: defaultStroke,\r\n};\r\n\r\nconst styles = {\r\n  active: defaultStyle,\r\n  default: emptyStyle,\r\n};\r\n\r\nexport default styles;\r\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\r\nimport styles from '../utils/styles';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\n// Events from the third-party viewer\r\nconst ApiEvents = {\r\n  /** Triggered when a ROI was added. */\r\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\r\n  /** Triggered when a ROI was modified. */\r\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\r\n  /** Triggered when a ROI was removed. */\r\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\r\n  /** Triggered when a ROI was drawn. */\r\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\r\n  /** Triggered when a ROI was selected. */\r\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\r\n  /** Triggered when a viewport move has started. */\r\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\r\n  /** Triggered when a viewport move has ended. */\r\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\r\n  /** Triggered when a loading of data has started. */\r\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\r\n  /** Triggered when a loading of data has ended. */\r\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\r\n  /** Triggered when an error occurs during loading of data. */\r\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\r\n  /* Triggered when the loading of an image tile has started. */\r\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\r\n  /* Triggered when the loading of an image tile has ended. */\r\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\r\n  /* Triggered when the error occurs during loading of an image tile. */\r\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\r\n};\r\n\r\nconst EVENTS = {\r\n  ADDED: 'added',\r\n  MODIFIED: 'modified',\r\n  REMOVED: 'removed',\r\n  UPDATED: 'updated',\r\n  SELECTED: 'selected',\r\n};\r\n\r\n/**\r\n * ViewerManager encapsulates the complexity of the third-party viewer and\r\n * expose only the features/behaviors that are relevant to the application\r\n */\r\nclass ViewerManager extends PubSubService {\r\n  constructor(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    super(EVENTS);\r\n    this.viewer = viewer;\r\n    this.viewportId = viewportId;\r\n    this.container = container;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n\r\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\r\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\r\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\r\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\r\n    this.contextMenuCallback = () => {};\r\n\r\n    // init symbols\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\r\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\r\n    this._map = symbols.find(p => p.description === 'map');\r\n    this._affine = symbols.find(p => p.description === 'affine');\r\n\r\n    this.registerEvents();\r\n    this.activateDefaultInteractions();\r\n  }\r\n\r\n  addContextMenuCallback(callback) {\r\n    this.contextMenuCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Destroys this managed viewer instance, clearing all the event handlers\r\n   */\r\n  destroy() {\r\n    this.unregisterEvents();\r\n  }\r\n\r\n  /**\r\n   * This is to overrides the _broadcastEvent method of PubSubService and always\r\n   * send the ROI graphic object and this managed viewer instance.\r\n   * Due to the way that PubSubService is written, the same name override of the\r\n   * function doesn't work.\r\n   *\r\n   * @param {String} key key Subscription key\r\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\r\n   */\r\n  publish(key, roiGraphic) {\r\n    this._broadcastEvent(key, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers all the relevant event handlers for the third-party API\r\n   */\r\n  registerEvents() {\r\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Clears all the relevant event handlers for the third-party API\r\n   */\r\n  unregisterEvents() {\r\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.removeEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.removeEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.removeEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_ADDED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiAddedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.ADDED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_MODIFIED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiModifiedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.MODIFIED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_REMOVED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiRemovedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.REMOVED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_SELECTED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiSelectedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.SELECTED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Run the given callback operation without triggering any events for this\r\n   * instance, so subscribers will not be affected\r\n   *\r\n   * @param {Function} callback Callback that will run sinlently\r\n   */\r\n  runSilently(callback) {\r\n    this.unregisterEvents();\r\n    callback();\r\n    this.registerEvents();\r\n  }\r\n\r\n  /**\r\n   * Removes all the ROI graphics from the third-party API\r\n   */\r\n  clearRoiGraphics() {\r\n    this.runSilently(() => this.viewer.removeAllROIs());\r\n  }\r\n\r\n  showROIs() {\r\n    this.viewer.showROIs();\r\n  }\r\n\r\n  hideROIs() {\r\n    this.viewer.hideROIs();\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added\r\n   */\r\n  addRoiGraphic(roiGraphic) {\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API, and also add a label.\r\n   * Used for importing from SR.\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added.\r\n   * @param {String} label The label of the annotation.\r\n   */\r\n  addRoiGraphicWithLabel(roiGraphic, label) {\r\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are not going to use its label.\r\n    // if (label) {\r\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\r\n    //   roiGraphic.properties.label = label;\r\n    // }\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n\r\n    this._broadcastEvent(EVENTS.ADDED, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n      label,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets ROI style\r\n   *\r\n   * @param {String} uid ROI graphic UID to be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.viewer.setROIStyle(uid, styleOptions);\r\n  }\r\n\r\n  /**\r\n   * Removes the ROI graphic with the given UID from the third-party API\r\n   *\r\n   * @param {String} uid ROI graphic UID to be removed\r\n   */\r\n  removeRoiGraphic(uid) {\r\n    this.viewer.removeROI(uid);\r\n  }\r\n\r\n  /**\r\n   * Update properties of regions of interest.\r\n   *\r\n   * @param {object} roi - ROI to be updated\r\n   * @param {string} roi.uid - Unique identifier of the region of interest\r\n   * @param {object} roi.properties - ROI properties\r\n   * @returns {void}\r\n   */\r\n  updateROIProperties({ uid, properties }) {\r\n    this.viewer.updateROI({ uid, properties });\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap() {\r\n    this.viewer.toggleOverviewMap();\r\n  }\r\n\r\n  /**\r\n   * Activates the viewer default interactions\r\n   * @returns {void}\r\n   */\r\n  activateDefaultInteractions() {\r\n    /** Disable browser's native context menu inside the canvas */\r\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\r\n      'contextmenu',\r\n      event => {\r\n        event.preventDefault();\r\n        // comment out when context menu for microscopy is enabled\r\n        // if (typeof this.contextMenuCallback === 'function') {\r\n        //   this.contextMenuCallback(event);\r\n        // }\r\n      },\r\n      false\r\n    );\r\n    const defaultInteractions = [\r\n      [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ],\r\n      ['modify', {}],\r\n    ];\r\n    this.activateInteractions(defaultInteractions);\r\n  }\r\n\r\n  /**\r\n   * Activates interactions\r\n   * @param {Array} interactions Interactions to be activated\r\n   * @returns {void}\r\n   */\r\n  activateInteractions(interactions) {\r\n    const interactionsMap = {\r\n      draw: activate => (activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction'),\r\n      modify: activate => (activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction'),\r\n      translate: activate =>\r\n        activate ? 'activateTranslateInteraction' : 'deactivateTranslateInteraction',\r\n      snap: activate => (activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction'),\r\n      dragPan: activate =>\r\n        activate ? 'activateDragPanInteraction' : 'deactivateDragPanInteraction',\r\n      dragZoom: activate =>\r\n        activate ? 'activateDragZoomInteraction' : 'deactivateDragZoomInteraction',\r\n      select: activate => (activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction'),\r\n    };\r\n\r\n    const availableInteractionsName = Object.keys(interactionsMap);\r\n    availableInteractionsName.forEach(availableInteractionName => {\r\n      const interaction = interactions.find(\r\n        interaction => interaction[0] === availableInteractionName\r\n      );\r\n      if (!interaction) {\r\n        const deactivateInteractionMethod = interactionsMap[availableInteractionName](false);\r\n        this.viewer[deactivateInteractionMethod]();\r\n      } else {\r\n        const [name, config] = interaction;\r\n        const activateInteractionMethod = interactionsMap[name](true);\r\n        this.viewer[activateInteractionMethod](config);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Accesses the internals of third-party API and returns the OpenLayers Map\r\n   *\r\n   * @returns {Object} OpenLayers Map component instance\r\n   */\r\n  _getMapView() {\r\n    const map = this._getMap();\r\n    return map.getView();\r\n  }\r\n\r\n  _getMap() {\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\r\n    window['map'] = this.viewer[_map];\r\n    return this.viewer[_map];\r\n  }\r\n\r\n  /**\r\n   * Returns the current state for the OpenLayers View\r\n   *\r\n   * @returns {Object} Current view state\r\n   */\r\n  getViewState() {\r\n    const view = this._getMapView();\r\n    return {\r\n      center: view.getCenter(),\r\n      resolution: view.getResolution(),\r\n      zoom: view.getZoom(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets the current state for the OpenLayers View\r\n   *\r\n   * @param {Object} viewState View state to be applied\r\n   */\r\n  setViewState(viewState) {\r\n    const view = this._getMapView();\r\n\r\n    view.setZoom(viewState.zoom);\r\n    view.setResolution(viewState.resolution);\r\n    view.setCenter(viewState.center);\r\n  }\r\n\r\n  setViewStateByExtent(roiAnnotation) {\r\n    const coordinates = roiAnnotation.getCoordinates();\r\n\r\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\r\n      this._jumpToPolyline(coordinates);\r\n    } else if (Array.isArray(coordinates[0])) {\r\n      this._jumpToPolygonOrEllipse(coordinates);\r\n    } else {\r\n      this._jumpToPoint(coordinates);\r\n    }\r\n  }\r\n\r\n  _jumpToPoint(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    view.setCenter(mappedCoord);\r\n  }\r\n\r\n  _jumpToPolyline(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    const x = mappedCoord[0];\r\n    const y = mappedCoord[1];\r\n\r\n    const xab = (x[0] + y[0]) / 2;\r\n    const yab = (x[1] + y[1]) / 2;\r\n    const midpoint = [xab, yab];\r\n\r\n    view.setCenter(midpoint);\r\n  }\r\n\r\n  _jumpToPolygonOrEllipse(coordinates) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    coordinates.forEach(coord => {\r\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n\r\n      const [x, y] = mappedCoord;\r\n      if (x < minX) {\r\n        minX = x;\r\n      } else if (x > maxX) {\r\n        maxX = x;\r\n      }\r\n\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n    });\r\n\r\n    const width = maxX - minX;\r\n    const height = maxY - minY;\r\n\r\n    minX -= 0.5 * width;\r\n    maxX += 0.5 * width;\r\n    minY -= 0.5 * height;\r\n    maxY += 0.5 * height;\r\n\r\n    const map = this._getMap();\r\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default ViewerManager;\r\n","import areaOfPolygon from './areaOfPolygon';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  LABEL_UPDATED: 'labelUpdated',\r\n  GRAPHIC_UPDATED: 'graphicUpdated',\r\n  VIEW_UPDATED: 'viewUpdated',\r\n  REMOVED: 'removed',\r\n};\r\n\r\n/**\r\n * Represents a single annotation for the Microscopy Viewer\r\n */\r\nclass RoiAnnotation extends PubSubService {\r\n  constructor(roiGraphic, studyInstanceUID, seriesInstanceUID, label = '', viewState = null) {\r\n    super(EVENTS);\r\n    this.uid = roiGraphic.uid;\r\n    this.roiGraphic = roiGraphic;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n    this.label = label;\r\n    this.viewState = viewState;\r\n    this.setMeasurements(roiGraphic);\r\n  }\r\n\r\n  getScoord3d() {\r\n    const roiGraphic = this.roiGraphic;\r\n\r\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\r\n    const _scoord3d = roiGraphicSymbols.find(s => String(s) === 'Symbol(scoord3d)');\r\n\r\n    return roiGraphic[_scoord3d];\r\n  }\r\n\r\n  getCoordinates() {\r\n    const scoord3d = this.getScoord3d();\r\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\r\n\r\n    const _coordinates = scoord3dSymbols.find(s => String(s) === 'Symbol(coordinates)');\r\n\r\n    const coordinates = scoord3d[_coordinates];\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * When called will trigger the REMOVED event\r\n   */\r\n  destroy() {\r\n    this._broadcastEvent(EVENTS.REMOVED, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\r\n   * event\r\n   *\r\n   * @param {Object} roiGraphic\r\n   */\r\n  setRoiGraphic(roiGraphic) {\r\n    this.roiGraphic = roiGraphic;\r\n    this.setMeasurements();\r\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update ROI measurement values based on its scoord3d coordinates.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  setMeasurements() {\r\n    const type = this.roiGraphic.scoord3d.graphicType;\r\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\r\n\r\n    switch (type) {\r\n      case 'ELLIPSE':\r\n        // This is a circle so only need one side\r\n        const point1 = coordinates[0];\r\n        const point2 = coordinates[1];\r\n\r\n        let xLength2 = point2[0] - point1[0];\r\n        let yLength2 = point2[1] - point1[1];\r\n\r\n        xLength2 *= xLength2;\r\n        yLength2 *= yLength2;\r\n\r\n        const length = Math.sqrt(xLength2 + yLength2);\r\n        const radius = length / 2;\r\n\r\n        const areaEllipse = Math.PI * radius * radius;\r\n        this._area = areaEllipse;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYGON':\r\n        const areaPolygon = areaOfPolygon(coordinates);\r\n        this._area = areaPolygon;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POINT':\r\n        this._area = undefined;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYLINE':\r\n        let len = 0;\r\n        for (let i = 1; i < coordinates.length; i++) {\r\n          const p1 = coordinates[i - 1];\r\n          const p2 = coordinates[i];\r\n\r\n          let xLen = p2[0] - p1[0];\r\n          let yLen = p2[1] - p1[1];\r\n\r\n          xLen *= xLen;\r\n          yLen *= yLen;\r\n          len += Math.sqrt(xLen + yLen);\r\n        }\r\n\r\n        this._area = undefined;\r\n        this._length = len;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the OpenLayer Map's view state for the annotation and triggers the\r\n   * VIEW_UPDATED event\r\n   *\r\n   * @param {Object} viewState The new view state for the annotation\r\n   */\r\n  setViewState(viewState) {\r\n    this.viewState = viewState;\r\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\r\n   *\r\n   * @param {String} label New label for the annotation\r\n   */\r\n  setLabel(label, finding) {\r\n    this.label = label || (finding && finding.CodeMeaning);\r\n    this.finding = finding || {\r\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\r\n      CodeValue: label,\r\n      CodeMeaning: label,\r\n    };\r\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation.\r\n   * Difference with getDetailedLabel() is that this will return empty string for empty\r\n   * label.\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getLabel() {\r\n    const label = this.label ? `${this.label}` : '';\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getDetailedLabel() {\r\n    const label = this.label ? `${this.label}` : '(empty)';\r\n    return label;\r\n  }\r\n\r\n  getLength() {\r\n    return this._length;\r\n  }\r\n\r\n  getArea() {\r\n    return this._area;\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default RoiAnnotation;\r\n","export default function areaOfPolygon(coordinates) {\r\n  // Shoelace algorithm.\r\n  const n = coordinates.length;\r\n  let area = 0.0;\r\n  let j = n - 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    area += (coordinates[j][0] + coordinates[i][0]) * (coordinates[j][1] - coordinates[i][1]);\r\n    j = i; // j is previous vertex to i\r\n  }\r\n\r\n  // Return absolute value of half the sum\r\n  // (The value is halved as we are summing up triangles, not rectangles).\r\n  return Math.abs(area / 2.0);\r\n}\r\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\r\nimport RoiAnnotation, { EVENTS as AnnotationEvents } from '../utils/RoiAnnotation';\r\nimport styles from '../utils/styles';\r\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  ANNOTATION_UPDATED: 'annotationUpdated',\r\n  ANNOTATION_SELECTED: 'annotationSelected',\r\n  ANNOTATION_REMOVED: 'annotationRemoved',\r\n  RELABEL: 'relabel',\r\n  DELETE: 'delete',\r\n};\r\n\r\n/**\r\n * MicroscopyService is responsible to manage multiple third-party API's\r\n * microscopy viewers expose methods to manage the interaction with these\r\n * viewers and handle their ROI graphics to create, remove and modify the\r\n * ROI annotations relevant to the application\r\n */\r\nexport default class MicroscopyService extends PubSubService {\r\n  public static REGISTRATION = serviceManager => {\r\n    return {\r\n      name: 'microscopyService',\r\n      altName: 'MicroscopyService',\r\n      create: ({ configuration = {} }) => {\r\n        return new MicroscopyService(serviceManager);\r\n      },\r\n    };\r\n  };\r\n\r\n  serviceManager: any;\r\n\r\n  managedViewers = new Set();\r\n  roiUids = new Set();\r\n  annotations = {};\r\n  selectedAnnotation = null;\r\n  pendingFocus = false;\r\n\r\n  constructor(serviceManager) {\r\n    super(EVENTS);\r\n    this.serviceManager = serviceManager;\r\n    this._onRoiAdded = this._onRoiAdded.bind(this);\r\n    this._onRoiModified = this._onRoiModified.bind(this);\r\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\r\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\r\n    this._onRoiSelected = this._onRoiSelected.bind(this);\r\n    this.isROIsVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Clears all the annotations and managed viewers, setting the manager state\r\n   * to its initial state\r\n   */\r\n  clear() {\r\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\r\n    this.managedViewers.clear();\r\n    for (const key in this.annotations) {\r\n      delete this.annotations[key];\r\n    }\r\n\r\n    this.roiUids.clear();\r\n    this.selectedAnnotation = null;\r\n    this.pendingFocus = false;\r\n  }\r\n\r\n  clearAnnotations() {\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      this.removeAnnotation(this.annotations[uid]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is added, creating the correspondent annotation\r\n   * with the current graphic and view state.\r\n   * Creates a subscription for label updating for the created annotation and\r\n   * publishes an ANNOTATION_UPDATED event when it happens.\r\n   * Also triggers the relabel process after the graphic is placed.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiAdded(data) {\r\n    const { roiGraphic, managedViewer, label } = data;\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const viewState = managedViewer.getViewState();\r\n\r\n    const roiAnnotation = new RoiAnnotation(\r\n      roiGraphic,\r\n      studyInstanceUID,\r\n      seriesInstanceUID,\r\n      '',\r\n      viewState\r\n    );\r\n\r\n    this.roiUids.add(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid] = roiAnnotation;\r\n\r\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\r\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\r\n    });\r\n\r\n    if (label !== undefined) {\r\n      roiAnnotation.setLabel(label);\r\n    } else {\r\n      const onRelabel = item =>\r\n        managedViewer.updateROIProperties({\r\n          uid: roiGraphic.uid,\r\n          properties: { label: item.label, finding: item.finding },\r\n        });\r\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is modified, updating the correspondent\r\n   * annotation with the current graphic and view state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The modified ROI graphic object\r\n   */\r\n  _onRoiModified(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (!roiAnnotation) {\r\n      return;\r\n    }\r\n    roiAnnotation.setRoiGraphic(roiGraphic);\r\n    roiAnnotation.setViewState(managedViewer.getViewState());\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is removed, reflecting the removal in the\r\n   * annotations' state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The removed ROI graphic object\r\n   */\r\n  _onRoiRemoved(data) {\r\n    const { roiGraphic } = data;\r\n    this.roiUids.delete(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid].destroy();\r\n    delete this.annotations[roiGraphic.uid];\r\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Observes any changes on ROI graphics and synchronize all the managed\r\n   * viewers to reflect those changes.\r\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiUpdated(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    this.synchronizeViewers(managedViewer);\r\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\r\n  }\r\n\r\n  /**\r\n   * Observes when an ROI is selected.\r\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiSelected(data) {\r\n    const { roiGraphic } = data;\r\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\r\n      if (this.selectedAnnotation) {\r\n        this.clearSelection();\r\n      }\r\n      this.selectedAnnotation = selectedAnnotation;\r\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the subscriptions for the managed viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _addManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.ADDED,\r\n      this._onRoiAdded\r\n    );\r\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.MODIFIED,\r\n      this._onRoiModified\r\n    );\r\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.REMOVED,\r\n      this._onRoiRemoved\r\n    );\r\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiUpdated\r\n    );\r\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiSelected\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes the subscriptions for the managed viewer being removed\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being removed\r\n   */\r\n  _removeManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\r\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\r\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\r\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\r\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\r\n\r\n    managedViewer._roiAddedSubscription = null;\r\n    managedViewer._roiModifiedSubscription = null;\r\n    managedViewer._roiRemovedSubscription = null;\r\n    managedViewer._roiUpdatedSubscription = null;\r\n    managedViewer._roiSelectedSubscription = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study and series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  getManagedViewersForStudy(studyInstanceUID) {\r\n    const filter = managedViewer => managedViewer.studyInstanceUID === studyInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Restores the created annotations for the viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _restoreAnnotations(managedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n    annotations.forEach(roiAnnotation => {\r\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a managed viewer instance for the given third-party API's viewer.\r\n   * Restores existing annotations for the given study/series.\r\n   * Adds event subscriptions for the viewer being added.\r\n   * Focuses the selected annotation when the viewer is being loaded into the\r\n   * active viewport.\r\n   *\r\n   * @param viewer - Third-party viewer API's object to be managed\r\n   * @param viewportId - The viewport Id where the viewer will be loaded\r\n   * @param container - The DOM element where it will be rendered\r\n   * @param studyInstanceUID - The study UID of the loaded image\r\n   * @param seriesInstanceUID - The series UID of the loaded image\r\n   * @param displaySets - All displaySets related to the same StudyInstanceUID\r\n   *\r\n   * @returns {ViewerManager} managed viewer\r\n   */\r\n  addViewer(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    const managedViewer = new ViewerManager(\r\n      viewer,\r\n      viewportId,\r\n      container,\r\n      studyInstanceUID,\r\n      seriesInstanceUID\r\n    );\r\n\r\n    this._restoreAnnotations(managedViewer);\r\n    viewer._manager = managedViewer;\r\n    this.managedViewers.add(managedViewer);\r\n\r\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\r\n    this._addManagedViewerSubscriptions(managedViewer);\r\n\r\n    if (this.pendingFocus) {\r\n      this.pendingFocus = false;\r\n      this.focusAnnotation(this.selectedAnnotation, viewportId);\r\n    }\r\n\r\n    return managedViewer;\r\n  }\r\n\r\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\r\n\r\n    if (!studyMetadata) {\r\n      return;\r\n    }\r\n\r\n    let derivedDisplaySets = FrameOfReferenceUID\r\n      ? displaySets.filter(\r\n          ds =>\r\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\r\n            // sometimes each depth instance has the different FrameOfReferenceID\r\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\r\n        )\r\n      : [];\r\n\r\n    if (!derivedDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\r\n\r\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\r\n      // Don't auto load\r\n      return;\r\n    }\r\n\r\n    // find most recent and load it.\r\n    let recentDateTime = 0;\r\n    let recentDisplaySet = derivedDisplaySets[0];\r\n\r\n    derivedDisplaySets.forEach(ds => {\r\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\r\n      if (dateTime > recentDateTime) {\r\n        recentDateTime = dateTime;\r\n        recentDisplaySet = ds;\r\n      }\r\n    });\r\n\r\n    recentDisplaySet.isLoading = true;\r\n\r\n    recentDisplaySet.load(smDisplaySet);\r\n  }\r\n\r\n  /**\r\n   * Removes the given third-party viewer API's object from the managed viewers\r\n   * and clears all its event subscriptions\r\n   *\r\n   * @param {Object} viewer Third-party viewer API's object to be removed\r\n   */\r\n  removeViewer(viewer) {\r\n    const managedViewer = viewer._manager;\r\n\r\n    this._removeManagedViewerSubscriptions(managedViewer);\r\n    managedViewer.destroy();\r\n    this.managedViewers.delete(managedViewer);\r\n  }\r\n\r\n  /**\r\n   * Toggle ROIs visibility\r\n   */\r\n  toggleROIsVisibility() {\r\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\r\n    this.isROIsVisible = !this.isROIsVisible;\r\n  }\r\n\r\n  /**\r\n   * Hide all ROIs\r\n   */\r\n  hideROIs() {\r\n    this.managedViewers.forEach(mv => mv.hideROIs());\r\n  }\r\n\r\n  /** Show all ROIs */\r\n  showROIs() {\r\n    this.managedViewers.forEach(mv => mv.showROIs());\r\n  }\r\n\r\n  /**\r\n   * Returns a RoiAnnotation instance for the given ROI UID\r\n   *\r\n   * @param {String} uid UID of the annotation\r\n   *\r\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\r\n   */\r\n  getAnnotation(uid) {\r\n    return this.annotations[uid];\r\n  }\r\n\r\n  /**\r\n   * Returns all the RoiAnnotation instances being managed\r\n   *\r\n   * @returns {Array} All RoiAnnotation instances\r\n   */\r\n  getAnnotations() {\r\n    const annotations = [];\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      annotations.push(this.getAnnotation(uid));\r\n    });\r\n    return annotations;\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   */\r\n  getAnnotationsForStudy(studyInstanceUID) {\r\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study and\r\n   * series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   */\r\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = annotation =>\r\n      annotation.studyInstanceUID === studyInstanceUID &&\r\n      annotation.seriesInstanceUID === seriesInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the selected RoiAnnotation instance or null if none is selected\r\n   *\r\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\r\n   */\r\n  getSelectedAnnotation() {\r\n    return this.selectedAnnotation;\r\n  }\r\n\r\n  /**\r\n   * Clear current RoiAnnotation selection\r\n   */\r\n  clearSelection() {\r\n    if (this.selectedAnnotation) {\r\n      this.setROIStyle(this.selectedAnnotation.uid, {\r\n        stroke: {\r\n          color: '#00ff00',\r\n        },\r\n      });\r\n    }\r\n    this.selectedAnnotation = null;\r\n  }\r\n\r\n  /**\r\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\r\n   * event to notify all the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\r\n   */\r\n  selectAnnotation(roiAnnotation) {\r\n    if (this.selectedAnnotation) {\r\n      this.clearSelection();\r\n    }\r\n\r\n    this.selectedAnnotation = roiAnnotation;\r\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\r\n    this.setROIStyle(roiAnnotation.uid, styles.active);\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @param viewportId The active viewport index\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap(viewportId) {\r\n    const managedViewers = Array.from(this.managedViewers);\r\n    const managedViewer = managedViewers.find(mv => mv.viewportId === viewportId);\r\n    if (managedViewer) {\r\n      managedViewer.toggleOverviewMap();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\r\n   * its removal on all third-party viewers being managed\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\r\n   */\r\n  removeAnnotation(roiAnnotation) {\r\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n\r\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\r\n\r\n    managedViewers.forEach(managedViewer => managedViewer.removeRoiGraphic(uid));\r\n\r\n    if (this.annotations[uid]) {\r\n      this.roiUids.delete(uid);\r\n      this.annotations[uid].destroy();\r\n      delete this.annotations[uid];\r\n\r\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\r\n   * state of the managed viewer with the given viewport index.\r\n   * If the image for the given annotation is not yet loaded into the viewport,\r\n   * it will set a pendingFocus flag to true in order to perform the focus when\r\n   * the managed viewer instance is created.\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\r\n   * @param {string} viewportId Index of the viewport to focus\r\n   */\r\n  focusAnnotation(roiAnnotation, viewportId) {\r\n    const filter = mv => mv.viewportId === viewportId;\r\n    const managedViewer = Array.from(this.managedViewers).find(filter);\r\n    if (managedViewer) {\r\n      managedViewer.setViewStateByExtent(roiAnnotation);\r\n    } else {\r\n      this.pendingFocus = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronize the ROI graphics for all the managed viewers that has the same\r\n   * series UID of the given managed viewer\r\n   *\r\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\r\n   */\r\n  synchronizeViewers(baseManagedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\r\n    const managedViewers = this._getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID);\r\n\r\n    // Prevent infinite loops arrising from updates.\r\n    managedViewers.forEach(managedViewer => this._removeManagedViewerSubscriptions(managedViewer));\r\n\r\n    managedViewers.forEach(managedViewer => {\r\n      if (managedViewer === baseManagedViewer) {\r\n        return;\r\n      }\r\n\r\n      const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n      managedViewer.clearRoiGraphics();\r\n      annotations.forEach(roiAnnotation => {\r\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n      });\r\n    });\r\n\r\n    managedViewers.forEach(managedViewer => this._addManagedViewerSubscriptions(managedViewer));\r\n  }\r\n\r\n  /**\r\n   * Activates interactions across all the viewers being managed\r\n   *\r\n   * @param {Array} interactions interactions\r\n   */\r\n  activateInteractions(interactions) {\r\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\r\n    this.activeInteractions = interactions;\r\n  }\r\n\r\n  /**\r\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\r\n   * publishing the RELABEL event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\r\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\r\n   */\r\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\r\n    if (!onRelabel) {\r\n      onRelabel = ({ label }) =>\r\n        this.managedViewers.forEach(mv =>\r\n          mv.updateROIProperties({\r\n            uid: roiAnnotation.uid,\r\n            properties: { label },\r\n          })\r\n        );\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.RELABEL, {\r\n      roiAnnotation,\r\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\r\n      successCallback: onRelabel,\r\n      newAnnotation,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggers the deletion process for the given RoiAnnotation instance, by\r\n   * publishing the DELETE event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\r\n   */\r\n  triggerDelete(roiAnnotation) {\r\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\r\n  }\r\n\r\n  /**\r\n   * Set ROI style for all managed viewers\r\n   *\r\n   * @param {string} uid The ROI uid that will be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object*} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object*} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n","import React from 'react';\r\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\r\n\r\n/**\r\n *\r\n * @param {*} data\r\n * @param {*} data.text\r\n * @param {*} data.label\r\n * @param {*} event\r\n * @param {func} callback\r\n * @param {*} isArrowAnnotateInputDialog\r\n */\r\nexport default function callInputDialog({\r\n  uiDialogService,\r\n  title = 'Annotation',\r\n  defaultValue = '',\r\n  callback = (value: string, action: string) => {},\r\n}) {\r\n  const dialogId = 'microscopy-input-dialog';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.value, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: title,\r\n        value: { value: defaultValue },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.defaultValue}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, value: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ServicesManager, ExtensionManager, CommandsManager, DicomMetadataStore } from '@ohif/core';\r\nimport { MeasurementTable, Icon, ButtonGroup, Button } from '@ohif/ui';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\r\nimport dcmjs from 'dcmjs';\r\nimport styles from '../../utils/styles';\r\nimport callInputDialog from '../../utils/callInputDialog';\r\nimport constructSR from '../../utils/constructSR';\r\nimport { saveByteArray } from '../../utils/saveByteArray';\r\n\r\nlet saving = false;\r\nconst { datasetToBuffer } = dcmjs.data;\r\n\r\nconst formatArea = area => {\r\n  let mult = 1;\r\n  let unit = 'mm';\r\n  if (area > 1000000) {\r\n    unit = 'm';\r\n    mult = 1 / 1000000;\r\n  } else if (area < 1) {\r\n    unit = 'μm';\r\n    mult = 1000000;\r\n  }\r\n  return `${(area * mult).toFixed(2)} ${unit}²`;\r\n};\r\n\r\nconst formatLength = (length, unit) => {\r\n  let mult = 1;\r\n  if (unit == 'km' || (!unit && length > 1000000)) {\r\n    unit = 'km';\r\n    mult = 1 / 1000000;\r\n  } else if (unit == 'm' || (!unit && length > 1000)) {\r\n    unit = 'm';\r\n    mult = 1 / 1000;\r\n  } else if (unit == 'μm' || (!unit && length < 1)) {\r\n    unit = 'μm';\r\n    mult = 1000;\r\n  } else if (unit && unit != 'mm') {\r\n    throw new Error(`Unknown length unit ${unit}`);\r\n  } else {\r\n    unit = 'mm';\r\n  }\r\n  return `${(length * mult).toFixed(2)} ${unit}`;\r\n};\r\n\r\ninterface IMicroscopyPanelProps extends WithTranslation {\r\n  viewports: PropTypes.array;\r\n  activeViewportId: PropTypes.string;\r\n\r\n  //\r\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\r\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\r\n\r\n  //\r\n  servicesManager: ServicesManager;\r\n  extensionManager: ExtensionManager;\r\n  commandsManager: CommandsManager;\r\n}\r\n\r\n/**\r\n * Microscopy Measurements Panel Component\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\r\n  const { microscopyService } = props.servicesManager.services;\r\n\r\n  const [studyInstanceUID, setStudyInstanceUID] = useState(null as string | null);\r\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\r\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\r\n  const { servicesManager, extensionManager } = props;\r\n\r\n  const { uiDialogService, displaySetService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const viewport = props.viewports.get(props.activeViewportId);\r\n    if (viewport?.displaySetInstanceUIDs[0]) {\r\n      const displaySet = displaySetService.getDisplaySetByUID(viewport.displaySetInstanceUIDs[0]);\r\n      if (displaySet) {\r\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\r\n      }\r\n    }\r\n  }, [props.viewports, props.activeViewportId]);\r\n\r\n  useEffect(() => {\r\n    const onAnnotationUpdated = () => {\r\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n      setRoiAnnotations(roiAnnotations);\r\n    };\r\n\r\n    const onAnnotationSelected = () => {\r\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\r\n      setSelectedAnnotation(selectedAnnotation);\r\n    };\r\n\r\n    const onAnnotationRemoved = () => {\r\n      onAnnotationUpdated();\r\n    };\r\n\r\n    const { unsubscribe: unsubscribeAnnotationUpdated } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_UPDATED,\r\n      onAnnotationUpdated\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationSelected } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_SELECTED,\r\n      onAnnotationSelected\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationRemoved } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_REMOVED,\r\n      onAnnotationRemoved\r\n    );\r\n    onAnnotationUpdated();\r\n    onAnnotationSelected();\r\n\r\n    // on unload unsubscribe from events\r\n    return () => {\r\n      unsubscribeAnnotationUpdated();\r\n      unsubscribeAnnotationSelected();\r\n      unsubscribeAnnotationRemoved();\r\n    };\r\n  }, [studyInstanceUID]);\r\n\r\n  /**\r\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\r\n   * new series' description, and continue to save.\r\n   *\r\n   * @returns\r\n   */\r\n  const promptSave = () => {\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    if (!annotations || saving) {\r\n      return;\r\n    }\r\n\r\n    callInputDialog({\r\n      uiDialogService,\r\n      title: 'Enter description of the Series',\r\n      defaultValue: '',\r\n      callback: (value: string, action: string) => {\r\n        switch (action) {\r\n          case 'save': {\r\n            saveFunction(value);\r\n          }\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  const getAllDisplaySets = (studyMetadata: any) => {\r\n    let allDisplaySets = [] as any[];\r\n    studyMetadata.series.forEach((series: any) => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return allDisplaySets;\r\n  };\r\n\r\n  /**\r\n   * Save annotations as a series\r\n   *\r\n   * @param SeriesDescription - series description\r\n   * @returns\r\n   */\r\n  const saveFunction = async (SeriesDescription: string) => {\r\n    const dataSource = extensionManager.getActiveDataSource()[0];\r\n    const { onSaveComplete } = props;\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    saving = true;\r\n\r\n    // There is only one viewer possible for one study,\r\n    // Since once study contains multiple resolution levels (series) of one whole\r\n    // Slide image.\r\n\r\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\r\n    const displaySets = getAllDisplaySets(studyMetadata);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    // Get the next available series number after 4700.\r\n\r\n    const dsWithMetadata = displaySets.filter(\r\n      ds => ds.metadata && ds.metadata.SeriesNumber && typeof ds.metadata.SeriesNumber === 'number'\r\n    );\r\n\r\n    // Generate next series number\r\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\r\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\r\n    const SeriesNumber = maxSeriesNumber + 1;\r\n\r\n    const { instance: metadata } = smDisplaySet;\r\n\r\n    // construct SR dataset\r\n    const dataset = constructSR(metadata, { SeriesDescription, SeriesNumber }, annotations);\r\n\r\n    // Save in DICOM format\r\n    try {\r\n      if (dataSource) {\r\n        if (dataSource.wadoRoot == 'saveDicom') {\r\n          // download as DICOM file\r\n          const part10Buffer = datasetToBuffer(dataset);\r\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\r\n        } else {\r\n          // Save into Web Data source\r\n          const { StudyInstanceUID } = dataset;\r\n          await dataSource.store.dicom(dataset);\r\n          if (StudyInstanceUID) {\r\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\r\n          }\r\n        }\r\n        onSaveComplete({\r\n          title: 'SR Saved',\r\n          message: 'Measurements downloaded successfully',\r\n          type: 'success',\r\n        });\r\n      } else {\r\n        console.error('Server unspecified');\r\n      }\r\n    } catch (error) {\r\n      onSaveComplete({\r\n        title: 'SR Save Failed',\r\n        message: error.message || error.toString(),\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      saving = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * On clicking \"Reject annotations\" button\r\n   */\r\n  const onDeleteCurrentSRHandler = async () => {\r\n    try {\r\n      const activeViewport = props.viewports[props.activeViewportId];\r\n      const { StudyInstanceUID } = activeViewport;\r\n\r\n      // TODO: studies?\r\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n\r\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort((ds1: any, ds2: any) => {\r\n        const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\r\n        const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\r\n        return dateTime1 > dateTime2;\r\n      })[study.derivedDisplaySets.length - 1];\r\n\r\n      // TODO: use dataSource.reject.dicom()\r\n      // await DICOMSR.rejectMeasurements(\r\n      //   study.wadoRoot,\r\n      //   lastDerivedDisplaySet.StudyInstanceUID,\r\n      //   lastDerivedDisplaySet.SeriesInstanceUID\r\n      // );\r\n      props.onRejectComplete({\r\n        title: 'Report rejected',\r\n        message: 'Latest report rejected successfully',\r\n        type: 'success',\r\n      });\r\n    } catch (error) {\r\n      props.onRejectComplete({\r\n        title: 'Failed to reject report',\r\n        message: error.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler for clicking event of an annotation item.\r\n   *\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\r\n    const roiAnnotation = microscopyService.getAnnotation(uid);\r\n    microscopyService.selectAnnotation(roiAnnotation);\r\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportId);\r\n  };\r\n\r\n  /**\r\n   * Handler for \"Edit\" action of an annotation item\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\r\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\r\n  };\r\n\r\n  // Convert ROI annotations managed by microscopyService into our\r\n  // own format for display\r\n  const data = roiAnnotations.map((roiAnnotation, index) => {\r\n    const label = roiAnnotation.getDetailedLabel();\r\n    const area = roiAnnotation.getArea();\r\n    const length = roiAnnotation.getLength();\r\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\r\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\r\n\r\n    // other events\r\n    const { uid } = roiAnnotation;\r\n\r\n    // display text\r\n    const displayText = [];\r\n\r\n    if (area !== undefined) {\r\n      displayText.push(formatArea(area));\r\n    } else if (length !== undefined) {\r\n      displayText.push(\r\n        shortAxisLength\r\n          ? `${formatLength(length, 'μm')} x ${formatLength(shortAxisLength, 'μm')}`\r\n          : `${formatLength(length, 'μm')}`\r\n      );\r\n    }\r\n\r\n    // convert to measurementItem format compatible with <MeasurementTable /> component\r\n    return {\r\n      uid,\r\n      index,\r\n      label,\r\n      isActive: isSelected,\r\n      displayText,\r\n      roiAnnotation,\r\n    };\r\n  });\r\n\r\n  const disabled = data.length === 0;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        data-cy={'measurements-panel'}\r\n      >\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          servicesManager={props.servicesManager}\r\n          data={data}\r\n          onClick={onMeasurementItemClickHandler}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(MicroscopyPanel);\r\n\r\nexport default connectedMicroscopyPanel;\r\n","import OHIF from '@ohif/core';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const instance = instances[0];\r\n\r\n  let singleFrameInstance = instance;\r\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\r\n  for (const instanceI of instances) {\r\n    const framesI = +instanceI.NumberOfFrames || 1;\r\n    if (framesI < currentFrames) {\r\n      singleFrameInstance = instanceI;\r\n      currentFrames = framesI;\r\n    }\r\n  }\r\n  let imageIdForThumbnail = null;\r\n  if (singleFrameInstance) {\r\n    if (currentFrames == 1) {\r\n      // Not all DICOM server implementations support thumbnail service,\r\n      // So if we have a single-frame image, we will prefer it.\r\n      imageIdForThumbnail = singleFrameInstance.imageId;\r\n    }\r\n    if (!imageIdForThumbnail) {\r\n      // use the thumbnail service provided by DICOM server\r\n      const dataSource = extensionManager.getActiveDataSource()[0];\r\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\r\n        instance: singleFrameInstance,\r\n        thumbnail: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  instances = instances.map(inst => {\r\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\r\n    // When the Microscopy file was built by certain tool from multiple image files,\r\n    // each instance's FrameOfReferenceUID is sometimes different.\r\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\r\n    // the case is so often, so let's override this value manually here.\r\n    //\r\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\r\n\r\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\r\n\r\n    return inst;\r\n  });\r\n\r\n  const othersFrameOfReferenceUID = instances\r\n    .filter(v => v)\r\n    .map(inst => inst.FrameOfReferenceUID)\r\n    .filter((value, index, array) => array.indexOf(value) === index);\r\n  if (othersFrameOfReferenceUID.length > 1) {\r\n    console.warn(\r\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\r\n      othersFrameOfReferenceUID\r\n    );\r\n  }\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SM',\r\n    altImageText: 'Microscopy',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    FrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\r\n    // Map ContentDate/Time to SeriesTime for series list sorting.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\r\n    instance,\r\n    numImageFrames: 0,\r\n    numInstances: 1,\r\n    imageIdForThumbnail, // thumbnail image\r\n    others: instances, // all other level instances in the image Pyramid\r\n    othersFrameOfReferenceUID,\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","const DCM_CODE_VALUES = {\r\n  IMAGING_MEASUREMENTS: '126010',\r\n  MEASUREMENT_GROUP: '125007',\r\n  IMAGE_REGION: '111030',\r\n  FINDING: '121071',\r\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\r\n  LENGTH: '410668003',\r\n  AREA: '42798000',\r\n  SHORT_AXIS: 'G-A186',\r\n  LONG_AXIS: 'G-A185',\r\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\r\n};\r\n\r\nexport default DCM_CODE_VALUES;\r\n","export default function toArray(item) {\r\n  return Array.isArray(item) ? item : [item];\r\n}\r\n","import dcmjs from 'dcmjs';\r\n\r\nimport DCM_CODE_VALUES from './dcmCodeValues';\r\nimport toArray from './toArray';\r\n\r\nconst MeasurementReport = dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\r\n\r\n// Define as async so that it returns a promise, expected by the ViewportGrid\r\nexport default async function loadSR(\r\n  microscopyService,\r\n  microscopySRDisplaySet,\r\n  referencedDisplaySet\r\n) {\r\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\r\n\r\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\r\n\r\n  const managedViewers = microscopyService.getManagedViewersForStudy(StudyInstanceUID);\r\n\r\n  if (!managedViewers || !managedViewers.length) {\r\n    return;\r\n  }\r\n\r\n  microscopySRDisplaySet.isLoaded = true;\r\n\r\n  const { rois, labels } = await _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID);\r\n\r\n  const managedViewer = managedViewers[0];\r\n\r\n  for (let i = 0; i < rois.length; i++) {\r\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\r\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\r\n    // evaluation.\r\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are going to manually remove that\r\n    // evaluation item.\r\n    const roi = rois[i];\r\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\r\n    const _properties = roiSymbols.find(s => s.description === 'properties');\r\n    const properties = roi[_properties];\r\n    properties['evaluations'] = [];\r\n\r\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\r\n  }\r\n}\r\n\r\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\r\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\r\n  const tools = Object.getOwnPropertyNames(toolState);\r\n\r\n  const DICOMMicroscopyViewer = await import(\r\n    /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\r\n  );\r\n\r\n  const measurementGroupContentItems = _getMeasurementGroups(naturalizedDataset);\r\n\r\n  const rois = [];\r\n  const labels = [];\r\n\r\n  tools.forEach(t => {\r\n    const toolSpecificToolState = toolState[t];\r\n    let scoord3d;\r\n\r\n    const capsToolType = t.toUpperCase();\r\n\r\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(mg => {\r\n      const imageRegionContentItem = toArray(mg.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n      );\r\n\r\n      return imageRegionContentItem.GraphicType === capsToolType;\r\n    });\r\n\r\n    toolSpecificToolState.forEach((coordinates, index) => {\r\n      const properties = {};\r\n\r\n      const options = {\r\n        coordinates,\r\n        frameOfReferenceUID: FrameOfReferenceUID,\r\n      };\r\n\r\n      if (t === 'Polygon') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\r\n      } else if (t === 'Polyline') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\r\n      } else if (t === 'Point') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\r\n      } else if (t === 'Ellipse') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\r\n      } else {\r\n        throw new Error('Unsupported tool type');\r\n      }\r\n\r\n      const measurementGroup = measurementGroupContentItemsForTool[index];\r\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\r\n      );\r\n\r\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\r\n      );\r\n\r\n      /**\r\n       * Extract presentation state from tracking identifier.\r\n       * Currently is stored in SR but should be stored in its tags.\r\n       */\r\n      if (trackingGroup) {\r\n        const regExp = /\\(([^)]+)\\)/;\r\n        const matches = regExp.exec(trackingGroup.TextValue);\r\n        if (matches && matches[1]) {\r\n          properties.presentationState = JSON.parse(matches[1]);\r\n          properties.marker = properties.presentationState.marker;\r\n        }\r\n      }\r\n\r\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [\r\n          DCM_CODE_VALUES.LENGTH,\r\n          DCM_CODE_VALUES.AREA,\r\n          DCM_CODE_VALUES.SHORT_AXIS,\r\n          DCM_CODE_VALUES.LONG_AXIS,\r\n          DCM_CODE_VALUES.ELLIPSE_AREA,\r\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      evaluations = evaluations.map(evaluation => {\r\n        const e = { ...evaluation };\r\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\r\n        return e;\r\n      });\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      measurements = measurements.map(measurement => {\r\n        const m = { ...measurement };\r\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\r\n        return m;\r\n      });\r\n\r\n      if (measurements && measurements.length) {\r\n        properties.measurements = measurements;\r\n        console.log('[SR] retrieving measurements...', measurements);\r\n      }\r\n\r\n      if (evaluations && evaluations.length) {\r\n        properties.evaluations = evaluations;\r\n        console.log('[SR] retrieving evaluations...', evaluations);\r\n      }\r\n\r\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\r\n      rois.push(roi);\r\n\r\n      if (findingGroup) {\r\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\r\n      } else {\r\n        labels.push('');\r\n      }\r\n    });\r\n  });\r\n\r\n  return { rois, labels };\r\n}\r\n\r\nfunction _getMeasurementGroups(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const measurementGroupContentItems = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).filter(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  return measurementGroupContentItems;\r\n}\r\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\r\nimport loadSR from './utils/loadSR';\r\nimport toArray from './utils/toArray';\r\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\r\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\r\n\r\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const firstMeasurementGroupContentItem = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).find(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  const imageRegionContentItem = toArray(firstMeasurementGroupContentItem.ContentSequence).find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n  );\r\n\r\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\r\n}\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const { displaySetService, microscopyService } = servicesManager.services;\r\n\r\n  const instance = instances[0];\r\n\r\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\r\n  // TODO -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\r\n  const naturalizedDataset = DicomMetadataStore.getSeries(\r\n    instance.StudyInstanceUID,\r\n    instance.SeriesInstanceUID\r\n  ).instances[0];\r\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(naturalizedDataset);\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SR',\r\n    altImageText: 'Microscopy SR',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    ReferencedFrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription,\r\n    // Map the content date/time to the series date/time, these are only used for filtering.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    instance,\r\n    metadata: naturalizedDataset,\r\n    isDerived: true,\r\n    isLoading: false,\r\n    isLoaded: false,\r\n    loadError: false,\r\n  };\r\n\r\n  displaySet.load = function (referencedDisplaySet) {\r\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(error => {\r\n      displaySet.isLoaded = false;\r\n      displaySet.loadError = true;\r\n      throw new Error(error);\r\n    });\r\n  };\r\n\r\n  displaySet.getSourceDisplaySet = function () {\r\n    let allDisplaySets = [];\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    studyMetadata.series.forEach(series => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return getSourceDisplaySet(allDisplaySets, displaySet);\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySRSopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySRSopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","/**\r\n * Get referenced SM displaySet from SR displaySet\r\n *\r\n * @param {*} allDisplaySets\r\n * @param {*} microscopySRDisplaySet\r\n * @returns\r\n */\r\nexport default function getSourceDisplaySet(allDisplaySets, microscopySRDisplaySet) {\r\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\r\n\r\n  const otherDisplaySets = allDisplaySets.filter(\r\n    ds => ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\r\n  );\r\n  const referencedDisplaySet = otherDisplaySets.find(\r\n    displaySet =>\r\n      displaySet.Modality === 'SM' &&\r\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\r\n        // sometimes each depth instance has the different FrameOfReferenceID\r\n        displaySet.othersFrameOfReferenceUID.includes(ReferencedFrameOfReferenceUID))\r\n  );\r\n\r\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\r\n    console.warn(\r\n      'No display set with FrameOfReferenceUID',\r\n      ReferencedFrameOfReferenceUID,\r\n      'single series, assuming data error, defaulting to only series.'\r\n    );\r\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\r\n  }\r\n\r\n  return referencedDisplaySet;\r\n}\r\n","import { id } from './id';\r\nimport React, { Suspense } from 'react';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './getCommandsModule';\r\n\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\r\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\r\nimport MicroscopyService from './services/MicroscopyService';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import('./DicomMicroscopyViewport');\r\n});\r\n\r\nconst MicroscopyViewport = props => {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nexport default {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  async preRegistration({ servicesManager, commandsManager, configuration = {}, appConfig }) {\r\n    servicesManager.registerService(MicroscopyService.REGISTRATION(servicesManager));\r\n  },\r\n\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    /**\r\n     *\r\n     * @param props {*}\r\n     * @param props.displaySets\r\n     * @param props.viewportId\r\n     * @param props.viewportLabel\r\n     * @param props.dataSource\r\n     * @param props.viewportOptions\r\n     * @param props.displaySetOptions\r\n     * @returns\r\n     */\r\n    const ExtendedMicroscopyViewport = props => {\r\n      const { viewportOptions } = props;\r\n\r\n      const [viewportGrid, viewportGridService] = useViewportGrid();\r\n      const { activeViewportId } = viewportGrid;\r\n\r\n      return (\r\n        <MicroscopyViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          activeViewportId={activeViewportId}\r\n          setViewportActive={(viewportId: string) => {\r\n            viewportGridService.setActiveViewportId(viewportId);\r\n          }}\r\n          viewportData={viewportOptions}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [\r\n      {\r\n        name: 'microscopy-dicom',\r\n        component: ExtendedMicroscopyViewport,\r\n      },\r\n    ];\r\n  },\r\n\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return [\r\n      getDicomMicroscopySopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n      getDicomMicroscopySRSopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n    ];\r\n  },\r\n\r\n  getPanelModule,\r\n\r\n  getCommandsModule,\r\n};\r\n","import React from 'react';\r\nimport { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nexport default function getPanelModule({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}: {\r\n  servicesManager: ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const wrappedMeasurementPanel = () => {\r\n    const [{ activeViewportId, viewports }] = useViewportGrid();\r\n\r\n    return (\r\n      <MicroscopyPanel\r\n        viewports={viewports}\r\n        activeViewportId={activeViewportId}\r\n        onSaveComplete={() => {}}\r\n        onRejectComplete={() => {}}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'measure',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      secondaryLabel: 'Measurements',\r\n      component: wrappedMeasurementPanel,\r\n    },\r\n  ];\r\n}\r\n","import { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport styles from './utils/styles';\r\nimport callInputDialog from './utils/callInputDialog';\r\n\r\nexport default function getCommandsModule({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}: {\r\n  servicesManager: ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const { viewportGridService, uiDialogService, microscopyService } = servicesManager.services;\r\n\r\n  const actions = {\r\n    // Measurement tool commands:\r\n    deleteMeasurement: ({ uid }) => {\r\n      if (uid) {\r\n        const roiAnnotation = microscopyService.getAnnotation(uid);\r\n        if (roiAnnotation) {\r\n          microscopyService.removeAnnotation(roiAnnotation);\r\n        }\r\n      }\r\n    },\r\n\r\n    setLabel: ({ uid }) => {\r\n      const roiAnnotation = microscopyService.getAnnotation(uid);\r\n\r\n      callInputDialog({\r\n        uiDialogService,\r\n        defaultValue: '',\r\n        callback: (value: string, action: string) => {\r\n          switch (action) {\r\n            case 'save': {\r\n              roiAnnotation.setLabel(value);\r\n              microscopyService.triggerRelabel(roiAnnotation);\r\n            }\r\n          }\r\n        },\r\n      });\r\n    },\r\n\r\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\r\n      const dragPanOnMiddle = [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ];\r\n      const dragZoomOnRight = [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ];\r\n      if (\r\n        ['line', 'box', 'circle', 'point', 'polygon', 'freehandpolygon', 'freehandline'].indexOf(\r\n          toolName\r\n        ) >= 0\r\n      ) {\r\n        // TODO: read from configuration\r\n        const options = {\r\n          geometryType: toolName,\r\n          vertexEnabled: true,\r\n          styleOptions: styles.default,\r\n          bindings: {\r\n            mouseButtons: ['left'],\r\n          },\r\n        } as any;\r\n        if ('line' === toolName) {\r\n          options.minPoints = 2;\r\n          options.maxPoints = 2;\r\n        } else if ('point' === toolName) {\r\n          delete options.styleOptions;\r\n          delete options.vertexEnabled;\r\n        }\r\n\r\n        microscopyService.activateInteractions([\r\n          ['draw', options],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else if (toolName == 'dragPan') {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            'dragPan',\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left', 'middle'],\r\n              },\r\n            },\r\n          ],\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            toolName,\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left'],\r\n              },\r\n            },\r\n          ],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      }\r\n    },\r\n    toggleOverlays: () => {\r\n      // overlay\r\n      const overlays = document.getElementsByClassName('microscopy-viewport-overlay');\r\n      let onoff = false; // true if this will toggle on\r\n      for (let i = 0; i < overlays.length; i++) {\r\n        if (i === 0) {\r\n          onoff = overlays.item(0).classList.contains('hidden');\r\n        }\r\n        overlays.item(i).classList.toggle('hidden');\r\n      }\r\n\r\n      // overview\r\n      const { activeViewportId, viewports } = viewportGridService.getState();\r\n      microscopyService.toggleOverviewMap(activeViewportId);\r\n    },\r\n    toggleAnnotations: () => {\r\n      microscopyService.toggleROIsVisibility();\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    deleteMeasurement: {\r\n      commandFn: actions.deleteMeasurement,\r\n      storeContexts: [] as any[],\r\n      options: {},\r\n    },\r\n    setLabel: {\r\n      commandFn: actions.setLabel,\r\n      storeContexts: [] as any[],\r\n      options: {},\r\n    },\r\n    setToolActive: {\r\n      commandFn: actions.setToolActive,\r\n      storeContexts: [] as any[],\r\n      options: {},\r\n    },\r\n    toggleOverlays: {\r\n      commandFn: actions.toggleOverlays,\r\n      storeContexts: [] as any[],\r\n      options: {},\r\n    },\r\n    toggleAnnotations: {\r\n      commandFn: actions.toggleAnnotations,\r\n      storeContexts: [] as any[],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'MICROSCOPY',\r\n  };\r\n}\r\n"],"names":["id","packageJson","coordinateFormatScoord3d2Geometry","coordinates","pyramid","transform","Array","isArray","metadata","length","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","map","c","slideCoord","pixelCoord","options","Error","point","m","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","width","activeStroke","active","image","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","constructor","viewer","viewportId","container","studyInstanceUID","seriesInstanceUID","super","this","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","symbols","Object","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","registerEvents","activateDefaultInteractions","addContextMenuCallback","callback","destroy","unregisterEvents","publish","key","roiGraphic","_broadcastEvent","managedViewer","addEventListener","removeEventListener","event","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","_ref","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","keys","forEach","availableInteractionName","interaction","name","config","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","window","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","roiAnnotation","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","height","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","arguments","undefined","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","serviceManager","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","clearAnnotations","removeAnnotation","data","add","subscribe","AnnotationEvents","onRelabel","item","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","addViewer","_manager","focusAnnotation","_potentiallyLoadSR","StudyInstanceUID","displaySets","studyMetadata","DicomMetadataStore","getStudy","smDisplaySet","ds","Modality","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","includes","some","isLoaded","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","load","removeViewer","toggleROIsVisibility","mv","getAnnotations","push","getAnnotationsForStudy","a","annotation","selectAnnotation","baseManagedViewer","activeInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","REGISTRATION","altName","create","_ref2","configuration","callInputDialog","uiDialogService","title","defaultValue","value","action","dialogId","onSubmitHandler","dismiss","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","_ref3","setValue","React","Input","labelClassName","autoFocus","className","onChange","persist","target","onKeyPress","datasetToBuffer","dcmjs","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","props","microscopyService","servicesManager","services","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","extensionManager","displaySetService","useEffect","viewport","viewports","get","activeViewportId","displaySetInstanceUIDs","displaySet","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","MeasurementTable","onClick","onEdit","commandsManager","runCommand","utils","OHIF","SOP_CLASS_UIDS","SOPClassHandlerId","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","instances","instance","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","imageIdForThumbnail","imageId","getActiveDataSource","getImageIdsForInstance","thumbnail","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SeriesInstanceUID","SOPInstanceUID","SOPClassUID","inst","v","array","indexOf","console","warn","plugin","altImageText","displaySetInstanceUID","guid","firstInstance","numImageFrames","numInstances","others","_getDisplaySetsFromSeries","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","async","loadSR","microscopySRDisplaySet","referencedDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","JSON","parse","marker","measurements","evaluations","evaluation","e","measurement","log","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","getSeries","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","isDerived","loadError","catch","error","getSourceDisplaySet","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","getDicomMicroscopySRSopClassHandler","Component","MicroscopyViewport","Suspense","fallback","preRegistration","appConfig","registerService","getViewportModule","component","viewportOptions","viewportGrid","viewportGridService","useViewportGrid","_extends","setViewportActive","setActiveViewportId","viewportData","getSopClassHandlerModule","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","deleteMeasurement","setToolActive","_ref4","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","geometryType","vertexEnabled","minPoints","maxPoints","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","getState","toggleAnnotations","definitions","commandFn","storeContexts","defaultContext"],"sourceRoot":""}
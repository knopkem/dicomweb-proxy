{"version":3,"file":"613.bundle.5804a80c89dddd4251d0.js","mappings":"uIAEMA,E,+CAAKC,G,eCKX,MAAM,mBAAEC,GAAuBC,EAAAA,SAQ/B,SAASC,EAAcC,EAAML,EAAIM,EAAMC,EAAOC,EAAUC,EAASC,GAC/D,MAAO,CACLV,KACAM,OACAC,QACAF,OACAG,WACAC,UACAC,SAEJ,CAEA,MAAMC,EAAsBP,EAAcQ,KAAK,KAAM,UAC/CC,EAAsBT,EAAcQ,KAAK,KAAM,UAC/CE,EAAoBV,EAAcQ,KAAK,KAAM,QAQnD,SAASG,EAAkBC,EAAQC,EAAOC,GACxC,MAAO,CACLlB,GAAIgB,EAAOG,WACXF,QACAC,WACAb,KAAM,SACNG,SAAU,CACR,CACEY,YAAa,iBACbC,eAAgB,IACXnB,EAAmBc,IAExBM,QAAS,gBAIjB,CAEA,MAAMC,EAAe,CAAC,UAAW,MAAO,eAQxC,SAASC,EAA6BC,GASpC,OARaF,EAAaG,KAAIC,IAAe,CAC3CP,YAAa,gBACbC,eAAgB,CACdM,cACAF,YAEFH,QAAS,iBAGb,CAEA,MAwRA,EAxRuB,CAErB,CACEtB,GAAI,OACJK,KAAM,kBACNuB,MAAO,CACLvB,KAAM,OACNC,KAAM,YACNC,MAAO,OACPC,SAAUgB,EAA6B,UAI3C,CACExB,GAAI,cACJK,KAAM,mBACNuB,MAAO,CACLC,QAAS,cACTC,QAAShB,EACP,cACA,oBACA,eACA,CACE,CACEM,YAAa,gBACbC,eAAgB,CACdI,SAAU,eAEZH,QAAS,gBAGb,gBAEFS,UAAW,CACTzB,KAAM,eACNC,MAAO,aACPyB,UAAU,EACVvB,QAAS,eAEXwB,UAAU,EACVC,SAAUC,EAAAA,GACVC,MAAO,CACLrB,EAAkB,EAAG,cAAe,YACpCA,EAAkB,EAAG,OAAQ,eAC7BA,EAAkB,EAAG,QAAS,YAC9BA,EAAkB,EAAG,OAAQ,cAC7BA,EAAkB,EAAG,QAAS,cAKpC,CACEf,GAAI,MACJK,KAAM,kBACNuB,MAAO,CACLvB,KAAM,OACNC,KAAM,YACNC,MAAO,MACPC,SAAUgB,EAA6B,SAG3C,CACExB,GAAI,UACJK,KAAM,cACNuB,MAAO,CACLtB,KAAM,eACNC,MAAO,UACPF,KAAM,SACNG,SAAU,CACR,CACEY,YAAa,4BACbC,eAAgB,CAAC,EACjBC,QAAS,kBAKjB,CACEtB,GAAI,SACJK,KAAM,sBACNuB,MAAO,CACLS,KAAM,EACNC,QAAS,IAGb,CACEtC,GAAI,MACJK,KAAM,cACNuB,MAAO,CACLvB,KAAM,SACNC,KAAM,WACNC,MAAO,MACPC,SAAU,CACR,CACEY,YAAa,wBACbC,eAAgB,CACdkB,WAAY,OAEdjB,QAAS,cAKjB,CACEtB,GAAI,aACJK,KAAM,kBACNuB,MAAO,CACLvB,KAAM,OACNC,KAAM,iBACNC,MAAO,aACPC,SAAU,CACR,CACEY,YAAa,gBACbC,eAAgB,CACdI,SAAU,aACVE,YAAa,OAEfL,QAAS,kBAMjB,CACEtB,GAAI,YACJK,KAAM,mBACNuB,MAAO,CACLY,SAAS,EACTX,QAAS,YACTC,QAASnB,EACP,QACA,aACA,aACA,CACE,CACES,YAAa,gBACbC,eAAgB,CAAC,EACjBC,QAAS,gBAGb,SAEFS,UAAW,CACTzB,KAAM,eACNC,MAAO,GACPyB,UAAU,EACVvB,QAAS,cAEX2B,MAAO,CACLzB,EACE,QACA,aACA,aACA,CACE,CACES,YAAa,gBACbC,eAAgB,CAAC,EACjBC,QAAS,gBAGb,SAEFX,EACE,eACA,oBACA,eACA,CACE,CACES,YAAa,mBACbC,eAAgB,CAAC,EACjBC,QAAS,gBAGb,cAEFX,EACE,kBACA,uBACA,oBACA,CACE,CACES,YAAa,yBACbC,eAAgB,CAAC,EACjBC,QAAS,gBAGb,mBAEFT,EAAoB,iBAAkB,OAAQ,mBAAoB,CAChE,CACEO,YAAa,uBACbC,eAAgB,CAAC,EACjBC,QAAS,iBAGbT,EACE,iBACA,sBACA,kBACA,CACE,CACEO,YAAa,uBACbC,eAAgB,CAAC,EACjBC,QAAS,iBAIfR,EACE,cACA,oBACA,eACA,CACE,CACEM,YAAa,gBACbC,eAAgB,CACdI,SAAU,eAEZH,QAAS,gBAGb,gBAEFX,EACE,SACA,cACA,SACA,CACE,CACES,YAAa,iBACbC,eAAgB,CAAC,EACjBC,QAAS,gBAGb,iBAEFT,EACE,OACA,YACA,OACA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","sources":["webpack:///../../../modes/segmentation/src/id.js","webpack:///../../../modes/segmentation/src/toolbarButtons.ts","webpack:///../../../modes/segmentation/src/initToolGroups.ts","webpack:///../../../modes/segmentation/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import {\r\n  // ExpandableToolbarButton,\r\n  // ListMenu,\r\n  WindowLevelMenuItem,\r\n} from '@ohif/ui';\r\nimport { defaults } from '@ohif/core';\r\n\r\nconst { windowLevelPresets } = defaults;\r\n/**\r\n *\r\n * @param {*} type - 'tool' | 'action' | 'toggle'\r\n * @param {*} id\r\n * @param {*} icon\r\n * @param {*} label\r\n */\r\nfunction _createButton(type, id, icon, label, commands, tooltip, uiType) {\r\n  return {\r\n    id,\r\n    icon,\r\n    label,\r\n    type,\r\n    commands,\r\n    tooltip,\r\n    uiType,\r\n  };\r\n}\r\n\r\nconst _createActionButton = _createButton.bind(null, 'action');\r\nconst _createToggleButton = _createButton.bind(null, 'toggle');\r\nconst _createToolButton = _createButton.bind(null, 'tool');\r\n\r\n/**\r\n *\r\n * @param {*} preset - preset number (from above import)\r\n * @param {*} title\r\n * @param {*} subtitle\r\n */\r\nfunction _createWwwcPreset(preset, title, subtitle) {\r\n  return {\r\n    id: preset.toString(),\r\n    title,\r\n    subtitle,\r\n    type: 'action',\r\n    commands: [\r\n      {\r\n        commandName: 'setWindowLevel',\r\n        commandOptions: {\r\n          ...windowLevelPresets[preset],\r\n        },\r\n        context: 'CORNERSTONE',\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nconst toolGroupIds = ['default', 'mpr', 'SRToolGroup'];\r\n\r\n/**\r\n * Creates an array of 'setToolActive' commands for the given toolName - one for\r\n * each toolGroupId specified in toolGroupIds.\r\n * @param {string} toolName\r\n * @returns {Array} an array of 'setToolActive' commands\r\n */\r\nfunction _createSetToolActiveCommands(toolName) {\r\n  const temp = toolGroupIds.map(toolGroupId => ({\r\n    commandName: 'setToolActive',\r\n    commandOptions: {\r\n      toolGroupId,\r\n      toolName,\r\n    },\r\n    context: 'CORNERSTONE',\r\n  }));\r\n  return temp;\r\n}\r\n\r\nconst toolbarButtons = [\r\n  // Zoom..\r\n  {\r\n    id: 'Zoom',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-zoom',\r\n      label: 'Zoom',\r\n      commands: _createSetToolActiveCommands('Zoom'),\r\n    },\r\n  },\r\n  // Window Level + Presets...\r\n  {\r\n    id: 'WindowLevel',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'WindowLevel',\r\n      primary: _createToolButton(\r\n        'WindowLevel',\r\n        'tool-window-level',\r\n        'Window Level',\r\n        [\r\n          {\r\n            commandName: 'setToolActive',\r\n            commandOptions: {\r\n              toolName: 'WindowLevel',\r\n            },\r\n            context: 'CORNERSTONE',\r\n          },\r\n        ],\r\n        'Window Level'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: 'W/L Manual',\r\n        isActive: true,\r\n        tooltip: 'W/L Presets',\r\n      },\r\n      isAction: true, // ?\r\n      renderer: WindowLevelMenuItem,\r\n      items: [\r\n        _createWwwcPreset(1, 'Soft tissue', '400 / 40'),\r\n        _createWwwcPreset(2, 'Lung', '1500 / -600'),\r\n        _createWwwcPreset(3, 'Liver', '150 / 90'),\r\n        _createWwwcPreset(4, 'Bone', '2500 / 480'),\r\n        _createWwwcPreset(5, 'Brain', '80 / 40'),\r\n      ],\r\n    },\r\n  },\r\n  // Pan...\r\n  {\r\n    id: 'Pan',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-move',\r\n      label: 'Pan',\r\n      commands: _createSetToolActiveCommands('Pan'),\r\n    },\r\n  },\r\n  {\r\n    id: 'Capture',\r\n    type: 'ohif.action',\r\n    props: {\r\n      icon: 'tool-capture',\r\n      label: 'Capture',\r\n      type: 'action',\r\n      commands: [\r\n        {\r\n          commandName: 'showDownloadViewportModal',\r\n          commandOptions: {},\r\n          context: 'CORNERSTONE',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'Layout',\r\n    type: 'ohif.layoutSelector',\r\n    props: {\r\n      rows: 3,\r\n      columns: 3,\r\n    },\r\n  },\r\n  {\r\n    id: 'MPR',\r\n    type: 'ohif.action',\r\n    props: {\r\n      type: 'toggle',\r\n      icon: 'icon-mpr',\r\n      label: 'MPR',\r\n      commands: [\r\n        {\r\n          commandName: 'toggleHangingProtocol',\r\n          commandOptions: {\r\n            protocolId: 'mpr',\r\n          },\r\n          context: 'DEFAULT',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'Crosshairs',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-crosshair',\r\n      label: 'Crosshairs',\r\n      commands: [\r\n        {\r\n          commandName: 'setToolActive',\r\n          commandOptions: {\r\n            toolName: 'Crosshairs',\r\n            toolGroupId: 'mpr',\r\n          },\r\n          context: 'CORNERSTONE',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  // More...\r\n  {\r\n    id: 'MoreTools',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      isRadio: true, // ?\r\n      groupId: 'MoreTools',\r\n      primary: _createActionButton(\r\n        'Reset',\r\n        'tool-reset',\r\n        'Reset View',\r\n        [\r\n          {\r\n            commandName: 'resetViewport',\r\n            commandOptions: {},\r\n            context: 'CORNERSTONE',\r\n          },\r\n        ],\r\n        'Reset'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: '',\r\n        isActive: true,\r\n        tooltip: 'More Tools',\r\n      },\r\n      items: [\r\n        _createActionButton(\r\n          'Reset',\r\n          'tool-reset',\r\n          'Reset View',\r\n          [\r\n            {\r\n              commandName: 'resetViewport',\r\n              commandOptions: {},\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Reset'\r\n        ),\r\n        _createActionButton(\r\n          'rotate-right',\r\n          'tool-rotate-right',\r\n          'Rotate Right',\r\n          [\r\n            {\r\n              commandName: 'rotateViewportCW',\r\n              commandOptions: {},\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Rotate +90'\r\n        ),\r\n        _createActionButton(\r\n          'flip-horizontal',\r\n          'tool-flip-horizontal',\r\n          'Flip Horizontally',\r\n          [\r\n            {\r\n              commandName: 'flipViewportHorizontal',\r\n              commandOptions: {},\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Flip Horizontal'\r\n        ),\r\n        _createToggleButton('StackImageSync', 'link', 'Stack Image Sync', [\r\n          {\r\n            commandName: 'toggleStackImageSync',\r\n            commandOptions: {},\r\n            context: 'CORNERSTONE',\r\n          },\r\n        ]),\r\n        _createToggleButton(\r\n          'ReferenceLines',\r\n          'tool-referenceLines', // change this with the new icon\r\n          'Reference Lines',\r\n          [\r\n            {\r\n              commandName: 'toggleReferenceLines',\r\n              commandOptions: {},\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ]\r\n        ),\r\n        _createToolButton(\r\n          'StackScroll',\r\n          'tool-stack-scroll',\r\n          'Stack Scroll',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'StackScroll',\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Stack Scroll'\r\n        ),\r\n        _createActionButton(\r\n          'invert',\r\n          'tool-invert',\r\n          'Invert',\r\n          [\r\n            {\r\n              commandName: 'invertViewport',\r\n              commandOptions: {},\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Invert Colors'\r\n        ),\r\n        _createToggleButton(\r\n          'cine',\r\n          'tool-cine',\r\n          'Cine',\r\n          [\r\n            {\r\n              commandName: 'toggleCine',\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Cine'\r\n        ),\r\n        _createToolButton(\r\n          'Magnify',\r\n          'tool-magnify',\r\n          'Magnify',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'Magnify',\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n          'Magnify'\r\n        ),\r\n        _createActionButton(\r\n          'TagBrowser',\r\n          'list-bullets',\r\n          'Dicom Tag Browser',\r\n          [\r\n            {\r\n              commandName: 'openDICOMTagViewer',\r\n              commandOptions: {},\r\n              context: 'DEFAULT',\r\n            },\r\n          ],\r\n          'Dicom Tag Browser'\r\n        ),\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nexport default toolbarButtons;\r\n","const brushInstanceNames = {\r\n  CircularBrush: 'CircularBrush',\r\n  CircularEraser: 'CircularEraser',\r\n  SphereBrush: 'SphereBrush',\r\n  SphereEraser: 'SphereEraser',\r\n  ThresholdCircularBrush: 'ThresholdCircularBrush',\r\n  ThresholdSphereBrush: 'ThresholdSphereBrush',\r\n};\r\n\r\nconst brushStrategies = {\r\n  CircularBrush: 'FILL_INSIDE_CIRCLE',\r\n  CircularEraser: 'ERASE_INSIDE_CIRCLE',\r\n  SphereBrush: 'FILL_INSIDE_SPHERE',\r\n  SphereEraser: 'ERASE_INSIDE_SPHERE',\r\n  ThresholdCircularBrush: 'THRESHOLD_INSIDE_CIRCLE',\r\n  ThresholdSphereBrush: 'THRESHOLD_INSIDE_SPHERE',\r\n};\r\n\r\nfunction createTools(utilityModule) {\r\n  const { toolNames, Enums } = utilityModule.exports;\r\n  return {\r\n    active: [\r\n      { toolName: toolNames.WindowLevel, bindings: [{ mouseButton: Enums.MouseBindings.Primary }] },\r\n      { toolName: toolNames.Pan, bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }] },\r\n      { toolName: toolNames.Zoom, bindings: [{ mouseButton: Enums.MouseBindings.Secondary }] },\r\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\r\n    ],\r\n    passive: Object.keys(brushInstanceNames)\r\n      .map(brushName => ({\r\n        toolName: brushName,\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: brushStrategies[brushName],\r\n        },\r\n      }))\r\n      .concat([\r\n        { toolName: toolNames.CircleScissors },\r\n        { toolName: toolNames.RectangleScissors },\r\n        { toolName: toolNames.SphereScissors },\r\n        { toolName: toolNames.StackScroll },\r\n        { toolName: toolNames.Magnify },\r\n        { toolName: toolNames.SegmentationDisplay },\r\n      ]),\r\n    disabled: [{ toolName: toolNames.ReferenceLines }],\r\n  };\r\n}\r\n\r\nfunction initDefaultToolGroup(extensionManager, toolGroupService, commandsManager, toolGroupId) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.tools'\r\n  );\r\n  const tools = createTools(utilityModule);\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nfunction initMPRToolGroup(extensionManager, toolGroupService, commandsManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.tools'\r\n  );\r\n  const tools = createTools(utilityModule);\r\n  tools.disabled.push(\r\n    {\r\n      toolName: utilityModule.exports.toolNames.Crosshairs,\r\n      configuration: {\r\n        viewportIndicators: false,\r\n        autoPan: {\r\n          enabled: false,\r\n          panSize: 10,\r\n        },\r\n      },\r\n    },\r\n    { toolName: utilityModule.exports.toolNames.ReferenceLines }\r\n  );\r\n  toolGroupService.createToolGroupAndAddTools('mpr', tools);\r\n}\r\n\r\nfunction initToolGroups(extensionManager, toolGroupService, commandsManager) {\r\n  initDefaultToolGroup(extensionManager, toolGroupService, commandsManager, 'default');\r\n  initMPRToolGroup(extensionManager, toolGroupService, commandsManager);\r\n}\r\n\r\nexport default initToolGroups;\r\n","import { hotkeys } from '@ohif/core';\r\nimport { id } from './id';\r\nimport toolbarButtons from './toolbarButtons';\r\nimport initToolGroups from './initToolGroups';\r\n\r\nconst ohif = {\r\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\r\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\r\n  hangingProtocol: '@ohif/extension-default.hangingProtocolModule.default',\r\n  leftPanel: '@ohif/extension-default.panelModule.seriesList',\r\n  rightPanel: '@ohif/extension-default.panelModule.measure',\r\n};\r\n\r\nconst cornerstone = {\r\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\r\n};\r\n\r\nconst segmentation = {\r\n  panel: '@ohif/extension-cornerstone-dicom-seg.panelModule.panelSegmentation',\r\n  panelTool: '@ohif/extension-cornerstone-dicom-seg.panelModule.panelSegmentationWithTools',\r\n  sopClassHandler: '@ohif/extension-cornerstone-dicom-seg.sopClassHandlerModule.dicom-seg',\r\n  viewport: '@ohif/extension-cornerstone-dicom-seg.viewportModule.dicom-seg',\r\n};\r\n\r\n/**\r\n * Just two dependencies to be able to render a viewport with panels in order\r\n * to make sure that the mode is working.\r\n */\r\nconst extensionDependencies = {\r\n  '@ohif/extension-default': '^3.0.0',\r\n  '@ohif/extension-cornerstone': '^3.0.0',\r\n  '@ohif/extension-cornerstone-dicom-seg': '^3.0.0',\r\n};\r\n\r\nfunction modeFactory({ modeConfiguration }) {\r\n  return {\r\n    /**\r\n     * Mode ID, which should be unique among modes used by the viewer. This ID\r\n     * is used to identify the mode in the viewer's state.\r\n     */\r\n    id,\r\n    routeName: 'segmentation',\r\n    /**\r\n     * Mode name, which is displayed in the viewer's UI in the workList, for the\r\n     * user to select the mode.\r\n     */\r\n    displayName: 'Segmentation',\r\n    /**\r\n     * Runs when the Mode Route is mounted to the DOM. Usually used to initialize\r\n     * Services and other resources.\r\n     */\r\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\r\n      const { measurementService, toolbarService, toolGroupService } = servicesManager.services;\r\n\r\n      measurementService.clearMeasurements();\r\n\r\n      // Init Default and SR ToolGroups\r\n      initToolGroups(extensionManager, toolGroupService, commandsManager);\r\n\r\n      let unsubscribe;\r\n\r\n      const activateTool = () => {\r\n        toolbarService.recordInteraction({\r\n          groupId: 'WindowLevel',\r\n          interactionType: 'tool',\r\n          commands: [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'WindowLevel',\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n        });\r\n\r\n        // We don't need to reset the active tool whenever a viewport is getting\r\n        // added to the toolGroup.\r\n        unsubscribe();\r\n      };\r\n\r\n      // Since we only have one viewport for the basic cs3d mode and it has\r\n      // only one hanging protocol, we can just use the first viewport\r\n      ({ unsubscribe } = toolGroupService.subscribe(\r\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\r\n        activateTool\r\n      ));\r\n\r\n      toolbarService.init(extensionManager);\r\n      toolbarService.addButtons(toolbarButtons);\r\n      toolbarService.createButtonSection('primary', [\r\n        'Zoom',\r\n        'WindowLevel',\r\n        'Pan',\r\n        'Capture',\r\n        'Layout',\r\n        'MPR',\r\n        'Crosshairs',\r\n        'MoreTools',\r\n      ]);\r\n    },\r\n    onModeExit: ({ servicesManager }) => {\r\n      const {\r\n        toolGroupService,\r\n        syncGroupService,\r\n        toolbarService,\r\n        segmentationService,\r\n        cornerstoneViewportService,\r\n      } = servicesManager.services;\r\n\r\n      toolGroupService.destroy();\r\n      syncGroupService.destroy();\r\n      segmentationService.destroy();\r\n      cornerstoneViewportService.destroy();\r\n    },\r\n    /** */\r\n    validationTags: {\r\n      study: [],\r\n      series: [],\r\n    },\r\n    /**\r\n     * A boolean return value that indicates whether the mode is valid for the\r\n     * modalities of the selected studies. For instance a PET/CT mode should be\r\n     */\r\n    isValidMode: ({ modalities }) => true,\r\n    /**\r\n     * Mode Routes are used to define the mode's behavior. A list of Mode Route\r\n     * that includes the mode's path and the layout to be used. The layout will\r\n     * include the components that are used in the layout. For instance, if the\r\n     * default layoutTemplate is used (id: '@ohif/extension-default.layoutTemplateModule.viewerLayout')\r\n     * it will include the leftPanels, rightPanels, and viewports. However, if\r\n     * you define another layoutTemplate that includes a Footer for instance,\r\n     * you should provide the Footer component here too. Note: We use Strings\r\n     * to reference the component's ID as they are registered in the internal\r\n     * ExtensionManager. The template for the string is:\r\n     * `${extensionId}.{moduleType}.${componentId}`.\r\n     */\r\n    routes: [\r\n      {\r\n        path: 'template',\r\n        layoutTemplate: ({ location, servicesManager }) => {\r\n          return {\r\n            id: ohif.layout,\r\n            props: {\r\n              leftPanels: [ohif.leftPanel],\r\n              rightPanels: [segmentation.panelTool],\r\n              viewports: [\r\n                {\r\n                  namespace: cornerstone.viewport,\r\n                  displaySetsToDisplay: [ohif.sopClassHandler],\r\n                },\r\n                {\r\n                  namespace: segmentation.viewport,\r\n                  displaySetsToDisplay: [segmentation.sopClassHandler],\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n    /** List of extensions that are used by the mode */\r\n    extensions: extensionDependencies,\r\n    /** HangingProtocol used by the mode */\r\n    // hangingProtocol: [''],\r\n    /** SopClassHandlers used by the mode */\r\n    sopClassHandlers: [ohif.sopClassHandler, segmentation.sopClassHandler],\r\n    /** hotkeys for mode */\r\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\r\n  };\r\n}\r\n\r\nconst mode = {\r\n  id,\r\n  modeFactory,\r\n  extensionDependencies,\r\n};\r\n\r\nexport default mode;\r\n"],"names":["id","packageJson","windowLevelPresets","defaults","_createButton","type","icon","label","commands","tooltip","uiType","_createActionButton","bind","_createToggleButton","_createToolButton","_createWwwcPreset","preset","title","subtitle","toString","commandName","commandOptions","context","toolGroupIds","_createSetToolActiveCommands","toolName","map","toolGroupId","props","groupId","primary","secondary","isActive","isAction","renderer","WindowLevelMenuItem","items","rows","columns","protocolId","isRadio","brushInstanceNames","CircularBrush","CircularEraser","SphereBrush","SphereEraser","ThresholdCircularBrush","ThresholdSphereBrush","brushStrategies","createTools","utilityModule","toolNames","Enums","exports","active","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","passive","Object","keys","brushName","parentTool","configuration","activeStrategy","concat","CircleScissors","RectangleScissors","SphereScissors","StackScroll","Magnify","SegmentationDisplay","disabled","ReferenceLines","extensionManager","toolGroupService","commandsManager","tools","getModuleEntry","createToolGroupAndAddTools","initDefaultToolGroup","push","Crosshairs","viewportIndicators","autoPan","enabled","panSize","initMPRToolGroup","ohif","cornerstone","segmentation","extensionDependencies","modeFactory","_ref","modeConfiguration","routeName","displayName","onModeEnter","_ref2","servicesManager","measurementService","toolbarService","services","unsubscribe","clearMeasurements","initToolGroups","subscribe","EVENTS","VIEWPORT_ADDED","activateTool","recordInteraction","interactionType","init","addButtons","toolbarButtons","createButtonSection","onModeExit","_ref3","syncGroupService","segmentationService","cornerstoneViewportService","destroy","validationTags","study","series","isValidMode","_ref4","modalities","routes","path","layoutTemplate","_ref5","location","leftPanels","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","sopClassHandlers","hotkeys","hotkeyBindings"],"sourceRoot":""}
{"version":3,"file":"342.bundle.352b0a5b0103bd979889.js","mappings":"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","sources":["webpack:///../../../extensions/default/src/DicomWebDataSource/qido.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/getWADORSImageId.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoader.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderSync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadataLoaderAsync.js","webpack:///../../../extensions/default/src/DicomWebDataSource/wado/retrieveMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/retrieveStudyMetadata.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/StaticWadoClient.ts","webpack:///../../../extensions/default/src/utils/getDirectURL.js","webpack:///../../../extensions/default/src/DicomWebDataSource/utils/fixBulkDataURI.ts","webpack:///../../../extensions/default/src/DicomWebDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebDataSource/dcm4cheeReject.js","webpack:///../../../extensions/default/src/DicomJSONDataSource/index.js","webpack:///../../../extensions/default/src/DicomLocalDataSource/index.js","webpack:///../../../extensions/default/src/DicomWebProxyDataSource/index.js","webpack:///../../../extensions/default/src/getDataSourcesModule.js","webpack:///../../../extensions/default/src/Toolbar/Toolbar.tsx","webpack:///../../../extensions/default/src/ViewerLayout/ViewerHeader.tsx","webpack:///../../../extensions/default/src/Components/SidePanelWithServices.tsx","webpack:///../../../extensions/default/src/ViewerLayout/index.tsx","webpack:///../../../extensions/default/src/Panels/PanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/getImageSrcFromImageId.js","webpack:///../../../extensions/default/src/Panels/getStudiesForPatientByMRN.js","webpack:///../../../extensions/default/src/Panels/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/default/src/Panels/WrappedPanelStudyBrowser.tsx","webpack:///../../../extensions/default/src/Panels/ActionButtons.tsx","webpack:///../../../extensions/default/src/Panels/createReportDialogPrompt.tsx","webpack:///../../../extensions/default/src/Actions/createReportAsync.tsx","webpack:///../../../extensions/default/src/utils/getNextSRSeriesNumber.js","webpack:///../../../extensions/default/src/utils/findSRWithSameSeriesDescription.ts","webpack:///../../../extensions/default/src/Panels/PanelMeasurementTable.tsx","webpack:///../../../extensions/default/src/getPanelModule.tsx","webpack:///../../../extensions/default/src/id.js","webpack:///../../../extensions/default/src/utils/validations/areAllImagePositionsEqual.ts","webpack:///../../../extensions/default/src/utils/calculateScanAxisNormal.ts","webpack:///../../../extensions/default/src/utils/validations/checkSingleFrames.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageDimensionsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageComponentsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageOrientationsEqual.ts","webpack:///../../../extensions/default/src/utils/validations/areAllImageSpacingEqual.ts","webpack:///../../../extensions/default/src/getDisplaySetMessages.ts","webpack:///../../../extensions/default/src/utils/validations/checkMultiframe.ts","webpack:///../../../extensions/default/src/getDisplaySetsFromUnsupportedSeries.js","webpack:///../../../extensions/default/src/getSopClassHandlerModule.js","webpack:///../../../extensions/default/src/Toolbar/ToolbarDivider.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarLayoutSelector.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarSplitButtonWithServices.tsx","webpack:///../../../extensions/default/src/Toolbar/ToolbarButtonWithServices.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuItemsBuilder.ts","webpack:///../../../extensions/default/src/CustomizableContextMenu/ContextMenuController.tsx","webpack:///../../../extensions/default/src/CustomizableContextMenu/defaultContextMenu.ts","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagTable.tsx","webpack:///../../../extensions/default/src/DicomTagBrowser/DicomTagBrowser.tsx","webpack:///../../../extensions/default/src/utils/reuseCachedLayouts.ts","webpack:///../../../extensions/default/src/findViewportsByPosition.ts","webpack:///../../../extensions/default/src/commandsModule.ts","webpack:///../../../extensions/default/src/hpMNGrid.ts","webpack:///../../../extensions/default/src/hpCompare.ts","webpack:///../../../extensions/default/src/getHangingProtocolModule.js","webpack:///../../../extensions/default/src/Panels/DataSourceSelector.tsx","webpack:///../../../extensions/default/src/Components/ItemListComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationModalComponent.tsx","webpack:///../../../extensions/default/src/Components/DataSourceConfigurationComponent.tsx","webpack:///../../../extensions/default/src/DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI.ts","webpack:///../../../extensions/default/src/getPTImageIdInstanceMetadata.ts","webpack:///../../../extensions/default/src/init.ts","webpack:///../../../extensions/default/src/index.ts","webpack:///../../../extensions/default/src/getLayoutTemplateModule.js","webpack:///../../../extensions/default/src/getToolbarModule.tsx","webpack:///../../../extensions/default/src/getCustomizationModule.tsx"],"sourcesContent":["/**\r\n * QIDO - Query based on ID for DICOM Objects\r\n * search for studies, series and instances by patient ID, and receive their\r\n * unique identifiers for further usage.\r\n *\r\n * Quick: https://www.dicomstandard.org/dicomweb/query-qido-rs/\r\n * Standard: http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6\r\n *\r\n * Routes:\r\n * ==========\r\n * /studies?\r\n * /studies/{studyInstanceUid}/series?\r\n * /studies/{studyInstanceUid}/series/{seriesInstanceUid}/instances?\r\n *\r\n * Query Parameters:\r\n * ================\r\n * | KEY              | VALUE              |\r\n * |------------------|--------------------|\r\n * | {attributeId}    | {value}            |\r\n * | includeField     | {attribute} or all |\r\n * | fuzzymatching    | true OR false      |\r\n * | limit            | {number}           |\r\n * | offset           | {number}           |\r\n */\r\nimport { DICOMWeb, utils } from '@ohif/core';\r\nimport { sortStudySeries } from '@ohif/core/src/utils/sortStudy';\r\n\r\nconst { getString, getName, getModalities } = DICOMWeb;\r\n\r\n/**\r\n * Parses resulting data from a QIDO call into a set of Study MetaData\r\n *\r\n * @param {Array} qidoStudies - An array of study objects. Each object contains a keys for DICOM tags.\r\n * @param {object} qidoStudies[0].qidoStudy - An object where each key is the DICOM Tag group+element\r\n * @param {object} qidoStudies[0].qidoStudy[dicomTag] - Optional object that represents DICOM Tag\r\n * @param {string} qidoStudies[0].qidoStudy[dicomTag].vr - Value Representation\r\n * @param {string[]} qidoStudies[0].qidoStudy[dicomTag].Value - Optional string array representation of the DICOM Tag's value\r\n * @returns {Array} An array of Study MetaData objects\r\n */\r\nfunction processResults(qidoStudies) {\r\n  if (!qidoStudies || !qidoStudies.length) {\r\n    return [];\r\n  }\r\n\r\n  const studies = [];\r\n\r\n  qidoStudies.forEach(qidoStudy =>\r\n    studies.push({\r\n      studyInstanceUid: getString(qidoStudy['0020000D']),\r\n      date: getString(qidoStudy['00080020']), // YYYYMMDD\r\n      time: getString(qidoStudy['00080030']), // HHmmss.SSS (24-hour, minutes, seconds, fractional seconds)\r\n      accession: getString(qidoStudy['00080050']) || '', // short string, probably a number?\r\n      mrn: getString(qidoStudy['00100020']) || '', // medicalRecordNumber\r\n      patientName: utils.formatPN(getName(qidoStudy['00100010'])) || '',\r\n      instances: Number(getString(qidoStudy['00201208'])) || 0, // number\r\n      description: getString(qidoStudy['00081030']) || '',\r\n      modalities: getString(getModalities(qidoStudy['00080060'], qidoStudy['00080061'])) || '',\r\n    })\r\n  );\r\n\r\n  return studies;\r\n}\r\n\r\n/**\r\n * Parses resulting data from a QIDO call into a set of Study MetaData\r\n *\r\n * @param {Array} qidoSeries - An array of study objects. Each object contains a keys for DICOM tags.\r\n * @param {object} qidoSeries[0].qidoSeries - An object where each key is the DICOM Tag group+element\r\n * @param {object} qidoSeries[0].qidoSeries[dicomTag] - Optional object that represents DICOM Tag\r\n * @param {string} qidoSeries[0].qidoSeries[dicomTag].vr - Value Representation\r\n * @param {string[]} qidoSeries[0].qidoSeries[dicomTag].Value - Optional string array representation of the DICOM Tag's value\r\n * @returns {Array} An array of Study MetaData objects\r\n */\r\nexport function processSeriesResults(qidoSeries) {\r\n  const series = [];\r\n\r\n  if (qidoSeries && qidoSeries.length) {\r\n    qidoSeries.forEach(qidoSeries =>\r\n      series.push({\r\n        studyInstanceUid: getString(qidoSeries['0020000D']),\r\n        seriesInstanceUid: getString(qidoSeries['0020000E']),\r\n        modality: getString(qidoSeries['00080060']),\r\n        seriesNumber: getString(qidoSeries['00200011']),\r\n        seriesDate: utils.formatDate(getString(qidoSeries['00080021'])),\r\n        numSeriesInstances: Number(getString(qidoSeries['00201209'])),\r\n        description: getString(qidoSeries['0008103E']),\r\n      })\r\n    );\r\n  }\r\n\r\n  sortStudySeries(series);\r\n\r\n  return series;\r\n}\r\n\r\n/**\r\n *\r\n * @param {object} dicomWebClient - Client similar to what's provided by `dicomweb-client` library\r\n * @param {function} dicomWebClient.searchForStudies -\r\n * @param {string} [studyInstanceUid]\r\n * @param {string} [seriesInstanceUid]\r\n * @param {string} [queryParamaters]\r\n * @returns {Promise<results>} - Promise that resolves results\r\n */\r\nasync function search(dicomWebClient, studyInstanceUid, seriesInstanceUid, queryParameters) {\r\n  let searchResult = await dicomWebClient.searchForStudies({\r\n    studyInstanceUid: undefined,\r\n    queryParams: queryParameters,\r\n  });\r\n\r\n  return searchResult;\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} studyInstanceUID - ID of study to return a list of series for\r\n * @returns {Promise} - Resolves SeriesMetadata[] in study\r\n */\r\nexport function seriesInStudy(dicomWebClient, studyInstanceUID) {\r\n  // Series Description\r\n  // Already included?\r\n  const commaSeparatedFields = ['0008103E', '00080021'].join(',');\r\n  const queryParams = {\r\n    includefield: commaSeparatedFields,\r\n  };\r\n\r\n  return dicomWebClient.searchForSeries({ studyInstanceUID, queryParams });\r\n}\r\n\r\nexport default function searchStudies(server, filter) {\r\n  const queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\r\n  const options = {\r\n    queryParams,\r\n  };\r\n\r\n  return dicomWeb.searchForStudies(options).then(resultDataToStudies);\r\n}\r\n\r\n/**\r\n * Produces a QIDO URL given server details and a set of specified search filter\r\n * items\r\n *\r\n * @param filter\r\n * @param serverSupportsQIDOIncludeField\r\n * @returns {string} The URL with encoded filter query data\r\n */\r\nfunction mapParams(params, options = {}) {\r\n  if (!params) {\r\n    return;\r\n  }\r\n  const commaSeparatedFields = [\r\n    '00081030', // Study Description\r\n    '00080060', // Modality\r\n    // Add more fields here if you want them in the result\r\n  ].join(',');\r\n\r\n  const { supportsWildcard } = options;\r\n  const withWildcard = value => {\r\n    return supportsWildcard && value ? `*${value}*` : value;\r\n  };\r\n\r\n  const parameters = {\r\n    // Named\r\n    PatientName: withWildcard(params.patientName),\r\n    //PatientID: withWildcard(params.patientId),\r\n    '00100020': withWildcard(params.patientId), // Temporarily to make the tests pass with dicomweb-server.. Apparently it's broken?\r\n    AccessionNumber: withWildcard(params.accessionNumber),\r\n    StudyDescription: withWildcard(params.studyDescription),\r\n    ModalitiesInStudy: params.modalitiesInStudy,\r\n    // Other\r\n    limit: params.limit || 101,\r\n    offset: params.offset || 0,\r\n    fuzzymatching: options.supportsFuzzyMatching === true,\r\n    includefield: commaSeparatedFields, // serverSupportsQIDOIncludeField ? commaSeparatedFields : 'all',\r\n  };\r\n\r\n  // build the StudyDate range parameter\r\n  if (params.startDate && params.endDate) {\r\n    parameters.StudyDate = `${params.startDate}-${params.endDate}`;\r\n  } else if (params.startDate) {\r\n    const today = new Date();\r\n    const DD = String(today.getDate()).padStart(2, '0');\r\n    const MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const YYYY = today.getFullYear();\r\n    const todayStr = `${YYYY}${MM}${DD}`;\r\n\r\n    parameters.StudyDate = `${params.startDate}-${todayStr}`;\r\n  } else if (params.endDate) {\r\n    const oldDateStr = `19700102`;\r\n\r\n    parameters.StudyDate = `${oldDateStr}-${params.endDate}`;\r\n  }\r\n\r\n  // Build the StudyInstanceUID parameter\r\n  if (params.studyInstanceUid) {\r\n    let studyUids = params.studyInstanceUid;\r\n    studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\r\n    studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\r\n    parameters.StudyInstanceUID = studyUids;\r\n  }\r\n\r\n  // Clean query params of undefined values.\r\n  const final = {};\r\n  Object.keys(parameters).forEach(key => {\r\n    if (parameters[key] !== undefined && parameters[key] !== '') {\r\n      final[key] = parameters[key];\r\n    }\r\n  });\r\n\r\n  return final;\r\n}\r\n\r\nexport { mapParams, search, processResults };\r\n","import getWADORSImageId from './getWADORSImageId';\r\n\r\nfunction buildInstanceWadoUrl(config, instance) {\r\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\r\n  const params = [];\r\n\r\n  params.push('requestType=WADO');\r\n  params.push(`studyUID=${StudyInstanceUID}`);\r\n  params.push(`seriesUID=${SeriesInstanceUID}`);\r\n  params.push(`objectUID=${SOPInstanceUID}`);\r\n  params.push('contentType=application/dicom');\r\n  params.push('transferSyntax=*');\r\n\r\n  const paramString = params.join('&');\r\n\r\n  return `${config.wadoUriRoot}?${paramString}`;\r\n}\r\n\r\n/**\r\n * Obtain an imageId for Cornerstone from an image instance\r\n *\r\n * @param instance\r\n * @param frame\r\n * @param thumbnail\r\n * @returns {string} The imageId to be used by Cornerstone\r\n */\r\nexport default function getImageId({ instance, frame, config, thumbnail = false }) {\r\n  if (!instance) {\r\n    return;\r\n  }\r\n\r\n  if (instance.url) {\r\n    return instance.url;\r\n  }\r\n\r\n  const renderingAttr = thumbnail ? 'thumbnailRendering' : 'imageRendering';\r\n\r\n  if (!config[renderingAttr] || config[renderingAttr] === 'wadouri') {\r\n    const wadouri = buildInstanceWadoUrl(config, instance);\r\n\r\n    let imageId = 'dicomweb:' + wadouri;\r\n    if (frame !== undefined) {\r\n      imageId += '&frame=' + frame;\r\n    }\r\n\r\n    return imageId;\r\n  } else {\r\n    return getWADORSImageId(instance, config, frame); // WADO-RS Retrieve Frame\r\n  }\r\n}\r\n","function buildInstanceWadoRsUri(instance, config) {\r\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\r\n  return `${config.wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}`;\r\n}\r\n\r\nfunction buildInstanceFrameWadoRsUri(instance, config, frame) {\r\n  const baseWadoRsUri = buildInstanceWadoRsUri(instance, config);\r\n\r\n  frame = frame || 1;\r\n\r\n  return `${baseWadoRsUri}/frames/${frame}`;\r\n}\r\n\r\n// function getWADORSImageUrl(instance, frame) {\r\n//   const wadorsuri = buildInstanceFrameWadoRsUri(instance, config, frame);\r\n\r\n//   if (!wadorsuri) {\r\n//     return;\r\n//   }\r\n\r\n//   // Use null to obtain an imageId which represents the instance\r\n//   if (frame === null) {\r\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, '');\r\n//   } else {\r\n//     // We need to sum 1 because WADO-RS frame number is 1-based\r\n//     frame = frame ? parseInt(frame) + 1 : 1;\r\n\r\n//     // Replaces /frame/1 by /frame/{frame}\r\n//     wadorsuri = wadorsuri.replace(/frames\\/(\\d+)/, `frames/${frame}`);\r\n//   }\r\n\r\n//   return wadorsuri;\r\n// }\r\n\r\n/**\r\n * Obtain an imageId for Cornerstone based on the WADO-RS scheme\r\n *\r\n * @param {object} instanceMetada metadata object (InstanceMetadata)\r\n * @param {(string\\|number)} [frame] the frame number\r\n * @returns {string} The imageId to be used by Cornerstone\r\n */\r\nexport default function getWADORSImageId(instance, config, frame) {\r\n  //const uri = getWADORSImageUrl(instance, frame);\r\n  const uri = buildInstanceFrameWadoRsUri(instance, config, frame);\r\n\r\n  if (!uri) {\r\n    return;\r\n  }\r\n\r\n  return `wadors:${uri}`;\r\n}\r\n","/**\r\n * Class to define inheritance of load retrieve strategy.\r\n * The process can be async load (lazy) or sync load\r\n *\r\n * There are methods that must be implemented at consumer level\r\n * To retrieve study call execLoad\r\n */\r\nexport default class RetrieveMetadataLoader {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} client The dicomweb-client.\r\n   * @param {Array} studyInstanceUID Study instance ui to be retrieved\r\n   * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   * @param {Function} [sortSeries] - Custom sort function for series\r\n   */\r\n  constructor(client, studyInstanceUID, filters = {}, sortCriteria, sortFunction) {\r\n    this.client = client;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.filters = filters;\r\n    this.sortCriteria = sortCriteria;\r\n    this.sortFunction = sortFunction;\r\n  }\r\n\r\n  async execLoad() {\r\n    const preLoadData = await this.preLoad();\r\n    const loadData = await this.load(preLoadData);\r\n    const postLoadData = await this.posLoad(loadData);\r\n\r\n    return postLoadData;\r\n  }\r\n\r\n  /**\r\n   * It iterates over given loaders running each one. Loaders parameters must be bind when getting it.\r\n   * @param {Array} loaders - array of loader to retrieve data.\r\n   */\r\n  async runLoaders(loaders) {\r\n    let result;\r\n    for (const loader of loaders) {\r\n      try {\r\n        result = await loader();\r\n        if (result && result.length) {\r\n          break; // closes iterator in case data is retrieved successfully\r\n        }\r\n      } catch (e) {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    if (loaders.next().done && !result) {\r\n      throw new Error('RetrieveMetadataLoader failed');\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Methods to be overwrite\r\n  async configLoad() {}\r\n  async preLoad() {}\r\n  async load(preLoadData) {}\r\n  async posLoad(loadData) {}\r\n}\r\n","// import { api } from 'dicomweb-client';\r\n// import DICOMWeb from '../../../DICOMWeb/';\r\nimport { createStudyFromSOPInstanceList } from './studyInstanceHelpers';\r\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\r\n\r\n/**\r\n * Class for sync load of study metadata.\r\n * It inherits from RetrieveMetadataLoader\r\n *\r\n * A list of loaders (getLoaders) can be created so, it will be applied a fallback load strategy.\r\n * I.e Retrieve metadata using all loaders possibilities.\r\n */\r\nexport default class RetrieveMetadataLoaderSync extends RetrieveMetadataLoader {\r\n  getOptions() {\r\n    const { studyInstanceUID, filters } = this;\r\n\r\n    const options = {\r\n      studyInstanceUID,\r\n    };\r\n\r\n    const { seriesInstanceUID } = filters;\r\n    if (seriesInstanceUID) {\r\n      options['seriesInstanceUID'] = seriesInstanceUID;\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * @returns {Array} Array of loaders. To be consumed as queue\r\n   */\r\n  *getLoaders() {\r\n    const loaders = [];\r\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\r\n\r\n    if (seriesInstanceUID) {\r\n      loaders.push(\r\n        client.retrieveSeriesMetadata.bind(client, {\r\n          studyInstanceUID,\r\n          seriesInstanceUID,\r\n        })\r\n      );\r\n    }\r\n\r\n    loaders.push(client.retrieveStudyMetadata.bind(client, { studyInstanceUID }));\r\n\r\n    yield* loaders;\r\n  }\r\n\r\n  async load(preLoadData) {\r\n    const loaders = this.getLoaders();\r\n    const result = this.runLoaders(loaders);\r\n    return result;\r\n  }\r\n\r\n  async posLoad(loadData) {\r\n    return loadData;\r\n  }\r\n}\r\n","import dcmjs from 'dcmjs';\r\nimport { sortStudySeries, sortingCriteria } from '@ohif/core/src/utils/sortStudy';\r\nimport RetrieveMetadataLoader from './retrieveMetadataLoader';\r\n\r\n/**\r\n * Creates an immutable series loader object which loads each series sequentially using the iterator interface\r\n * @param {DICOMWebClient} dicomWebClient The DICOMWebClient instance to be used for series load\r\n * @param {string} studyInstanceUID The Study Instance UID from which series will be loaded\r\n * @param {Array} seriesInstanceUIDList A list of Series Instance UIDs\r\n * @returns {Object} Returns an object which supports loading of instances from each of given Series Instance UID\r\n */\r\nfunction makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDList) {\r\n  return Object.freeze({\r\n    hasNext() {\r\n      return seriesInstanceUIDList.length > 0;\r\n    },\r\n    async next() {\r\n      const seriesInstanceUID = seriesInstanceUIDList.shift();\r\n      return client.retrieveSeriesMetadata({\r\n        studyInstanceUID,\r\n        seriesInstanceUID,\r\n      });\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Class for async load of study metadata.\r\n * It inherits from RetrieveMetadataLoader\r\n *\r\n * It loads the one series and then append to seriesLoader the others to be consumed/loaded\r\n */\r\nexport default class RetrieveMetadataLoaderAsync extends RetrieveMetadataLoader {\r\n  /**\r\n   * @returns {Array} Array of preLoaders. To be consumed as queue\r\n   */\r\n  *getPreLoaders() {\r\n    const preLoaders = [];\r\n    const { studyInstanceUID, filters: { seriesInstanceUID } = {}, client } = this;\r\n\r\n    if (seriesInstanceUID) {\r\n      const options = {\r\n        studyInstanceUID,\r\n        queryParams: { SeriesInstanceUID: seriesInstanceUID },\r\n      };\r\n      preLoaders.push(client.searchForSeries.bind(client, options));\r\n    }\r\n    // Fallback preloader\r\n    preLoaders.push(client.searchForSeries.bind(client, { studyInstanceUID }));\r\n\r\n    yield* preLoaders;\r\n  }\r\n\r\n  async preLoad() {\r\n    const preLoaders = this.getPreLoaders();\r\n    const result = await this.runLoaders(preLoaders);\r\n    const sortCriteria = this.sortCriteria;\r\n    const sortFunction = this.sortFunction;\r\n\r\n    const { naturalizeDataset } = dcmjs.data.DicomMetaDictionary;\r\n    const naturalized = result.map(naturalizeDataset);\r\n\r\n    return sortStudySeries(\r\n      naturalized,\r\n      sortCriteria || sortingCriteria.seriesSortCriteria.seriesInfoSortingCriteria,\r\n      sortFunction\r\n    );\r\n  }\r\n\r\n  async load(preLoadData) {\r\n    const { client, studyInstanceUID } = this;\r\n\r\n    const seriesInstanceUIDs = preLoadData.map(s => s.SeriesInstanceUID);\r\n\r\n    const seriesAsyncLoader = makeSeriesAsyncLoader(client, studyInstanceUID, seriesInstanceUIDs);\r\n\r\n    const promises = [];\r\n\r\n    while (seriesAsyncLoader.hasNext()) {\r\n      promises.push(seriesAsyncLoader.next());\r\n    }\r\n\r\n    return {\r\n      preLoadData,\r\n      promises,\r\n    };\r\n  }\r\n\r\n  async posLoad({ preLoadData, promises }) {\r\n    return {\r\n      preLoadData,\r\n      promises,\r\n    };\r\n  }\r\n}\r\n","import RetrieveMetadataLoaderSync from './retrieveMetadataLoaderSync';\r\nimport RetrieveMetadataLoaderAsync from './retrieveMetadataLoaderAsync';\r\n\r\n/**\r\n * Retrieve Study metadata from a DICOM server. If the server is configured to use lazy load, only the first series\r\n * will be loaded and the property \"studyLoader\" will be set to let consumer load remaining series as needed.\r\n *\r\n * @param {Object} dicomWebClient The dicomweb-client.\r\n * @param {string} studyInstanceUid The Study Instance UID of the study which needs to be loaded\r\n * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @returns {Object} A study descriptor object\r\n */\r\nasync function RetrieveMetadata(\r\n  dicomWebClient,\r\n  studyInstanceUid,\r\n  enableStudyLazyLoad,\r\n  filters = {},\r\n  sortCriteria,\r\n  sortFunction\r\n) {\r\n  const RetrieveMetadataLoader =\r\n    enableStudyLazyLoad !== false ? RetrieveMetadataLoaderAsync : RetrieveMetadataLoaderSync;\r\n\r\n  const retrieveMetadataLoader = new RetrieveMetadataLoader(\r\n    dicomWebClient,\r\n    studyInstanceUid,\r\n    filters,\r\n    sortCriteria,\r\n    sortFunction\r\n  );\r\n  const data = await retrieveMetadataLoader.execLoad();\r\n\r\n  return data;\r\n}\r\n\r\nexport default RetrieveMetadata;\r\n","import RetrieveMetadata from './wado/retrieveMetadata.js';\r\n\r\nconst moduleName = 'RetrieveStudyMetadata';\r\n// Cache for promises. Prevents unnecessary subsequent calls to the server\r\nconst StudyMetaDataPromises = new Map();\r\n\r\n/**\r\n * Retrieves study metadata\r\n *\r\n * @param {Object} server Object with server configuration parameters\r\n * @param {string} StudyInstanceUID The UID of the Study to be retrieved\r\n * @param {boolean} enabledStudyLazyLoad Whether the study metadata should be loaded asynchronously.\r\n * @param {function} storeInstancesCallback A callback used to store the retrieved instance metadata.\r\n * @param {Object} [filters] - Object containing filters to be applied on retrieve metadata process\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @returns {Promise} that will be resolved with the metadata or rejected with the error\r\n */\r\nexport function retrieveStudyMetadata(\r\n  dicomWebClient,\r\n  StudyInstanceUID,\r\n  enableStudyLazyLoad,\r\n  filters,\r\n  sortCriteria,\r\n  sortFunction\r\n) {\r\n  // @TODO: Whenever a study metadata request has failed, its related promise will be rejected once and for all\r\n  // and further requests for that metadata will always fail. On failure, we probably need to remove the\r\n  // corresponding promise from the \"StudyMetaDataPromises\" map...\r\n\r\n  if (!dicomWebClient) {\r\n    throw new Error(`${moduleName}: Required 'dicomWebClient' parameter not provided.`);\r\n  }\r\n  if (!StudyInstanceUID) {\r\n    throw new Error(`${moduleName}: Required 'StudyInstanceUID' parameter not provided.`);\r\n  }\r\n\r\n  // Already waiting on result? Return cached promise\r\n  if (StudyMetaDataPromises.has(StudyInstanceUID)) {\r\n    return StudyMetaDataPromises.get(StudyInstanceUID);\r\n  }\r\n\r\n  // Create a promise to handle the data retrieval\r\n  const promise = new Promise((resolve, reject) => {\r\n    RetrieveMetadata(\r\n      dicomWebClient,\r\n      StudyInstanceUID,\r\n      enableStudyLazyLoad,\r\n      filters,\r\n      sortCriteria,\r\n      sortFunction\r\n    ).then(function (data) {\r\n      resolve(data);\r\n    }, reject);\r\n  });\r\n\r\n  // Store the promise in cache\r\n  StudyMetaDataPromises.set(StudyInstanceUID, promise);\r\n\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Delete the cached study metadata retrieval promise to ensure that the browser will\r\n * re-retrieve the study metadata when it is next requested\r\n *\r\n * @param {String} StudyInstanceUID The UID of the Study to be removed from cache\r\n *\r\n */\r\nexport function deleteStudyMetadataPromise(StudyInstanceUID) {\r\n  if (StudyMetaDataPromises.has(StudyInstanceUID)) {\r\n    StudyMetaDataPromises.delete(StudyInstanceUID);\r\n  }\r\n}\r\n","import { api } from 'dicomweb-client';\r\n\r\n/**\r\n * An implementation of the static wado client, that fetches data from\r\n * a static response rather than actually doing real queries.  This allows\r\n * fast encoding of test data, but because it is static, anything actually\r\n * performing searches doesn't work.  This version fixes the query issue\r\n * by manually implementing a query option.\r\n */\r\nexport default class StaticWadoClient extends api.DICOMwebClient {\r\n  static studyFilterKeys = {\r\n    studyinstanceuid: '0020000D',\r\n    patientname: '00100010',\r\n    '00100020': 'mrn',\r\n    studydescription: '00081030',\r\n    studydate: '00080020',\r\n    modalitiesinstudy: '00080061',\r\n    accessionnumber: '00080050',\r\n  };\r\n\r\n  static seriesFilterKeys = {\r\n    seriesinstanceuid: '0020000E',\r\n    seriesnumber: '00200011',\r\n    modality: '00080060',\r\n  };\r\n\r\n  constructor(qidoConfig) {\r\n    super(qidoConfig);\r\n    this.staticWado = qidoConfig.staticWado;\r\n  }\r\n\r\n  /**\r\n   * Replace the search for studies remote query with a local version which\r\n   * retrieves a complete query list and then sub-selects from it locally.\r\n   * @param {*} options\r\n   * @returns\r\n   */\r\n  async searchForStudies(options) {\r\n    if (!this.staticWado) {\r\n      return super.searchForStudies(options);\r\n    }\r\n\r\n    const searchResult = await super.searchForStudies(options);\r\n    const { queryParams } = options;\r\n\r\n    if (!queryParams) {\r\n      return searchResult;\r\n    }\r\n\r\n    const lowerParams = this.toLowerParams(queryParams);\r\n    const filtered = searchResult.filter(study => {\r\n      for (const key of Object.keys(StaticWadoClient.studyFilterKeys)) {\r\n        if (!this.filterItem(key, lowerParams, study, StaticWadoClient.studyFilterKeys)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    return filtered;\r\n  }\r\n\r\n  async searchForSeries(options) {\r\n    if (!this.staticWado) {\r\n      return super.searchForSeries(options);\r\n    }\r\n\r\n    const searchResult = await super.searchForSeries(options);\r\n    const { queryParams } = options;\r\n    if (!queryParams) {\r\n      return searchResult;\r\n    }\r\n    const lowerParams = this.toLowerParams(queryParams);\r\n\r\n    const filtered = searchResult.filter(series => {\r\n      for (const key of Object.keys(StaticWadoClient.seriesFilterKeys)) {\r\n        if (!this.filterItem(key, lowerParams, series, StaticWadoClient.seriesFilterKeys)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    return filtered;\r\n  }\r\n\r\n  /**\r\n   * Compares values, matching any instance of desired to any instance of\r\n   * actual by recursively go through the paired set of values.  That is,\r\n   * this is O(m*n) where m is how many items in desired and n is the length of actual\r\n   * Then, at the individual item node, compares the Alphabetic name if present,\r\n   * and does a sub-string matching on string values, and otherwise does an\r\n   * exact match comparison.\r\n   *\r\n   * @param {*} desired\r\n   * @param {*} actual\r\n   * @returns true if the values match\r\n   */\r\n  compareValues(desired, actual) {\r\n    if (Array.isArray(desired)) {\r\n      return desired.find(item => this.compareValues(item, actual));\r\n    }\r\n    if (Array.isArray(actual)) {\r\n      return actual.find(actualItem => this.compareValues(desired, actualItem));\r\n    }\r\n    if (actual?.Alphabetic) {\r\n      actual = actual.Alphabetic;\r\n    }\r\n    if (typeof actual == 'string') {\r\n      if (actual.length === 0) {\r\n        return true;\r\n      }\r\n      if (desired.length === 0 || desired === '*') {\r\n        return true;\r\n      }\r\n      if (desired[0] === '*' && desired[desired.length - 1] === '*') {\r\n        // console.log(`Comparing ${actual} to ${desired.substring(1, desired.length - 1)}`)\r\n        return actual.indexOf(desired.substring(1, desired.length - 1)) != -1;\r\n      } else if (desired[desired.length - 1] === '*') {\r\n        return actual.indexOf(desired.substring(0, desired.length - 1)) != -1;\r\n      } else if (desired[0] === '*') {\r\n        return actual.indexOf(desired.substring(1)) === actual.length - desired.length + 1;\r\n      }\r\n    }\r\n    return desired === actual;\r\n  }\r\n\r\n  /** Compares a pair of dates to see if the value is within the range */\r\n  compareDateRange(range, value) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    const dash = range.indexOf('-');\r\n    if (dash === -1) {\r\n      return this.compareValues(range, value);\r\n    }\r\n    const start = range.substring(0, dash);\r\n    const end = range.substring(dash + 1);\r\n    return (!start || value >= start) && (!end || value <= end);\r\n  }\r\n\r\n  /**\r\n   * Filters the return list by the query parameters.\r\n   *\r\n   * @param anyCaseKey - a possible search key\r\n   * @param queryParams -\r\n   * @param {*} study\r\n   * @param {*} sourceFilterMap\r\n   * @returns\r\n   */\r\n  filterItem(key: string, queryParams, study, sourceFilterMap) {\r\n    const altKey = sourceFilterMap[key] || key;\r\n    if (!queryParams) {\r\n      return true;\r\n    }\r\n    const testValue = queryParams[key] || queryParams[altKey];\r\n    if (!testValue) {\r\n      return true;\r\n    }\r\n    const valueElem = study[key] || study[altKey];\r\n    if (!valueElem) {\r\n      return false;\r\n    }\r\n    if (valueElem.vr === 'DA' && valueElem.Value?.[0]) {\r\n      return this.compareDateRange(testValue, valueElem.Value[0]);\r\n    }\r\n    const value = valueElem.Value;\r\n    return this.compareValues(testValue, value);\r\n  }\r\n\r\n  /** Converts the query parameters to lower case query parameters */\r\n  toLowerParams(queryParams: Record<string, unknown>): Record<string, unknown> {\r\n    const lowerParams = {};\r\n    Object.entries(queryParams).forEach(([key, value]) => {\r\n      lowerParams[key.toLowerCase()] = value;\r\n    });\r\n    return lowerParams;\r\n  }\r\n}\r\n","import { utils } from '@ohif/core';\r\n\r\n/**\r\n * Generates a URL that can be used for direct retrieve of the bulkdata\r\n *\r\n * @param {object} params\r\n * @param {string} params.tag is the tag name of the URL to retrieve\r\n * @param {string} params.defaultPath path for the pixel data url\r\n * @param {object} params.instance is the instance object that the tag is in\r\n * @param {string} params.defaultType is the mime type of the response\r\n * @param {string} params.singlepart is the type of the part to retrieve\r\n * @param {string} params.fetchPart unknown?\r\n * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\r\n *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\r\n */\r\nconst getDirectURL = (config, params) => {\r\n  const { wadoRoot, singlepart } = config;\r\n  const {\r\n    instance,\r\n    tag = 'PixelData',\r\n    defaultPath = '/pixeldata',\r\n    defaultType = 'video/mp4',\r\n    singlepart: fetchPart = 'video',\r\n  } = params;\r\n  const value = instance[tag];\r\n  if (!value) {\r\n    return undefined;\r\n  }\r\n\r\n  if (value.DirectRetrieveURL) {\r\n    return value.DirectRetrieveURL;\r\n  }\r\n  if (value.InlineBinary) {\r\n    const blob = utils.b64toBlob(value.InlineBinary, defaultType);\r\n    value.DirectRetrieveURL = URL.createObjectURL(blob);\r\n    return value.DirectRetrieveURL;\r\n  }\r\n  if (!singlepart || (singlepart !== true && singlepart.indexOf(fetchPart) === -1)) {\r\n    if (value.retrieveBulkData) {\r\n      return value.retrieveBulkData().then(arr => {\r\n        value.DirectRetrieveURL = URL.createObjectURL(new Blob([arr], { type: defaultType }));\r\n        return value.DirectRetrieveURL;\r\n      });\r\n    }\r\n    console.warn('Unable to retrieve', tag, 'from', instance);\r\n    return undefined;\r\n  }\r\n\r\n  const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\r\n  const BulkDataURI =\r\n    (value && value.BulkDataURI) ||\r\n    `series/${SeriesInstanceUID}/instances/${SOPInstanceUID}${defaultPath}`;\r\n  const hasQuery = BulkDataURI.indexOf('?') !== -1;\r\n  const hasAccept = BulkDataURI.indexOf('accept=') !== -1;\r\n  const acceptUri =\r\n    BulkDataURI + (hasAccept ? '' : (hasQuery ? '&' : '?') + `accept=${defaultType}`);\r\n\r\n  if (tag === 'PixelData' || tag === 'EncapsulatedDocument') {\r\n    return `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/instances/${SOPInstanceUID}/rendered`;\r\n  }\r\n\r\n  // The DICOMweb standard states that the default is multipart related, and then\r\n  // separately states that the accept parameter is the URL parameter equivalent of the accept header.\r\n  return acceptUri;\r\n};\r\n\r\nexport default getDirectURL;\r\n","/**\r\n * Modifies a bulkDataURI to ensure it is absolute based on the DICOMWeb configuration and\r\n * instance data. The modification is in-place.\r\n *\r\n * If the bulkDataURI is relative to the series or study (according to the DICOM standard),\r\n * it is made absolute by prepending the relevant paths.\r\n *\r\n * In scenarios where the bulkDataURI is a server-relative path (starting with '/'), the function\r\n * handles two cases:\r\n *\r\n * 1. If the wado root is absolute (starts with 'http'), it prepends the wado root to the bulkDataURI.\r\n * 2. If the wado root is relative, no changes are needed as the bulkDataURI is already correctly relative to the server root.\r\n *\r\n * @param value - The object containing BulkDataURI to be fixed.\r\n * @param instance - The object (DICOM instance data) containing StudyInstanceUID and SeriesInstanceUID.\r\n * @param dicomWebConfig - The DICOMWeb configuration object, containing wadoRoot and potentially bulkDataURI.relativeResolution.\r\n * @returns The function modifies `value` in-place, it does not return a value.\r\n */\r\nfunction fixBulkDataURI(value, instance, dicomWebConfig) {\r\n  // in case of the relative path, make it absolute. The current DICOM standard says\r\n  // the bulkdataURI is relative to the series. However, there are situations where\r\n  // it can be relative to the study too\r\n  if (!value.BulkDataURI.startsWith('http') && !value.BulkDataURI.startsWith('/')) {\r\n    if (dicomWebConfig.bulkDataURI?.relativeResolution === 'studies') {\r\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/${value.BulkDataURI}`;\r\n    } else if (\r\n      dicomWebConfig.bulkDataURI?.relativeResolution === 'series' ||\r\n      !dicomWebConfig.bulkDataURI?.relativeResolution\r\n    ) {\r\n      value.BulkDataURI = `${dicomWebConfig.wadoRoot}/studies/${instance.StudyInstanceUID}/series/${instance.SeriesInstanceUID}/${value.BulkDataURI}`;\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  // in case it is relative path but starts at the server (e.g., /bulk/1e, note the missing http\r\n  // in the beginning and the first character is /) There are two scenarios, whether the wado root\r\n  // is absolute or relative. In case of absolute, we need to prepend the wado root to the bulkdata\r\n  // uri (e.g., bulkData: /bulk/1e, wado root: http://myserver.com/dicomweb, output: http://myserver.com/bulk/1e)\r\n  // and in case of relative wado root, we need to prepend the bulkdata uri to the wado root (e.g,. bulkData: /bulk/1e\r\n  // wado root: /dicomweb, output: /bulk/1e)\r\n  if (value.BulkDataURI[0] === '/') {\r\n    if (dicomWebConfig.wadoRoot.startsWith('http')) {\r\n      // Absolute wado root\r\n      const url = new URL(dicomWebConfig.wadoRoot);\r\n      value.BulkDataURI = `${url.origin}${value.BulkDataURI}`;\r\n    } else {\r\n      // Relative wado root, we don't need to do anything, bulkdata uri is already correct\r\n    }\r\n  }\r\n}\r\n\r\nexport { fixBulkDataURI };\r\n","import { api } from 'dicomweb-client';\r\nimport { DicomMetadataStore, IWebApiDataSource, utils, errorHandler, classes } from '@ohif/core';\r\n\r\nimport {\r\n  mapParams,\r\n  search as qidoSearch,\r\n  seriesInStudy,\r\n  processResults,\r\n  processSeriesResults,\r\n} from './qido.js';\r\nimport dcm4cheeReject from './dcm4cheeReject';\r\n\r\nimport getImageId from './utils/getImageId';\r\nimport dcmjs from 'dcmjs';\r\nimport { retrieveStudyMetadata, deleteStudyMetadataPromise } from './retrieveStudyMetadata.js';\r\nimport StaticWadoClient from './utils/StaticWadoClient';\r\nimport getDirectURL from '../utils/getDirectURL';\r\nimport { fixBulkDataURI } from './utils/fixBulkDataURI';\r\n\r\nconst { DicomMetaDictionary, DicomDict } = dcmjs.data;\r\n\r\nconst { naturalizeDataset, denaturalizeDataset } = DicomMetaDictionary;\r\n\r\nconst ImplementationClassUID = '2.25.270695996825855179949881587723571202391.2.0.0';\r\nconst ImplementationVersionName = 'OHIF-VIEWER-2.0.0';\r\nconst EXPLICIT_VR_LITTLE_ENDIAN = '1.2.840.10008.1.2.1';\r\n\r\nconst metadataProvider = classes.MetadataProvider;\r\n\r\n/**\r\n *\r\n * @param {string} name - Data source name\r\n * @param {string} wadoUriRoot - Legacy? (potentially unused/replaced)\r\n * @param {string} qidoRoot - Base URL to use for QIDO requests\r\n * @param {string} wadoRoot - Base URL to use for WADO requests\r\n * @param {boolean} qidoSupportsIncludeField - Whether QIDO supports the \"Include\" option to request additional fields in response\r\n * @param {string} imageRengering - wadors | ? (unsure of where/how this is used)\r\n * @param {string} thumbnailRendering - wadors | ? (unsure of where/how this is used)\r\n * @param {bool} supportsReject - Whether the server supports reject calls (i.e. DCM4CHEE)\r\n * @param {bool} lazyLoadStudy - \"enableStudyLazyLoad\"; Request series meta async instead of blocking\r\n * @param {string|bool} singlepart - indicates of the retrieves can fetch singlepart.  Options are bulkdata, video, image or boolean true\r\n */\r\nfunction createDicomWebApi(dicomWebConfig, userAuthenticationService) {\r\n  let dicomWebConfigCopy,\r\n    qidoConfig,\r\n    wadoConfig,\r\n    qidoDicomWebClient,\r\n    wadoDicomWebClient,\r\n    getAuthrorizationHeader,\r\n    generateWadoHeader;\r\n\r\n  const implementation = {\r\n    initialize: ({ params, query }) => {\r\n      if (dicomWebConfig.onConfiguration && typeof dicomWebConfig.onConfiguration === 'function') {\r\n        dicomWebConfig = dicomWebConfig.onConfiguration(dicomWebConfig, {\r\n          params,\r\n          query,\r\n        });\r\n      }\r\n\r\n      dicomWebConfigCopy = JSON.parse(JSON.stringify(dicomWebConfig));\r\n\r\n      getAuthrorizationHeader = () => {\r\n        const xhrRequestHeaders = {};\r\n        const authHeaders = userAuthenticationService.getAuthorizationHeader();\r\n        if (authHeaders && authHeaders.Authorization) {\r\n          xhrRequestHeaders.Authorization = authHeaders.Authorization;\r\n        }\r\n        return xhrRequestHeaders;\r\n      };\r\n\r\n      generateWadoHeader = () => {\r\n        let authorizationHeader = getAuthrorizationHeader();\r\n        //Generate accept header depending on config params\r\n        let formattedAcceptHeader = utils.generateAcceptHeader(\r\n          dicomWebConfig.acceptHeader,\r\n          dicomWebConfig.requestTransferSyntaxUID,\r\n          dicomWebConfig.omitQuotationForMultipartRequest\r\n        );\r\n\r\n        return {\r\n          ...authorizationHeader,\r\n          Accept: formattedAcceptHeader,\r\n        };\r\n      };\r\n\r\n      qidoConfig = {\r\n        url: dicomWebConfig.qidoRoot,\r\n        staticWado: dicomWebConfig.staticWado,\r\n        singlepart: dicomWebConfig.singlepart,\r\n        headers: userAuthenticationService.getAuthorizationHeader(),\r\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\r\n      };\r\n\r\n      wadoConfig = {\r\n        url: dicomWebConfig.wadoRoot,\r\n        staticWado: dicomWebConfig.staticWado,\r\n        singlepart: dicomWebConfig.singlepart,\r\n        headers: userAuthenticationService.getAuthorizationHeader(),\r\n        errorInterceptor: errorHandler.getHTTPErrorHandler(),\r\n      };\r\n\r\n      // TODO -> Two clients sucks, but its better than 1000.\r\n      // TODO -> We'll need to merge auth later.\r\n      qidoDicomWebClient = dicomWebConfig.staticWado\r\n        ? new StaticWadoClient(qidoConfig)\r\n        : new api.DICOMwebClient(qidoConfig);\r\n\r\n      wadoDicomWebClient = dicomWebConfig.staticWado\r\n        ? new StaticWadoClient(wadoConfig)\r\n        : new api.DICOMwebClient(wadoConfig);\r\n    },\r\n    query: {\r\n      studies: {\r\n        mapParams: mapParams.bind(),\r\n        search: async function (origParams) {\r\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\r\n          const { studyInstanceUid, seriesInstanceUid, ...mappedParams } =\r\n            mapParams(origParams, {\r\n              supportsFuzzyMatching: dicomWebConfig.supportsFuzzyMatching,\r\n              supportsWildcard: dicomWebConfig.supportsWildcard,\r\n            }) || {};\r\n\r\n          const results = await qidoSearch(qidoDicomWebClient, undefined, undefined, mappedParams);\r\n\r\n          return processResults(results);\r\n        },\r\n        processResults: processResults.bind(),\r\n      },\r\n      series: {\r\n        // mapParams: mapParams.bind(),\r\n        search: async function (studyInstanceUid) {\r\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\r\n          const results = await seriesInStudy(qidoDicomWebClient, studyInstanceUid);\r\n\r\n          return processSeriesResults(results);\r\n        },\r\n        // processResults: processResults.bind(),\r\n      },\r\n      instances: {\r\n        search: (studyInstanceUid, queryParameters) => {\r\n          qidoDicomWebClient.headers = getAuthrorizationHeader();\r\n          qidoSearch.call(undefined, qidoDicomWebClient, studyInstanceUid, null, queryParameters);\r\n        },\r\n      },\r\n    },\r\n    retrieve: {\r\n      /**\r\n       * Generates a URL that can be used for direct retrieve of the bulkdata\r\n       *\r\n       * @param {object} params\r\n       * @param {string} params.tag is the tag name of the URL to retrieve\r\n       * @param {object} params.instance is the instance object that the tag is in\r\n       * @param {string} params.defaultType is the mime type of the response\r\n       * @param {string} params.singlepart is the type of the part to retrieve\r\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\r\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\r\n       */\r\n      directURL: params => {\r\n        return getDirectURL(\r\n          {\r\n            wadoRoot: dicomWebConfig.wadoRoot,\r\n            singlepart: dicomWebConfig.singlepart,\r\n          },\r\n          params\r\n        );\r\n      },\r\n      bulkDataURI: async ({ StudyInstanceUID, BulkDataURI }) => {\r\n        qidoDicomWebClient.headers = getAuthrorizationHeader();\r\n        const options = {\r\n          multipart: false,\r\n          BulkDataURI,\r\n          StudyInstanceUID,\r\n        };\r\n        return qidoDicomWebClient.retrieveBulkData(options).then(val => {\r\n          const ret = (val && val[0]) || undefined;\r\n          return ret;\r\n        });\r\n      },\r\n      series: {\r\n        metadata: async ({\r\n          StudyInstanceUID,\r\n          filters,\r\n          sortCriteria,\r\n          sortFunction,\r\n          madeInClient = false,\r\n        } = {}) => {\r\n          if (!StudyInstanceUID) {\r\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\r\n          }\r\n\r\n          if (dicomWebConfig.enableStudyLazyLoad) {\r\n            return implementation._retrieveSeriesMetadataAsync(\r\n              StudyInstanceUID,\r\n              filters,\r\n              sortCriteria,\r\n              sortFunction,\r\n              madeInClient\r\n            );\r\n          }\r\n\r\n          return implementation._retrieveSeriesMetadataSync(\r\n            StudyInstanceUID,\r\n            filters,\r\n            sortCriteria,\r\n            sortFunction,\r\n            madeInClient\r\n          );\r\n        },\r\n      },\r\n    },\r\n\r\n    store: {\r\n      dicom: async (dataset, request) => {\r\n        wadoDicomWebClient.headers = getAuthrorizationHeader();\r\n        if (dataset instanceof ArrayBuffer) {\r\n          const options = {\r\n            datasets: [dataset],\r\n            request,\r\n          };\r\n          await wadoDicomWebClient.storeInstances(options);\r\n        } else {\r\n          const meta = {\r\n            FileMetaInformationVersion: dataset._meta?.FileMetaInformationVersion?.Value,\r\n            MediaStorageSOPClassUID: dataset.SOPClassUID,\r\n            MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,\r\n            TransferSyntaxUID: EXPLICIT_VR_LITTLE_ENDIAN,\r\n            ImplementationClassUID,\r\n            ImplementationVersionName,\r\n          };\r\n\r\n          const denaturalized = denaturalizeDataset(meta);\r\n          const dicomDict = new DicomDict(denaturalized);\r\n\r\n          dicomDict.dict = denaturalizeDataset(dataset);\r\n\r\n          const part10Buffer = dicomDict.write();\r\n\r\n          const options = {\r\n            datasets: [part10Buffer],\r\n            request,\r\n          };\r\n\r\n          await wadoDicomWebClient.storeInstances(options);\r\n        }\r\n      },\r\n    },\r\n\r\n    _retrieveSeriesMetadataSync: async (\r\n      StudyInstanceUID,\r\n      filters,\r\n      sortCriteria,\r\n      sortFunction,\r\n      madeInClient\r\n    ) => {\r\n      const enableStudyLazyLoad = false;\r\n      wadoDicomWebClient.headers = generateWadoHeader();\r\n      // data is all SOPInstanceUIDs\r\n      const data = await retrieveStudyMetadata(\r\n        wadoDicomWebClient,\r\n        StudyInstanceUID,\r\n        enableStudyLazyLoad,\r\n        filters,\r\n        sortCriteria,\r\n        sortFunction\r\n      );\r\n\r\n      // first naturalize the data\r\n      const naturalizedInstancesMetadata = data.map(naturalizeDataset);\r\n\r\n      const seriesSummaryMetadata = {};\r\n      const instancesPerSeries = {};\r\n\r\n      naturalizedInstancesMetadata.forEach(instance => {\r\n        if (!seriesSummaryMetadata[instance.SeriesInstanceUID]) {\r\n          seriesSummaryMetadata[instance.SeriesInstanceUID] = {\r\n            StudyInstanceUID: instance.StudyInstanceUID,\r\n            StudyDescription: instance.StudyDescription,\r\n            SeriesInstanceUID: instance.SeriesInstanceUID,\r\n            SeriesDescription: instance.SeriesDescription,\r\n            SeriesNumber: instance.SeriesNumber,\r\n            SeriesTime: instance.SeriesTime,\r\n            SOPClassUID: instance.SOPClassUID,\r\n            ProtocolName: instance.ProtocolName,\r\n            Modality: instance.Modality,\r\n          };\r\n        }\r\n\r\n        if (!instancesPerSeries[instance.SeriesInstanceUID]) {\r\n          instancesPerSeries[instance.SeriesInstanceUID] = [];\r\n        }\r\n\r\n        const imageId = implementation.getImageIdsForInstance({\r\n          instance,\r\n        });\r\n\r\n        instance.imageId = imageId;\r\n        instance.wadoRoot = dicomWebConfig.wadoRoot;\r\n        instance.wadoUri = dicomWebConfig.wadoUri;\r\n\r\n        metadataProvider.addImageIdToUIDs(imageId, {\r\n          StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          SOPInstanceUID: instance.SOPInstanceUID,\r\n        });\r\n\r\n        instancesPerSeries[instance.SeriesInstanceUID].push(instance);\r\n      });\r\n\r\n      // grab all the series metadata\r\n      const seriesMetadata = Object.values(seriesSummaryMetadata);\r\n      DicomMetadataStore.addSeriesMetadata(seriesMetadata, madeInClient);\r\n\r\n      Object.keys(instancesPerSeries).forEach(seriesInstanceUID =>\r\n        DicomMetadataStore.addInstances(instancesPerSeries[seriesInstanceUID], madeInClient)\r\n      );\r\n    },\r\n\r\n    _retrieveSeriesMetadataAsync: async (\r\n      StudyInstanceUID,\r\n      filters,\r\n      sortCriteria,\r\n      sortFunction,\r\n      madeInClient = false\r\n    ) => {\r\n      const enableStudyLazyLoad = true;\r\n      wadoDicomWebClient.headers = generateWadoHeader();\r\n      // Get Series\r\n      const { preLoadData: seriesSummaryMetadata, promises: seriesPromises } =\r\n        await retrieveStudyMetadata(\r\n          wadoDicomWebClient,\r\n          StudyInstanceUID,\r\n          enableStudyLazyLoad,\r\n          filters,\r\n          sortCriteria,\r\n          sortFunction\r\n        );\r\n\r\n      /**\r\n       * naturalizes the dataset, and adds a retrieve bulkdata method\r\n       * to any values containing BulkDataURI.\r\n       * @param {*} instance\r\n       * @returns naturalized dataset, with retrieveBulkData methods\r\n       */\r\n      const addRetrieveBulkData = instance => {\r\n        const naturalized = naturalizeDataset(instance);\r\n\r\n        // if we know the server doesn't use bulkDataURI, then don't\r\n        if (!dicomWebConfig.bulkDataURI?.enabled) {\r\n          return naturalized;\r\n        }\r\n\r\n        Object.keys(naturalized).forEach(key => {\r\n          const value = naturalized[key];\r\n\r\n          // The value.Value will be set with the bulkdata read value\r\n          // in which case it isn't necessary to re-read this.\r\n          if (value && value.BulkDataURI && !value.Value) {\r\n            // Provide a method to fetch bulkdata\r\n            value.retrieveBulkData = () => {\r\n              // handle the scenarios where bulkDataURI is relative path\r\n              fixBulkDataURI(value, naturalized, dicomWebConfig);\r\n\r\n              const options = {\r\n                // The bulkdata fetches work with either multipart or\r\n                // singlepart, so set multipart to false to let the server\r\n                // decide which type to respond with.\r\n                multipart: false,\r\n                BulkDataURI: value.BulkDataURI,\r\n                // The study instance UID is required if the bulkdata uri\r\n                // is relative - that isn't disallowed by DICOMweb, but\r\n                // isn't well specified in the standard, but is needed in\r\n                // any implementation that stores static copies of the metadata\r\n                StudyInstanceUID: naturalized.StudyInstanceUID,\r\n              };\r\n              // Todo: this needs to be from wado dicom web client\r\n              return qidoDicomWebClient.retrieveBulkData(options).then(val => {\r\n                // There are DICOM PDF cases where the first ArrayBuffer in the array is\r\n                // the bulk data and DICOM video cases where the second ArrayBuffer is\r\n                // the bulk data. Here we play it safe and do a find.\r\n                const ret =\r\n                  (val instanceof Array && val.find(arrayBuffer => arrayBuffer?.byteLength)) ||\r\n                  undefined;\r\n                value.Value = ret;\r\n                return ret;\r\n              });\r\n            };\r\n          }\r\n        });\r\n        return naturalized;\r\n      };\r\n\r\n      // Async load series, store as retrieved\r\n      function storeInstances(instances) {\r\n        const naturalizedInstances = instances.map(addRetrieveBulkData);\r\n\r\n        // Adding instanceMetadata to OHIF MetadataProvider\r\n        naturalizedInstances.forEach((instance, index) => {\r\n          instance.wadoRoot = dicomWebConfig.wadoRoot;\r\n          instance.wadoUri = dicomWebConfig.wadoUri;\r\n\r\n          const imageId = implementation.getImageIdsForInstance({\r\n            instance,\r\n          });\r\n\r\n          // Adding imageId to each instance\r\n          // Todo: This is not the best way I can think of to let external\r\n          // metadata handlers know about the imageId that is stored in the store\r\n          instance.imageId = imageId;\r\n\r\n          // Adding UIDs to metadataProvider\r\n          // Note: storing imageURI in metadataProvider since stack viewports\r\n          // will use the same imageURI\r\n          metadataProvider.addImageIdToUIDs(imageId, {\r\n            StudyInstanceUID,\r\n            SeriesInstanceUID: instance.SeriesInstanceUID,\r\n            SOPInstanceUID: instance.SOPInstanceUID,\r\n          });\r\n        });\r\n\r\n        DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\r\n      }\r\n\r\n      function setSuccessFlag() {\r\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\r\n        study.isLoaded = true;\r\n      }\r\n\r\n      // Google Cloud Healthcare doesn't return StudyInstanceUID, so we need to add\r\n      // it manually here\r\n      seriesSummaryMetadata.forEach(aSeries => {\r\n        aSeries.StudyInstanceUID = StudyInstanceUID;\r\n      });\r\n\r\n      DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\r\n\r\n      const seriesDeliveredPromises = seriesPromises.map(promise =>\r\n        promise.then(instances => {\r\n          storeInstances(instances);\r\n        })\r\n      );\r\n      await Promise.all(seriesDeliveredPromises);\r\n      setSuccessFlag();\r\n    },\r\n    deleteStudyMetadataPromise,\r\n    getImageIdsForDisplaySet(displaySet) {\r\n      const images = displaySet.images;\r\n      const imageIds = [];\r\n\r\n      if (!images) {\r\n        return imageIds;\r\n      }\r\n\r\n      displaySet.images.forEach(instance => {\r\n        const NumberOfFrames = instance.NumberOfFrames;\r\n\r\n        if (NumberOfFrames > 1) {\r\n          for (let frame = 1; frame <= NumberOfFrames; frame++) {\r\n            const imageId = this.getImageIdsForInstance({\r\n              instance,\r\n              frame,\r\n            });\r\n            imageIds.push(imageId);\r\n          }\r\n        } else {\r\n          const imageId = this.getImageIdsForInstance({ instance });\r\n          imageIds.push(imageId);\r\n        }\r\n      });\r\n\r\n      return imageIds;\r\n    },\r\n    getImageIdsForInstance({ instance, frame }) {\r\n      const imageIds = getImageId({\r\n        instance,\r\n        frame,\r\n        config: dicomWebConfig,\r\n      });\r\n      return imageIds;\r\n    },\r\n    getConfig() {\r\n      return dicomWebConfigCopy;\r\n    },\r\n    getStudyInstanceUIDs({ params, query }) {\r\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\r\n      const queryStudyInstanceUIDs = utils.splitComma(query.getAll('StudyInstanceUIDs'));\r\n\r\n      const StudyInstanceUIDs =\r\n        (queryStudyInstanceUIDs.length && queryStudyInstanceUIDs) || paramsStudyInstanceUIDs;\r\n      const StudyInstanceUIDsAsArray =\r\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\r\n          ? StudyInstanceUIDs\r\n          : [StudyInstanceUIDs];\r\n\r\n      return StudyInstanceUIDsAsArray;\r\n    },\r\n  };\r\n\r\n  if (dicomWebConfig.supportsReject) {\r\n    implementation.reject = dcm4cheeReject(dicomWebConfig.wadoRoot);\r\n  }\r\n\r\n  return IWebApiDataSource.create(implementation);\r\n}\r\n\r\nexport { createDicomWebApi };\r\n","export default function (wadoRoot) {\r\n  return {\r\n    series: (StudyInstanceUID, SeriesInstanceUID) => {\r\n      return new Promise((resolve, reject) => {\r\n        // Reject because of Quality. (Seems the most sensible out of the options)\r\n        const CodeValueAndCodeSchemeDesignator = `113001%5EDCM`;\r\n\r\n        const url = `${wadoRoot}/studies/${StudyInstanceUID}/series/${SeriesInstanceUID}/reject/${CodeValueAndCodeSchemeDesignator}`;\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('POST', url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        // TODO -> Auth when we re-add authorization.\r\n\r\n        console.log(xhr);\r\n\r\n        xhr.onreadystatechange = function () {\r\n          //Call a function when the state changes.\r\n          if (xhr.readyState == 4) {\r\n            switch (xhr.status) {\r\n              case 204:\r\n                resolve(xhr.responseText);\r\n\r\n                break;\r\n              case 404:\r\n                reject('Your dataSource does not support reject functionality');\r\n            }\r\n          }\r\n        };\r\n        xhr.send();\r\n      });\r\n    },\r\n  };\r\n}\r\n","import { DicomMetadataStore, IWebApiDataSource } from '@ohif/core';\r\nimport OHIF from '@ohif/core';\r\n\r\nimport getImageId from '../DicomWebDataSource/utils/getImageId';\r\nimport getDirectURL from '../utils/getDirectURL';\r\n\r\nconst metadataProvider = OHIF.classes.MetadataProvider;\r\n\r\nconst mappings = {\r\n  studyInstanceUid: 'StudyInstanceUID',\r\n  patientId: 'PatientID',\r\n};\r\n\r\nlet _store = {\r\n  urls: [],\r\n  studyInstanceUIDMap: new Map(), // map of urls to array of study instance UIDs\r\n  // {\r\n  //   url: url1\r\n  //   studies: [Study1, Study2], // if multiple studies\r\n  // }\r\n  // {\r\n  //   url: url2\r\n  //   studies: [Study1],\r\n  // }\r\n  // }\r\n};\r\n\r\nconst getMetaDataByURL = url => {\r\n  return _store.urls.find(metaData => metaData.url === url);\r\n};\r\n\r\nconst findStudies = (key, value) => {\r\n  let studies = [];\r\n  _store.urls.map(metaData => {\r\n    metaData.studies.map(aStudy => {\r\n      if (aStudy[key] === value) {\r\n        studies.push(aStudy);\r\n      }\r\n    });\r\n  });\r\n  return studies;\r\n};\r\n\r\nfunction createDicomJSONApi(dicomJsonConfig) {\r\n  const { wadoRoot } = dicomJsonConfig;\r\n\r\n  const implementation = {\r\n    initialize: async ({ query, url }) => {\r\n      if (!url) {\r\n        url = query.get('url');\r\n      }\r\n      let metaData = getMetaDataByURL(url);\r\n\r\n      // if we have already cached the data from this specific url\r\n      // We are only handling one StudyInstanceUID to run; however,\r\n      // all studies for patientID will be put in the correct tab\r\n      if (metaData) {\r\n        return metaData.studies.map(aStudy => {\r\n          return aStudy.StudyInstanceUID;\r\n        });\r\n      }\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      let StudyInstanceUID;\r\n      let SeriesInstanceUID;\r\n      data.studies.forEach(study => {\r\n        StudyInstanceUID = study.StudyInstanceUID;\r\n\r\n        study.series.forEach(series => {\r\n          SeriesInstanceUID = series.SeriesInstanceUID;\r\n\r\n          series.instances.forEach(instance => {\r\n            const { url: imageId, metadata: naturalizedDicom } = instance;\r\n\r\n            // Add imageId specific mapping to this data as the URL isn't necessarliy WADO-URI.\r\n            metadataProvider.addImageIdToUIDs(imageId, {\r\n              StudyInstanceUID,\r\n              SeriesInstanceUID,\r\n              SOPInstanceUID: naturalizedDicom.SOPInstanceUID,\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      _store.urls.push({\r\n        url,\r\n        studies: [...data.studies],\r\n      });\r\n      _store.studyInstanceUIDMap.set(\r\n        url,\r\n        data.studies.map(study => study.StudyInstanceUID)\r\n      );\r\n    },\r\n    query: {\r\n      studies: {\r\n        mapParams: () => {},\r\n        search: async param => {\r\n          const [key, value] = Object.entries(param)[0];\r\n          const mappedParam = mappings[key];\r\n\r\n          // todo: should fetch from dicomMetadataStore\r\n          const studies = findStudies(mappedParam, value);\r\n\r\n          return studies.map(aStudy => {\r\n            return {\r\n              accession: aStudy.AccessionNumber,\r\n              date: aStudy.StudyDate,\r\n              description: aStudy.StudyDescription,\r\n              instances: aStudy.NumInstances,\r\n              modalities: aStudy.Modalities,\r\n              mrn: aStudy.PatientID,\r\n              patientName: aStudy.PatientName,\r\n              studyInstanceUid: aStudy.StudyInstanceUID,\r\n              NumInstances: aStudy.NumInstances,\r\n              time: aStudy.StudyTime,\r\n            };\r\n          });\r\n        },\r\n        processResults: () => {\r\n          console.warn(' DICOMJson QUERY processResults not implemented');\r\n        },\r\n      },\r\n      series: {\r\n        // mapParams: mapParams.bind(),\r\n        search: () => {\r\n          console.warn(' DICOMJson QUERY SERIES SEARCH not implemented');\r\n        },\r\n      },\r\n      instances: {\r\n        search: () => {\r\n          console.warn(' DICOMJson QUERY instances SEARCH not implemented');\r\n        },\r\n      },\r\n    },\r\n    retrieve: {\r\n      /**\r\n       * Generates a URL that can be used for direct retrieve of the bulkdata\r\n       *\r\n       * @param {object} params\r\n       * @param {string} params.tag is the tag name of the URL to retrieve\r\n       * @param {string} params.defaultPath path for the pixel data url\r\n       * @param {object} params.instance is the instance object that the tag is in\r\n       * @param {string} params.defaultType is the mime type of the response\r\n       * @param {string} params.singlepart is the type of the part to retrieve\r\n       * @param {string} params.fetchPart unknown?\r\n       * @returns an absolute URL to the resource, if the absolute URL can be retrieved as singlepart,\r\n       *    or is already retrieved, or a promise to a URL for such use if a BulkDataURI\r\n       */\r\n      directURL: params => {\r\n        return getDirectURL(wadoRoot, params);\r\n      },\r\n      series: {\r\n        metadata: async ({ StudyInstanceUID, madeInClient = false, customSort } = {}) => {\r\n          if (!StudyInstanceUID) {\r\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\r\n          }\r\n\r\n          const study = findStudies('StudyInstanceUID', StudyInstanceUID)[0];\r\n          let series;\r\n\r\n          if (customSort) {\r\n            series = customSort(study.series);\r\n          } else {\r\n            series = study.series;\r\n          }\r\n\r\n          const seriesSummaryMetadata = series.map(series => {\r\n            const seriesSummary = {\r\n              StudyInstanceUID: study.StudyInstanceUID,\r\n              ...series,\r\n            };\r\n            delete seriesSummary.instances;\r\n            return seriesSummary;\r\n          });\r\n\r\n          // Async load series, store as retrieved\r\n          function storeInstances(naturalizedInstances) {\r\n            DicomMetadataStore.addInstances(naturalizedInstances, madeInClient);\r\n          }\r\n\r\n          DicomMetadataStore.addSeriesMetadata(seriesSummaryMetadata, madeInClient);\r\n\r\n          function setSuccessFlag() {\r\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\r\n            study.isLoaded = true;\r\n          }\r\n\r\n          const numberOfSeries = series.length;\r\n          series.forEach((series, index) => {\r\n            const instances = series.instances.map(instance => {\r\n              const obj = {\r\n                ...instance.metadata,\r\n                url: instance.url,\r\n                imageId: instance.url,\r\n                ...series,\r\n                ...study,\r\n              };\r\n              delete obj.instances;\r\n              delete obj.series;\r\n              return obj;\r\n            });\r\n            storeInstances(instances);\r\n            if (index === numberOfSeries - 1) {\r\n              setSuccessFlag();\r\n            }\r\n          });\r\n        },\r\n      },\r\n    },\r\n    store: {\r\n      dicom: () => {\r\n        console.warn(' DICOMJson store dicom not implemented');\r\n      },\r\n    },\r\n    getImageIdsForDisplaySet(displaySet) {\r\n      const images = displaySet.images;\r\n      const imageIds = [];\r\n\r\n      if (!images) {\r\n        return imageIds;\r\n      }\r\n\r\n      displaySet.images.forEach(instance => {\r\n        const NumberOfFrames = instance.NumberOfFrames;\r\n\r\n        if (NumberOfFrames > 1) {\r\n          for (let i = 0; i < NumberOfFrames; i++) {\r\n            const imageId = getImageId({\r\n              instance,\r\n              frame: i,\r\n              config: dicomJsonConfig,\r\n            });\r\n            imageIds.push(imageId);\r\n          }\r\n        } else {\r\n          const imageId = getImageId({ instance, config: dicomJsonConfig });\r\n          imageIds.push(imageId);\r\n        }\r\n      });\r\n\r\n      return imageIds;\r\n    },\r\n    getImageIdsForInstance({ instance, frame }) {\r\n      const imageIds = getImageId({ instance, frame });\r\n      return imageIds;\r\n    },\r\n    getStudyInstanceUIDs: ({ params, query }) => {\r\n      const url = query.get('url');\r\n      return _store.studyInstanceUIDMap.get(url);\r\n    },\r\n  };\r\n  return IWebApiDataSource.create(implementation);\r\n}\r\n\r\nexport { createDicomJSONApi };\r\n","import { DicomMetadataStore, IWebApiDataSource, utils } from '@ohif/core';\r\nimport OHIF from '@ohif/core';\r\nimport dcmjs from 'dcmjs';\r\n\r\nconst metadataProvider = OHIF.classes.MetadataProvider;\r\nconst { EVENTS } = DicomMetadataStore;\r\n\r\nconst END_MODALITIES = {\r\n  SR: true,\r\n  SEG: true,\r\n  DOC: true,\r\n};\r\n\r\nconst compareValue = (v1, v2, def = 0) => {\r\n  if (v1 === v2) {\r\n    return def;\r\n  }\r\n  if (v1 < v2) {\r\n    return -1;\r\n  }\r\n  return 1;\r\n};\r\n\r\n// Sorting SR modalities to be at the end of series list\r\nconst customSort = (seriesA, seriesB) => {\r\n  const instanceA = seriesA.instances[0];\r\n  const instanceB = seriesB.instances[0];\r\n  const modalityA = instanceA.Modality;\r\n  const modalityB = instanceB.Modality;\r\n\r\n  const isEndA = END_MODALITIES[modalityA];\r\n  const isEndB = END_MODALITIES[modalityB];\r\n\r\n  if (isEndA && isEndB) {\r\n    // Compare by series date\r\n    return compareValue(instanceA.SeriesNumber, instanceB.SeriesNumber);\r\n  }\r\n  if (!isEndA && !isEndB) {\r\n    return compareValue(instanceB.SeriesNumber, instanceA.SeriesNumber);\r\n  }\r\n  return isEndA ? -1 : 1;\r\n};\r\n\r\nfunction createDicomLocalApi(dicomLocalConfig) {\r\n  const { name } = dicomLocalConfig;\r\n\r\n  const implementation = {\r\n    initialize: ({ params, query }) => {},\r\n    query: {\r\n      studies: {\r\n        mapParams: () => {},\r\n        search: params => {\r\n          const studyUIDs = DicomMetadataStore.getStudyInstanceUIDs();\r\n\r\n          return studyUIDs.map(StudyInstanceUID => {\r\n            let numInstances = 0;\r\n            const modalities = new Set();\r\n\r\n            // Calculating the number of instances in the study and modalities\r\n            // present in the study\r\n            const study = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n            study.series.forEach(aSeries => {\r\n              numInstances += aSeries.instances.length;\r\n              modalities.add(aSeries.instances[0].Modality);\r\n            });\r\n\r\n            // first instance in the first series\r\n            const firstInstance = study?.series[0]?.instances[0];\r\n\r\n            if (firstInstance) {\r\n              return {\r\n                accession: firstInstance.AccessionNumber,\r\n                date: firstInstance.StudyDate,\r\n                description: firstInstance.StudyDescription,\r\n                mrn: firstInstance.PatientID,\r\n                patientName: utils.formatPN(firstInstance.PatientName),\r\n                studyInstanceUid: firstInstance.StudyInstanceUID,\r\n                time: firstInstance.StudyTime,\r\n                //\r\n                instances: numInstances,\r\n                modalities: Array.from(modalities).join('/'),\r\n                NumInstances: numInstances,\r\n              };\r\n            }\r\n          });\r\n        },\r\n        processResults: () => {\r\n          console.warn(' DICOMLocal QUERY processResults not implemented');\r\n        },\r\n      },\r\n      series: {\r\n        search: studyInstanceUID => {\r\n          const study = DicomMetadataStore.getStudy(studyInstanceUID);\r\n          return study.series.map(aSeries => {\r\n            const firstInstance = aSeries?.instances[0];\r\n            return {\r\n              studyInstanceUid: studyInstanceUID,\r\n              seriesInstanceUid: firstInstance.SeriesInstanceUID,\r\n              modality: firstInstance.Modality,\r\n              seriesNumber: firstInstance.SeriesNumber,\r\n              seriesDate: firstInstance.SeriesDate,\r\n              numSeriesInstances: aSeries.instances.length,\r\n              description: firstInstance.SeriesDescription,\r\n            };\r\n          });\r\n        },\r\n      },\r\n      instances: {\r\n        search: () => {\r\n          console.warn(' DICOMLocal QUERY instances SEARCH not implemented');\r\n        },\r\n      },\r\n    },\r\n    retrieve: {\r\n      directURL: params => {\r\n        const { instance, tag, defaultType } = params;\r\n\r\n        const value = instance[tag];\r\n        if (value instanceof Array && value[0] instanceof ArrayBuffer) {\r\n          return URL.createObjectURL(\r\n            new Blob([value[0]], {\r\n              type: defaultType,\r\n            })\r\n          );\r\n        }\r\n      },\r\n      series: {\r\n        metadata: async ({ StudyInstanceUID, madeInClient = false } = {}) => {\r\n          if (!StudyInstanceUID) {\r\n            throw new Error('Unable to query for SeriesMetadata without StudyInstanceUID');\r\n          }\r\n\r\n          // Instances metadata already added via local upload\r\n          const study = DicomMetadataStore.getStudy(StudyInstanceUID, madeInClient);\r\n\r\n          // Series metadata already added via local upload\r\n          DicomMetadataStore._broadcastEvent(EVENTS.SERIES_ADDED, {\r\n            StudyInstanceUID,\r\n            madeInClient,\r\n          });\r\n\r\n          study.series.forEach(aSeries => {\r\n            const { SeriesInstanceUID } = aSeries;\r\n\r\n            const isMultiframe = aSeries.instances[0].NumberOfFrames > 1;\r\n\r\n            aSeries.instances.forEach((instance, index) => {\r\n              const {\r\n                url: imageId,\r\n                StudyInstanceUID,\r\n                SeriesInstanceUID,\r\n                SOPInstanceUID,\r\n              } = instance;\r\n\r\n              instance.imageId = imageId;\r\n\r\n              // Add imageId specific mapping to this data as the URL isn't necessarily WADO-URI.\r\n              metadataProvider.addImageIdToUIDs(imageId, {\r\n                StudyInstanceUID,\r\n                SeriesInstanceUID,\r\n                SOPInstanceUID,\r\n                frameIndex: isMultiframe ? index : 1,\r\n              });\r\n            });\r\n\r\n            DicomMetadataStore._broadcastEvent(EVENTS.INSTANCES_ADDED, {\r\n              StudyInstanceUID,\r\n              SeriesInstanceUID,\r\n              madeInClient,\r\n            });\r\n          });\r\n        },\r\n      },\r\n    },\r\n    store: {\r\n      dicom: naturalizedReport => {\r\n        const reportBlob = dcmjs.data.datasetToBlob(naturalizedReport);\r\n\r\n        //Create a URL for the binary.\r\n        var objectUrl = URL.createObjectURL(reportBlob);\r\n        window.location.assign(objectUrl);\r\n      },\r\n    },\r\n    getImageIdsForDisplaySet(displaySet) {\r\n      const images = displaySet.images;\r\n      const imageIds = [];\r\n\r\n      if (!images) {\r\n        return imageIds;\r\n      }\r\n\r\n      displaySet.images.forEach(instance => {\r\n        const NumberOfFrames = instance.NumberOfFrames;\r\n        if (NumberOfFrames > 1) {\r\n          // in multiframe we start at frame 1\r\n          for (let i = 1; i <= NumberOfFrames; i++) {\r\n            const imageId = this.getImageIdsForInstance({\r\n              instance,\r\n              frame: i,\r\n            });\r\n            imageIds.push(imageId);\r\n          }\r\n        } else {\r\n          const imageId = this.getImageIdsForInstance({ instance });\r\n          imageIds.push(imageId);\r\n        }\r\n      });\r\n\r\n      return imageIds;\r\n    },\r\n    getImageIdsForInstance({ instance, frame }) {\r\n      const { StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID } = instance;\r\n      const storedInstance = DicomMetadataStore.getInstance(\r\n        StudyInstanceUID,\r\n        SeriesInstanceUID,\r\n        SOPInstanceUID\r\n      );\r\n\r\n      let imageId = storedInstance.url;\r\n\r\n      if (frame !== undefined) {\r\n        imageId += `&frame=${frame}`;\r\n      }\r\n\r\n      return imageId;\r\n    },\r\n    deleteStudyMetadataPromise() {\r\n      console.log('deleteStudyMetadataPromise not implemented');\r\n    },\r\n    getStudyInstanceUIDs: ({ params, query }) => {\r\n      const { StudyInstanceUIDs: paramsStudyInstanceUIDs } = params;\r\n      const queryStudyInstanceUIDs = query.getAll('StudyInstanceUIDs');\r\n\r\n      const StudyInstanceUIDs = queryStudyInstanceUIDs || paramsStudyInstanceUIDs;\r\n      const StudyInstanceUIDsAsArray =\r\n        StudyInstanceUIDs && Array.isArray(StudyInstanceUIDs)\r\n          ? StudyInstanceUIDs\r\n          : [StudyInstanceUIDs];\r\n\r\n      // Put SRs at the end of series list to make sure images are loaded first\r\n      let isStudyInCache = false;\r\n      StudyInstanceUIDsAsArray.forEach(StudyInstanceUID => {\r\n        const study = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n        if (study) {\r\n          study.series = study.series.sort(customSort);\r\n          isStudyInCache = true;\r\n        }\r\n      });\r\n\r\n      return isStudyInCache ? StudyInstanceUIDsAsArray : [];\r\n    },\r\n  };\r\n  return IWebApiDataSource.create(implementation);\r\n}\r\n\r\nexport { createDicomLocalApi };\r\n","import { IWebApiDataSource } from '@ohif/core';\r\nimport { createDicomWebApi } from '../DicomWebDataSource/index';\r\n\r\n/**\r\n * This datasource is initialized with a url that returns a JSON object with a\r\n * dicomWeb datasource configuration array present in a \"servers\" object.\r\n *\r\n * Only the first array item is parsed, if there are multiple items in the\r\n * dicomWeb configuration array\r\n *\r\n */\r\nfunction createDicomWebProxyApi(dicomWebProxyConfig, UserAuthenticationService) {\r\n  const { name } = dicomWebProxyConfig;\r\n  let dicomWebDelegate = undefined;\r\n\r\n  const implementation = {\r\n    initialize: async ({ params, query }) => {\r\n      const url = query.get('url');\r\n\r\n      if (!url) {\r\n        throw new Error(`No url for '${name}'`);\r\n      } else {\r\n        const response = await fetch(url);\r\n        let data = await response.json();\r\n        if (!data.servers?.dicomWeb?.[0]) {\r\n          throw new Error('Invalid configuration returned by url');\r\n        }\r\n\r\n        dicomWebDelegate = createDicomWebApi(\r\n          data.servers.dicomWeb[0].configuration,\r\n          UserAuthenticationService\r\n        );\r\n        dicomWebDelegate.initialize({ params, query });\r\n      }\r\n    },\r\n    query: {\r\n      studies: {\r\n        search: params => dicomWebDelegate.query.studies.search(params),\r\n      },\r\n      series: {\r\n        search: (...args) => dicomWebDelegate.query.series.search(...args),\r\n      },\r\n      instances: {\r\n        search: (studyInstanceUid, queryParameters) =>\r\n          dicomWebDelegate.query.instances.search(studyInstanceUid, queryParameters),\r\n      },\r\n    },\r\n    retrieve: {\r\n      directURL: (...args) => dicomWebDelegate.retrieve.directURL(...args),\r\n      series: {\r\n        metadata: async (...args) => dicomWebDelegate.retrieve.series.metadata(...args),\r\n      },\r\n    },\r\n    store: {\r\n      dicom: (...args) => dicomWebDelegate.store(...args),\r\n    },\r\n    deleteStudyMetadataPromise: (...args) => dicomWebDelegate.deleteStudyMetadataPromise(...args),\r\n    getImageIdsForDisplaySet: (...args) => dicomWebDelegate.getImageIdsForDisplaySet(...args),\r\n    getImageIdsForInstance: (...args) => dicomWebDelegate.getImageIdsForInstance(...args),\r\n    getStudyInstanceUIDs({ params, query }) {\r\n      let studyInstanceUIDs = [];\r\n\r\n      // there seem to be a couple of variations of the case for this parameter\r\n      const queryStudyInstanceUIDs =\r\n        query.get('studyInstanceUIDs') || query.get('studyInstanceUids');\r\n      if (!queryStudyInstanceUIDs) {\r\n        throw new Error(`No studyInstanceUids in request for '${name}'`);\r\n      }\r\n      studyInstanceUIDs = queryStudyInstanceUIDs.split(';');\r\n      return studyInstanceUIDs;\r\n    },\r\n  };\r\n  return IWebApiDataSource.create(implementation);\r\n}\r\n\r\nexport { createDicomWebProxyApi };\r\n","// TODO: Pull in IWebClientApi from @ohif/core\r\n// TODO: Use constructor to create an instance of IWebClientApi\r\n// TODO: Use existing DICOMWeb configuration (previously, appConfig, to configure instance)\r\n\r\nimport { createDicomWebApi } from './DicomWebDataSource/index.js';\r\nimport { createDicomJSONApi } from './DicomJSONDataSource/index.js';\r\nimport { createDicomLocalApi } from './DicomLocalDataSource/index.js';\r\nimport { createDicomWebProxyApi } from './DicomWebProxyDataSource/index.js';\r\n\r\n/**\r\n *\r\n */\r\nfunction getDataSourcesModule() {\r\n  return [\r\n    {\r\n      name: 'dicomweb',\r\n      type: 'webApi',\r\n      createDataSource: createDicomWebApi,\r\n    },\r\n    {\r\n      name: 'dicomwebproxy',\r\n      type: 'webApi',\r\n      createDataSource: createDicomWebProxyApi,\r\n    },\r\n    {\r\n      name: 'dicomjson',\r\n      type: 'jsonApi',\r\n      createDataSource: createDicomJSONApi,\r\n    },\r\n    {\r\n      name: 'dicomlocal',\r\n      type: 'localApi',\r\n      createDataSource: createDicomLocalApi,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getDataSourcesModule;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classnames from 'classnames';\r\n\r\nexport default function Toolbar({ servicesManager }) {\r\n  const { toolbarService } = servicesManager.services;\r\n  const [toolbarButtons, setToolbarButtons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = toolbarService.subscribe(toolbarService.EVENTS.TOOL_BAR_MODIFIED, () =>\r\n      setToolbarButtons(toolbarService.getButtonSection('primary'))\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [toolbarService]);\r\n\r\n  const onInteraction = useCallback(\r\n    args => toolbarService.recordInteraction(args),\r\n    [toolbarService]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {toolbarButtons.map(toolDef => {\r\n        const { id, Component, componentProps } = toolDef;\r\n        return (\r\n          // The margin for separating the tools on the toolbar should go here and NOT in each individual component (button) item.\r\n          // This allows for the individual items to be included in other UI components where perhaps alternative margins are desired.\r\n          <div\r\n            key={id}\r\n            className={classnames('mr-1')}\r\n          >\r\n            <Component\r\n              id={id}\r\n              {...componentProps}\r\n              onInteraction={onInteraction}\r\n              servicesManager={servicesManager}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from 'react-router';\r\n\r\nimport { ErrorBoundary, UserPreferences, AboutModal, Header, useModal } from '@ohif/ui';\r\nimport i18n from '@ohif/i18n';\r\nimport { hotkeys } from '@ohif/core';\r\nimport { useAppConfig } from '@state';\r\nimport Toolbar from '../Toolbar/Toolbar';\r\n\r\nconst { availableLanguages, defaultLanguage, currentLanguage } = i18n;\r\n\r\nfunction ViewerHeader({ hotkeysManager, extensionManager, servicesManager }) {\r\n  const [appConfig] = useAppConfig();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const onClickReturnButton = () => {\r\n    const { pathname } = location;\r\n    const dataSourceIdx = pathname.indexOf('/', 1);\r\n    const query = new URLSearchParams(window.location.search);\r\n    const configUrl = query.get('configUrl');\r\n\r\n    const dataSourceName = pathname.substring(dataSourceIdx + 1);\r\n    const existingDataSource = extensionManager.getDataSources(dataSourceName);\r\n\r\n    const searchQuery = new URLSearchParams();\r\n    if (dataSourceIdx !== -1 && existingDataSource) {\r\n      searchQuery.append('datasources', pathname.substring(dataSourceIdx + 1));\r\n    }\r\n\r\n    if (configUrl) {\r\n      searchQuery.append('configUrl', configUrl);\r\n    }\r\n\r\n    navigate({\r\n      pathname: '/',\r\n      search: decodeURIComponent(searchQuery.toString()),\r\n    });\r\n  };\r\n\r\n  const { t } = useTranslation();\r\n  const { show, hide } = useModal();\r\n  const { hotkeyDefinitions, hotkeyDefaults } = hotkeysManager;\r\n  const versionNumber = process.env.VERSION_NUMBER;\r\n  const commitHash = process.env.COMMIT_HASH;\r\n\r\n  const menuOptions = [\r\n    {\r\n      title: t('Header:About'),\r\n      icon: 'info',\r\n      onClick: () =>\r\n        show({\r\n          content: AboutModal,\r\n          title: 'About OHIF Viewer',\r\n          contentProps: { versionNumber, commitHash },\r\n        }),\r\n    },\r\n    {\r\n      title: t('Header:Preferences'),\r\n      icon: 'settings',\r\n      onClick: () =>\r\n        show({\r\n          title: t('UserPreferencesModal:User Preferences'),\r\n          content: UserPreferences,\r\n          contentProps: {\r\n            hotkeyDefaults: hotkeysManager.getValidHotkeyDefinitions(hotkeyDefaults),\r\n            hotkeyDefinitions,\r\n            currentLanguage: currentLanguage(),\r\n            availableLanguages,\r\n            defaultLanguage,\r\n            onCancel: () => {\r\n              hotkeys.stopRecord();\r\n              hotkeys.unpause();\r\n              hide();\r\n            },\r\n            onSubmit: ({ hotkeyDefinitions, language }) => {\r\n              if (language.value !== currentLanguage().value) {\r\n                i18n.changeLanguage(language.value);\r\n              }\r\n              hotkeysManager.setHotkeys(hotkeyDefinitions);\r\n              hide();\r\n            },\r\n            onReset: () => hotkeysManager.restoreDefaultBindings(),\r\n            hotkeysModule: hotkeys,\r\n          },\r\n        }),\r\n    },\r\n  ];\r\n\r\n  if (appConfig.oidc) {\r\n    menuOptions.push({\r\n      title: t('Header:Logout'),\r\n      icon: 'power-off',\r\n      onClick: async () => {\r\n        navigate(`/logout?redirect_uri=${encodeURIComponent(window.location.href)}`);\r\n      },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Header\r\n      menuOptions={menuOptions}\r\n      isReturnEnabled={!!appConfig.showStudyList}\r\n      onClickReturnButton={onClickReturnButton}\r\n      WhiteLabeling={appConfig.whiteLabeling}\r\n    >\r\n      <ErrorBoundary context=\"Primary Toolbar\">\r\n        <div className=\"relative flex justify-center\">\r\n          <Toolbar servicesManager={servicesManager} />\r\n        </div>\r\n      </ErrorBoundary>\r\n    </Header>\r\n  );\r\n}\r\n\r\nexport default ViewerHeader;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { SidePanel } from '@ohif/ui';\r\nimport { PanelService, ServicesManager } from '@ohif/core';\r\n\r\nexport type SidePanelWithServicesProps = {\r\n  servicesManager: ServicesManager;\r\n  side: 'left' | 'right';\r\n  className: string;\r\n  activeTabIndex: number;\r\n  tabs: any;\r\n};\r\n\r\nconst SidePanelWithServices = ({\r\n  servicesManager,\r\n  side,\r\n  className,\r\n  activeTabIndex: activeTabIndexProp,\r\n  tabs,\r\n}) => {\r\n  const panelService: PanelService = servicesManager?.services?.panelService;\r\n\r\n  // Tracks whether this SidePanel has been opened at least once since this SidePanel was inserted into the DOM.\r\n  // Thus going to the Study List page and back to the viewer resets this flag for a SidePanel.\r\n  const [hasBeenOpened, setHasBeenOpened] = useState(false);\r\n  const [activeTabIndex, setActiveTabIndex] = useState(activeTabIndexProp);\r\n\r\n  useEffect(() => {\r\n    if (panelService) {\r\n      const activatePanelSubscription = panelService.subscribe(\r\n        panelService.EVENTS.ACTIVATE_PANEL,\r\n        (activatePanelEvent: Types.ActivatePanelEvent) => {\r\n          if (!hasBeenOpened || activatePanelEvent.forceActive) {\r\n            const tabIndex = tabs.findIndex(tab => tab.id === activatePanelEvent.panelId);\r\n            if (tabIndex !== -1) {\r\n              setActiveTabIndex(tabIndex);\r\n            }\r\n          }\r\n        }\r\n      );\r\n\r\n      return () => {\r\n        activatePanelSubscription.unsubscribe();\r\n      };\r\n    }\r\n  }, [tabs, hasBeenOpened, panelService]);\r\n\r\n  return (\r\n    <SidePanel\r\n      side={side}\r\n      className={className}\r\n      activeTabIndex={activeTabIndex}\r\n      tabs={tabs}\r\n      onOpen={() => {\r\n        setHasBeenOpened(true);\r\n      }}\r\n    ></SidePanel>\r\n  );\r\n};\r\n\r\nexport default SidePanelWithServices;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { SidePanel, ErrorBoundary, LoadingIndicatorProgress } from '@ohif/ui';\r\nimport { ServicesManager, HangingProtocolService, CommandsManager } from '@ohif/core';\r\nimport { useAppConfig } from '@state';\r\nimport ViewerHeader from './ViewerHeader';\r\nimport SidePanelWithServices from '../Components/SidePanelWithServices';\r\n\r\nfunction ViewerLayout({\r\n  // From Extension Module Params\r\n  extensionManager,\r\n  servicesManager,\r\n  hotkeysManager,\r\n  commandsManager,\r\n  // From Modes\r\n  viewports,\r\n  ViewportGridComp,\r\n  leftPanels = [],\r\n  rightPanels = [],\r\n  leftPanelDefaultClosed = false,\r\n  rightPanelDefaultClosed = false,\r\n}): React.FunctionComponent {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const { hangingProtocolService } = servicesManager.services;\r\n  const [showLoadingIndicator, setShowLoadingIndicator] = useState(appConfig.showLoadingIndicator);\r\n\r\n  /**\r\n   * Set body classes (tailwindcss) that don't allow vertical\r\n   * or horizontal overflow (no scrolling). Also guarantee window\r\n   * is sized to our viewport.\r\n   */\r\n  useEffect(() => {\r\n    document.body.classList.add('bg-black');\r\n    document.body.classList.add('overflow-hidden');\r\n    return () => {\r\n      document.body.classList.remove('bg-black');\r\n      document.body.classList.remove('overflow-hidden');\r\n    };\r\n  }, []);\r\n\r\n  const getComponent = id => {\r\n    const entry = extensionManager.getModuleEntry(id);\r\n\r\n    if (!entry) {\r\n      throw new Error(\r\n        `${id} is not valid for an extension module. Please verify your configuration or ensure that the extension is properly registered. It's also possible that your mode is utilizing a module from an extension that hasn't been included in its dependencies (add the extension to the \"extensionDependencies\" array in your mode's index.js file)`\r\n      );\r\n    }\r\n\r\n    let content;\r\n    if (entry && entry.component) {\r\n      content = entry.component;\r\n    } else {\r\n      throw new Error(\r\n        `No component found from extension ${id}. Check the reference string to the extension in your Mode configuration`\r\n      );\r\n    }\r\n\r\n    return { entry, content };\r\n  };\r\n\r\n  const getPanelData = id => {\r\n    const { content, entry } = getComponent(id);\r\n\r\n    return {\r\n      id: entry.id,\r\n      iconName: entry.iconName,\r\n      iconLabel: entry.iconLabel,\r\n      label: entry.label,\r\n      name: entry.name,\r\n      content,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = hangingProtocolService.subscribe(\r\n      HangingProtocolService.EVENTS.PROTOCOL_CHANGED,\r\n\r\n      // Todo: right now to set the loading indicator to false, we need to wait for the\r\n      // hangingProtocolService to finish applying the viewport matching to each viewport,\r\n      // however, this might not be the only approach to set the loading indicator to false. we need to explore this further.\r\n      () => {\r\n        setShowLoadingIndicator(false);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [hangingProtocolService]);\r\n\r\n  const getViewportComponentData = viewportComponent => {\r\n    const { entry } = getComponent(viewportComponent.namespace);\r\n\r\n    return {\r\n      component: entry.component,\r\n      displaySetsToDisplay: viewportComponent.displaySetsToDisplay,\r\n    };\r\n  };\r\n\r\n  const leftPanelComponents = leftPanels.map(getPanelData);\r\n  const rightPanelComponents = rightPanels.map(getPanelData);\r\n  const viewportComponents = viewports.map(getViewportComponentData);\r\n\r\n  return (\r\n    <div>\r\n      <ViewerHeader\r\n        hotkeysManager={hotkeysManager}\r\n        extensionManager={extensionManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n      <div\r\n        className=\"relative flex w-full flex-row flex-nowrap items-stretch overflow-hidden bg-black\"\r\n        style={{ height: 'calc(100vh - 52px' }}\r\n      >\r\n        <React.Fragment>\r\n          {showLoadingIndicator && <LoadingIndicatorProgress className=\"h-full w-full bg-black\" />}\r\n          {/* LEFT SIDEPANELS */}\r\n          {leftPanelComponents.length ? (\r\n            <ErrorBoundary context=\"Left Panel\">\r\n              <SidePanelWithServices\r\n                side=\"left\"\r\n                activeTabIndex={leftPanelDefaultClosed ? null : 0}\r\n                tabs={leftPanelComponents}\r\n                servicesManager={servicesManager}\r\n              />\r\n            </ErrorBoundary>\r\n          ) : null}\r\n          {/* TOOLBAR + GRID */}\r\n          <div className=\"flex h-full flex-1 flex-col\">\r\n            <div className=\"relative flex h-full flex-1 items-center justify-center overflow-hidden bg-black\">\r\n              <ErrorBoundary context=\"Grid\">\r\n                <ViewportGridComp\r\n                  servicesManager={servicesManager}\r\n                  viewportComponents={viewportComponents}\r\n                  commandsManager={commandsManager}\r\n                />\r\n              </ErrorBoundary>\r\n            </div>\r\n          </div>\r\n          {rightPanelComponents.length ? (\r\n            <ErrorBoundary context=\"Right Panel\">\r\n              <SidePanelWithServices\r\n                side=\"right\"\r\n                activeTabIndex={rightPanelDefaultClosed ? null : 0}\r\n                tabs={rightPanelComponents}\r\n                servicesManager={servicesManager}\r\n              />\r\n            </ErrorBoundary>\r\n          ) : null}\r\n        </React.Fragment>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nViewerLayout.propTypes = {\r\n  // From extension module params\r\n  extensionManager: PropTypes.shape({\r\n    getModuleEntry: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  commandsManager: PropTypes.instanceOf(CommandsManager),\r\n  servicesManager: PropTypes.instanceOf(ServicesManager),\r\n  // From modes\r\n  leftPanels: PropTypes.array,\r\n  rightPanels: PropTypes.array,\r\n  leftPanelDefaultClosed: PropTypes.bool.isRequired,\r\n  rightPanelDefaultClosed: PropTypes.bool.isRequired,\r\n  /** Responsible for rendering our grid of viewports; provided by consuming application */\r\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\r\n  viewports: PropTypes.array,\r\n};\r\n\r\nexport default ViewerLayout;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StudyBrowser, useImageViewer, useViewportGrid } from '@ohif/ui';\r\nimport { utils } from '@ohif/core';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst { sortStudyInstances, formatDate } = utils;\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction PanelStudyBrowser({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const { hangingProtocolService, displaySetService, uiNotificationService } =\r\n    servicesManager.services;\r\n  const navigate = useNavigate();\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\r\n  const [activeTabName, setActiveTabName] = useState('primary');\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportId = activeViewportId;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message: 'The selected display sets could not be added to the viewport.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      if (!qidoForStudyUID?.length) {\r\n        navigate('/notfoundstudy', '_self');\r\n        throw new Error('Invalid study URL');\r\n      }\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n  }, [StudyInstanceUIDs, dataSource, getStudiesForPatientByMRN, navigate]);\r\n\r\n  // // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\r\n      if (!imageId || displaySet?.unsupported) {\r\n        return;\r\n      }\r\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\r\n\r\n      setThumbnailImageSrcMap(prevState => {\r\n        return { ...prevState, ...newImageSrcEntry };\r\n      });\r\n    });\r\n  }, [StudyInstanceUIDs, dataSource, displaySetService, getImageSrc]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    // TODO: Are we sure `activeDisplaySets` will always be accurate?\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n    const mappedDisplaySets = _mapDisplaySets(currentDisplaySets, thumbnailImageSrcMap);\r\n    sortStudyInstances(mappedDisplaySets);\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n  }, [StudyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\r\n          if (displaySet?.unsupported) {\r\n            return;\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (!imageId) {\r\n            return;\r\n          }\r\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n          newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\r\n            imageId,\r\n            dSet.initialViewport\r\n          );\r\n\r\n          setThumbnailImageSrcMap(prevState => {\r\n            return { ...prevState, ...newImageSrcEntry };\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n    };\r\n  }, [getImageSrc, dataSource, displaySetService]);\r\n\r\n  useEffect(() => {\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(changedDisplaySets, thumbnailImageSrcMap);\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      () => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          displaySetService.getActiveDisplaySets(),\r\n          thumbnailImageSrcMap\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\r\n    };\r\n  }, [StudyInstanceUIDs, thumbnailImageSrcMap, displaySetService]);\r\n\r\n  const tabs = _createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? // eslint-disable-next-line prettier/prettier\r\n        [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\r\n    }\r\n  }\r\n\r\n  const activeDisplaySetInstanceUIDs = viewports.get(activeViewportId)?.displaySetInstanceUIDs;\r\n\r\n  return (\r\n    <StudyBrowser\r\n      tabs={tabs}\r\n      servicesManager={servicesManager}\r\n      activeTabName={activeTabName}\r\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n      activeDisplaySetInstanceUIDs={activeDisplaySetInstanceUIDs}\r\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n      onClickStudy={_handleStudyClick}\r\n      onClickTab={clickedTabName => {\r\n        setActiveTabName(clickedTabName);\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowser.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PanelStudyBrowser;\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(displaySets, thumbnailImageSrcMap) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds);\r\n\r\n      const array =\r\n        componentType === 'thumbnail' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n      array.push({\r\n        displaySetInstanceUID: ds.displaySetInstanceUID,\r\n        description: ds.SeriesDescription || '',\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: ds.SeriesDate,\r\n        seriesTime: ds.SeriesTime,\r\n        numInstances: ds.numImageFrames,\r\n        countIcon: ds.countIcon,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        messages: ds.messages,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID: ds.displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n      });\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\r\n\r\nfunction _getComponentType(ds) {\r\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\r\n    // TODO probably others.\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnail';\r\n}\r\n\r\n/**\r\n *\r\n * @param {string[]} primaryStudyInstanceUIDs\r\n * @param {object[]} studyDisplayList\r\n * @param {string} studyDisplayList.studyInstanceUid\r\n * @param {string} studyDisplayList.date\r\n * @param {string} studyDisplayList.description\r\n * @param {string} studyDisplayList.modalities\r\n * @param {number} studyDisplayList.numInstances\r\n * @param {object[]} displaySets\r\n * @returns tabs - The prop object expected by the StudyBrowser component\r\n */\r\nfunction _createStudyBrowserTabs(primaryStudyInstanceUIDs, studyDisplayList, displaySets) {\r\n  const primaryStudies = [];\r\n  const recentStudies = [];\r\n  const allStudies = [];\r\n\r\n  studyDisplayList.forEach(study => {\r\n    const displaySetsForStudy = displaySets.filter(\r\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\r\n    );\r\n    const tabStudy = Object.assign({}, study, {\r\n      displaySets: displaySetsForStudy,\r\n    });\r\n\r\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\r\n      primaryStudies.push(tabStudy);\r\n    } else {\r\n      // TODO: Filter allStudies to dates within one year of current date\r\n      recentStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    }\r\n  });\r\n\r\n  const tabs = [\r\n    {\r\n      name: 'primary',\r\n      label: 'Primary',\r\n      studies: primaryStudies,\r\n    },\r\n    {\r\n      name: 'recent',\r\n      label: 'Recent',\r\n      studies: recentStudies,\r\n    },\r\n    {\r\n      name: 'all',\r\n      label: 'All',\r\n      studies: allStudies,\r\n    },\r\n  ];\r\n\r\n  return tabs;\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\nexport default getImageSrcFromImageId;\r\n","async function getStudiesForPatientByMRN(dataSource, qidoForStudyUID) {\r\n  if (qidoForStudyUID && qidoForStudyUID.length && qidoForStudyUID[0].mrn) {\r\n    return dataSource.query.studies.search({\r\n      patientId: qidoForStudyUID[0].mrn,\r\n    });\r\n  }\r\n  console.log('No mrn found for', qidoForStudyUID);\r\n  return qidoForStudyUID;\r\n}\r\n\r\nexport default getStudiesForPatientByMRN;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  // TODO: is this already short-circuited by the map of Retrieve promises?\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowser from './PanelStudyBrowser';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport getStudiesForPatientByMRN from './getStudiesForPatientByMRN';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowser({ commandsManager, extensionManager, servicesManager }) {\r\n  // TODO: This should be made available a different way; route should have\r\n  // already determined our datasource\r\n  const dataSource = extensionManager.getDataSources()[0];\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = _createGetImageSrcFromImageIdFn(extensionManager);\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowser\r\n      servicesManager={servicesManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowser.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowser;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { LegacyButton, LegacyButtonGroup } from '@ohif/ui';\r\n\r\nfunction ActionButtons({ onExportClick, onCreateReportClick }) {\r\n  const { t } = useTranslation('MeasurementTable');\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LegacyButtonGroup\r\n        color=\"black\"\r\n        size=\"inherit\"\r\n      >\r\n        {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\r\n        <LegacyButton\r\n          className=\"px-2 py-2 text-base\"\r\n          onClick={onExportClick}\r\n        >\r\n          {t('Export CSV')}\r\n        </LegacyButton>\r\n        <LegacyButton\r\n          className=\"px-2 py-2 text-base\"\r\n          onClick={onCreateReportClick}\r\n        >\r\n          {t('Create Report')}\r\n        </LegacyButton>\r\n      </LegacyButtonGroup>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nActionButtons.propTypes = {\r\n  onExportClick: PropTypes.func,\r\n  onCreateReportClick: PropTypes.func,\r\n};\r\n\r\nActionButtons.defaultProps = {\r\n  onExportClick: () => alert('Export'),\r\n  onCreateReportClick: () => alert('Create Report'),\r\n};\r\n\r\nexport default ActionButtons;\r\n","import React from 'react';\r\n\r\nimport { ButtonEnums, Dialog, Input, Select } from '@ohif/ui';\r\n\r\nexport const CREATE_REPORT_DIALOG_RESPONSE = {\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n};\r\n\r\nexport default function CreateReportDialogPrompt(uiDialogService, { extensionManager }) {\r\n  return new Promise(function (resolve, reject) {\r\n    let dialogId = undefined;\r\n\r\n    const _handleClose = () => {\r\n      // Dismiss dialog\r\n      uiDialogService.dismiss({ id: dialogId });\r\n      // Notify of cancel action\r\n      resolve({\r\n        action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\r\n        value: undefined,\r\n        dataSourceName: undefined,\r\n      });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} param0.action - value of action performed\r\n     * @param {string} param0.value - value from input field\r\n     */\r\n    const _handleFormSubmit = ({ action, value }) => {\r\n      uiDialogService.dismiss({ id: dialogId });\r\n      switch (action.id) {\r\n        case 'save':\r\n          resolve({\r\n            action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\r\n            value: value.label,\r\n            dataSourceName: value.dataSourceName,\r\n          });\r\n          break;\r\n        case 'cancel':\r\n          resolve({\r\n            action: CREATE_REPORT_DIALOG_RESPONSE.CANCEL,\r\n            value: undefined,\r\n            dataSourceName: undefined,\r\n          });\r\n          break;\r\n      }\r\n    };\r\n\r\n    const dataSourcesOpts = Object.keys(extensionManager.dataSourceMap)\r\n      .filter(ds => {\r\n        const configuration = extensionManager.dataSourceDefs[ds]?.configuration;\r\n        const supportsStow = configuration?.supportsStow ?? configuration?.wadoRoot;\r\n        return supportsStow;\r\n      })\r\n      .map(ds => {\r\n        return {\r\n          value: ds,\r\n          label: ds,\r\n          placeHolder: ds,\r\n        };\r\n      });\r\n\r\n    dialogId = uiDialogService.create({\r\n      centralize: true,\r\n      isDraggable: false,\r\n      content: Dialog,\r\n      useLastPosition: false,\r\n      showOverlay: true,\r\n      contentProps: {\r\n        title: 'Create Report',\r\n        value: {\r\n          label: '',\r\n          dataSourceName: extensionManager.activeDataSource,\r\n        },\r\n        noCloseButton: true,\r\n        onClose: _handleClose,\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        // TODO: Should be on button press...\r\n        onSubmit: _handleFormSubmit,\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              uiDialogService.dismiss({ id: dialogId });\r\n              resolve({\r\n                action: CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT,\r\n                value: value.label,\r\n              });\r\n            }\r\n          };\r\n          return (\r\n            <>\r\n              {dataSourcesOpts.length > 1 && window.config?.allowMultiSelectExport && (\r\n                <div>\r\n                  <label className=\"text-[14px] leading-[1.2] text-white\">Data Source</label>\r\n                  <Select\r\n                    closeMenuOnSelect={true}\r\n                    className=\"border-primary-main  mt-2 bg-black\"\r\n                    options={dataSourcesOpts}\r\n                    placeholder={\r\n                      dataSourcesOpts.find(option => option.value === value.dataSourceName)\r\n                        .placeHolder\r\n                    }\r\n                    value={value.dataSourceName}\r\n                    onChange={evt => {\r\n                      setValue(v => ({ ...v, dataSourceName: evt.value }));\r\n                    }}\r\n                    isClearable={false}\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className=\"mt-3\">\r\n                <Input\r\n                  autoFocus\r\n                  label=\"Enter the report name\"\r\n                  labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n                  className=\"border-primary-main bg-black\"\r\n                  type=\"text\"\r\n                  value={value.label}\r\n                  onChange={onChangeHandler}\r\n                  onKeyPress={onKeyPressHandler}\r\n                  required\r\n                />\r\n              </div>\r\n            </>\r\n          );\r\n        },\r\n      },\r\n    });\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\n\r\n/**\r\n *\r\n * @param {*} servicesManager\r\n */\r\nasync function createReportAsync({ servicesManager, getReport, reportType = 'measurement' }) {\r\n  const { displaySetService, uiNotificationService, uiDialogService } = servicesManager.services;\r\n  const loadingDialogId = uiDialogService.create({\r\n    showOverlay: true,\r\n    isDraggable: false,\r\n    centralize: true,\r\n    content: Loading,\r\n  });\r\n\r\n  try {\r\n    const naturalizedReport = await getReport();\r\n\r\n    // The \"Mode\" route listens for DicomMetadataStore changes\r\n    // When a new instance is added, it listens and\r\n    // automatically calls makeDisplaySets\r\n    DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n    const displaySet = displaySetService.getMostRecentDisplaySet();\r\n\r\n    const displaySetInstanceUID = displaySet.displaySetInstanceUID;\r\n\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: `${reportType} saved successfully`,\r\n      type: 'success',\r\n    });\r\n\r\n    return [displaySetInstanceUID];\r\n  } catch (error) {\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: error.message || `Failed to store ${reportType}`,\r\n      type: 'error',\r\n    });\r\n  } finally {\r\n    uiDialogService.dismiss({ id: loadingDialogId });\r\n  }\r\n}\r\n\r\nfunction Loading() {\r\n  return <div className=\"text-primary-active\">Loading...</div>;\r\n}\r\n\r\nexport default createReportAsync;\r\n","const MIN_SR_SERIES_NUMBER = 4700;\r\n\r\nexport default function getNextSRSeriesNumber(displaySetService) {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\r\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\r\n\r\n  return maxSeriesNumber + 1;\r\n}\r\n","import { DisplaySetService, Types } from '@ohif/core';\r\n\r\nimport getNextSRSeriesNumber from './getNextSRSeriesNumber';\r\n\r\n/**\r\n * Find an SR having the same series description.\r\n * This is used by the store service in order to store DICOM SR's having the\r\n * same Series Description into a single series under consecutive instance numbers\r\n * That way, they are all organized as a set and could have tools to view\r\n * \"prior\" SR instances.\r\n *\r\n * @param SeriesDescription - is the description to look for\r\n * @param displaySetService - the display sets to search for DICOM SR in\r\n * @returns SeriesMetadata from a DICOM SR having the same series description\r\n */\r\nexport default function findSRWithSameSeriesDescription(\r\n  SeriesDescription: string,\r\n  displaySetService: DisplaySetService\r\n): Types.SeriesMetadata {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const sameSeries = srDisplaySets.find(ds => ds.SeriesDescription === SeriesDescription);\r\n  if (sameSeries) {\r\n    console.log('Storing to same series', sameSeries);\r\n    const { instance } = sameSeries;\r\n    const { SeriesInstanceUID, SeriesDescription, SeriesDate, SeriesTime, SeriesNumber, Modality } =\r\n      instance;\r\n    return {\r\n      SeriesInstanceUID,\r\n      SeriesDescription,\r\n      SeriesDate,\r\n      SeriesTime,\r\n      SeriesNumber,\r\n      Modality,\r\n      InstanceNumber: sameSeries.instances.length + 1,\r\n    };\r\n  }\r\n\r\n  const SeriesNumber = getNextSRSeriesNumber(displaySetService);\r\n  return { SeriesDescription, SeriesNumber };\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { utils, ServicesManager } from '@ohif/core';\r\nimport { MeasurementTable, Dialog, Input, useViewportGrid, ButtonEnums } from '@ohif/ui';\r\nimport ActionButtons from './ActionButtons';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport createReportDialogPrompt, {\r\n  CREATE_REPORT_DIALOG_RESPONSE,\r\n} from './createReportDialogPrompt';\r\nimport createReportAsync from '../Actions/createReportAsync';\r\nimport findSRWithSameSeriesDescription from '../utils/findSRWithSameSeriesDescription';\r\n\r\nconst { downloadCSVReport } = utils;\r\n\r\nexport default function PanelMeasurementTable({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}): React.FunctionComponent {\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const { measurementService, uiDialogService, uiNotificationService, displaySetService } = (\r\n    servicesManager as ServicesManager\r\n  ).services;\r\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const debouncedSetDisplayMeasurements = debounce(setDisplayMeasurements, 100);\r\n    // ~~ Initial\r\n    setDisplayMeasurements(_getMappedMeasurements(measurementService));\r\n\r\n    // ~~ Subscription\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\r\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\r\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, () => {\r\n          debouncedSetDisplayMeasurements(_getMappedMeasurements(measurementService));\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n      debouncedSetDisplayMeasurements.cancel();\r\n    };\r\n  }, []);\r\n\r\n  async function exportReport() {\r\n    const measurements = measurementService.getMeasurements();\r\n\r\n    downloadCSVReport(measurements, measurementService);\r\n  }\r\n\r\n  async function clearMeasurements() {\r\n    measurementService.clearMeasurements();\r\n  }\r\n\r\n  async function createReport(): Promise<any> {\r\n    // filter measurements that are added to the active study\r\n    const activeViewport = viewports.get(activeViewportId);\r\n    const measurements = measurementService.getMeasurements();\r\n    const displaySet = displaySetService.getDisplaySetByUID(\r\n      activeViewport.displaySetInstanceUIDs[0]\r\n    );\r\n    const trackedMeasurements = measurements.filter(\r\n      m => displaySet.StudyInstanceUID === m.referenceStudyUID\r\n    );\r\n\r\n    if (trackedMeasurements.length <= 0) {\r\n      uiNotificationService.show({\r\n        title: 'No Measurements',\r\n        message: 'No Measurements are added to the current Study.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\r\n      extensionManager,\r\n    });\r\n\r\n    if (promptResult.action === CREATE_REPORT_DIALOG_RESPONSE.CREATE_REPORT) {\r\n      const dataSources = extensionManager.getDataSources(promptResult.dataSourceName);\r\n      const dataSource = dataSources[0];\r\n\r\n      const SeriesDescription =\r\n        // isUndefinedOrEmpty\r\n        promptResult.value === undefined || promptResult.value === ''\r\n          ? 'Research Derived Series' // default\r\n          : promptResult.value; // provided value\r\n\r\n      // Reuse an existing series having the same series description to avoid\r\n      // creating too many series instances.\r\n      const options = findSRWithSameSeriesDescription(SeriesDescription, displaySetService);\r\n\r\n      const getReport = async () => {\r\n        return commandsManager.runCommand(\r\n          'storeMeasurements',\r\n          {\r\n            measurementData: trackedMeasurements,\r\n            dataSource,\r\n            additionalFindingTypes: ['ArrowAnnotate'],\r\n            options,\r\n          },\r\n          'CORNERSTONE_STRUCTURED_REPORT'\r\n        );\r\n      };\r\n\r\n      return createReportAsync({ servicesManager, getReport });\r\n    }\r\n  }\r\n\r\n  const jumpToImage = ({ uid, isActive }) => {\r\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\r\n\r\n    onMeasurementItemClickHandler({ uid, isActive });\r\n  };\r\n\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\r\n    const measurement = measurementService.getMeasurement(uid);\r\n    //Todo: why we are jumping to image?\r\n    // jumpToImage({ id, isActive });\r\n\r\n    const onSubmitHandler = ({ action, value }) => {\r\n      switch (action.id) {\r\n        case 'save': {\r\n          measurementService.update(\r\n            uid,\r\n            {\r\n              ...measurement,\r\n              ...value,\r\n            },\r\n            true\r\n          );\r\n        }\r\n      }\r\n      uiDialogService.dismiss({ id: 'enter-annotation' });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'enter-annotation',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Annotation',\r\n        noCloseButton: true,\r\n        value: { label: measurement.label || '' },\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              onSubmitHandler({ value, action: { id: 'save' } });\r\n            }\r\n          };\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              id=\"annotation\"\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={onChangeHandler}\r\n              onKeyPress={onKeyPressHandler}\r\n            />\r\n          );\r\n        },\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\r\n    if (!isActive) {\r\n      const measurements = [...displayMeasurements];\r\n      const measurement = measurements.find(m => m.uid === uid);\r\n\r\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\r\n      measurement.isActive = true;\r\n      setDisplayMeasurements(measurements);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        data-cy={'measurements-panel'}\r\n      >\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          servicesManager={servicesManager}\r\n          data={displayMeasurements}\r\n          onClick={jumpToImage}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n      </div>\r\n      <div className=\"flex justify-center p-4\">\r\n        <ActionButtons\r\n          onExportClick={exportReport}\r\n          onClearMeasurementsClick={clearMeasurements}\r\n          onCreateReportClick={createReport}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelMeasurementTable.propTypes = {\r\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\r\n};\r\n\r\nfunction _getMappedMeasurements(measurementService) {\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const mappedMeasurements = measurements.map((m, index) =>\r\n    _mapMeasurementToDisplay(m, index, measurementService.VALUE_TYPES)\r\n  );\r\n\r\n  return mappedMeasurements;\r\n}\r\n\r\n/**\r\n * Map the measurements to the display text.\r\n * Adds finding and site information to the displayText and/or label,\r\n * and provides as 'displayText' and 'label', while providing the original\r\n * values as baseDisplayText and baseLabel\r\n */\r\nfunction _mapMeasurementToDisplay(measurement, index, types) {\r\n  const {\r\n    displayText: baseDisplayText,\r\n    uid,\r\n    label: baseLabel,\r\n    type,\r\n    selected,\r\n    findingSites,\r\n    finding,\r\n  } = measurement;\r\n\r\n  const firstSite = findingSites?.[0];\r\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\r\n  let displayText = baseDisplayText || [];\r\n  if (findingSites) {\r\n    const siteText = [];\r\n    findingSites.forEach(site => {\r\n      if (site?.text !== label) {\r\n        siteText.push(site.text);\r\n      }\r\n    });\r\n    displayText = [...siteText, ...displayText];\r\n  }\r\n  if (finding && finding?.text !== label) {\r\n    displayText = [finding.text, ...displayText];\r\n  }\r\n\r\n  return {\r\n    uid,\r\n    label,\r\n    baseLabel,\r\n    measurementType: type,\r\n    displayText,\r\n    baseDisplayText,\r\n    isActive: selected,\r\n    finding,\r\n    findingSites,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { WrappedPanelStudyBrowser, PanelMeasurementTable } from './Panels';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\r\n  const wrappedMeasurementPanel = () => {\r\n    return (\r\n      <PanelMeasurementTable\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: 'Studies',\r\n      component: WrappedPanelStudyBrowser.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n    {\r\n      name: 'measure',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      secondaryLabel: 'Measurements',\r\n      component: wrappedMeasurementPanel,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { vec3 } from 'gl-matrix';\r\nimport toNumber from '@ohif/core/src/utils/toNumber';\r\nimport { _getPerpendicularDistance } from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\nimport calculateScanAxisNormal from '../calculateScanAxisNormal';\r\n\r\n/**\r\n * Checks if there is a position shift between consecutive frames\r\n * @param {*} previousPosition\r\n * @param {*} actualPosition\r\n * @param {*} scanAxisNormal\r\n * @param {*} averageSpacingBetweenFrames\r\n * @returns\r\n */\r\nfunction _checkSeriesPositionShift(\r\n  previousPosition,\r\n  actualPosition,\r\n  scanAxisNormal,\r\n  averageSpacingBetweenFrames\r\n) {\r\n  // predicted position should be the previous position added by the multiplication\r\n  // of the scanAxisNormal and the average spacing between frames\r\n  const predictedPosition = vec3.scaleAndAdd(\r\n    vec3.create(),\r\n    previousPosition,\r\n    scanAxisNormal,\r\n    averageSpacingBetweenFrames\r\n  );\r\n  return vec3.distance(actualPosition, predictedPosition) > averageSpacingBetweenFrames;\r\n}\r\n\r\n/**\r\n * Checks if a series has position shifts between consecutive frames\r\n * @param {*} instances\r\n * @returns\r\n */\r\nexport default function areAllImagePositionsEqual(instances: Array<any>): boolean {\r\n  if (!instances?.length) {\r\n    return false;\r\n  }\r\n  const firstImageOrientationPatient = toNumber(instances[0].ImageOrientationPatient);\r\n  if (!firstImageOrientationPatient) {\r\n    return false;\r\n  }\r\n  const scanAxisNormal = calculateScanAxisNormal(firstImageOrientationPatient);\r\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\r\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\r\n\r\n  const averageSpacingBetweenFrames =\r\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\r\n\r\n  let previousImagePositionPatient = firstImagePositionPatient;\r\n  for (let i = 1; i < instances.length; i++) {\r\n    const instance = instances[i];\r\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\r\n\r\n    if (\r\n      _checkSeriesPositionShift(\r\n        previousImagePositionPatient,\r\n        imagePositionPatient,\r\n        scanAxisNormal,\r\n        averageSpacingBetweenFrames\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n    previousImagePositionPatient = imagePositionPatient;\r\n  }\r\n  return true;\r\n}\r\n","import { vec3 } from 'gl-matrix';\r\n\r\n/**\r\n * Calculates the scanAxisNormal based on a image orientation vector extract from a frame\r\n * @param {*} imageOrientation\r\n * @returns\r\n */\r\nexport default function calculateScanAxisNormal(imageOrientation) {\r\n  const rowCosineVec = vec3.fromValues(\r\n    imageOrientation[0],\r\n    imageOrientation[1],\r\n    imageOrientation[2]\r\n  );\r\n  const colCosineVec = vec3.fromValues(\r\n    imageOrientation[3],\r\n    imageOrientation[4],\r\n    imageOrientation[5]\r\n  );\r\n  return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\r\n}\r\n","import areAllImageDimensionsEqual from './areAllImageDimensionsEqual';\r\nimport areAllImageComponentsEqual from './areAllImageComponentsEqual';\r\nimport areAllImageOrientationsEqual from './areAllImageOrientationsEqual';\r\nimport areAllImagePositionsEqual from './areAllImagePositionsEqual';\r\nimport areAllImageSpacingEqual from './areAllImageSpacingEqual';\r\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\r\n\r\n/**\r\n * Runs various checks in a single frame series\r\n * @param {*} instances\r\n * @param {*} warnings\r\n */\r\nexport default function checkSingleFrames(\r\n  instances: Array<any>,\r\n  messages: DisplaySetMessageList\r\n): void {\r\n  if (instances.length > 2) {\r\n    if (!areAllImageDimensionsEqual(instances)) {\r\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_DIMENSIONS);\r\n    }\r\n\r\n    if (!areAllImageComponentsEqual(instances)) {\r\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_COMPONENTS);\r\n    }\r\n\r\n    if (!areAllImageOrientationsEqual(instances)) {\r\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_ORIENTATIONS);\r\n    }\r\n\r\n    if (!areAllImagePositionsEqual(instances)) {\r\n      messages.addMessage(DisplaySetMessage.CODES.INCONSISTENT_POSITION_INFORMATION);\r\n    }\r\n    areAllImageSpacingEqual(instances, messages);\r\n  }\r\n}\r\n","import toNumber from '@ohif/core/src/utils/toNumber';\r\n\r\n/**\r\n * Check if the frames in a series has different dimensions\r\n * @param {*} instances\r\n * @returns\r\n */\r\nexport default function areAllImageDimensionsEqual(instances: Array<any>): boolean {\r\n  if (!instances?.length) {\r\n    return false;\r\n  }\r\n  const firstImage = instances[0];\r\n  const firstImageRows = toNumber(firstImage.Rows);\r\n  const firstImageColumns = toNumber(firstImage.Columns);\r\n\r\n  for (let i = 1; i < instances.length; i++) {\r\n    const instance = instances[i];\r\n    const { Rows, Columns } = instance;\r\n\r\n    if (Rows !== firstImageRows || Columns !== firstImageColumns) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import toNumber from '@ohif/core/src/utils/toNumber';\r\n\r\n/**\r\n * Check if all voxels in series images has same number of components (samplesPerPixel)\r\n * @param {*} instances\r\n * @returns\r\n */\r\nexport default function areAllImageComponentsEqual(instances: Array<any>): boolean {\r\n  if (!instances?.length) {\r\n    return false;\r\n  }\r\n  const firstImage = instances[0];\r\n  const firstImageSamplesPerPixel = toNumber(firstImage.SamplesPerPixel);\r\n\r\n  for (let i = 1; i < instances.length; i++) {\r\n    const instance = instances[i];\r\n    const { SamplesPerPixel } = instance;\r\n\r\n    if (SamplesPerPixel !== firstImageSamplesPerPixel) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import toNumber from '@ohif/core/src/utils/toNumber';\r\nimport { _isSameOrientation } from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\n\r\n/**\r\n * Check is the series has frames with different orientations\r\n * @param {*} instances\r\n * @returns\r\n */\r\nexport default function areAllImageOrientationsEqual(instances: Array<any>): boolean {\r\n  if (!instances?.length) {\r\n    return false;\r\n  }\r\n  const firstImage = instances[0];\r\n  const firstImageOrientationPatient = toNumber(firstImage.ImageOrientationPatient);\r\n\r\n  for (let i = 1; i < instances.length; i++) {\r\n    const instance = instances[i];\r\n    const imageOrientationPatient = toNumber(instance.ImageOrientationPatient);\r\n\r\n    if (!_isSameOrientation(imageOrientationPatient, firstImageOrientationPatient)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import {\r\n  _getPerpendicularDistance,\r\n  _getSpacingIssue,\r\n  reconstructionIssues,\r\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\nimport { DisplaySetMessage } from '@ohif/core';\r\nimport toNumber from '@ohif/core/src/utils/toNumber';\r\nimport { DisplaySetMessageList } from '@ohif/core';\r\n\r\n/**\r\n * Checks if series has spacing issues\r\n * @param {*} instances\r\n * @param {*} warnings\r\n */\r\nexport default function areAllImageSpacingEqual(\r\n  instances: Array<any>,\r\n  messages: DisplaySetMessageList\r\n): void {\r\n  if (!instances?.length) {\r\n    return;\r\n  }\r\n  const firstImagePositionPatient = toNumber(instances[0].ImagePositionPatient);\r\n  if (!firstImagePositionPatient) {\r\n    return;\r\n  }\r\n  const lastIpp = toNumber(instances[instances.length - 1].ImagePositionPatient);\r\n\r\n  const averageSpacingBetweenFrames =\r\n    _getPerpendicularDistance(firstImagePositionPatient, lastIpp) / (instances.length - 1);\r\n\r\n  let previousImagePositionPatient = firstImagePositionPatient;\r\n\r\n  const issuesFound = [];\r\n  for (let i = 1; i < instances.length; i++) {\r\n    const instance = instances[i];\r\n    const imagePositionPatient = toNumber(instance.ImagePositionPatient);\r\n\r\n    const spacingBetweenFrames = _getPerpendicularDistance(\r\n      imagePositionPatient,\r\n      previousImagePositionPatient\r\n    );\r\n\r\n    const spacingIssue = _getSpacingIssue(spacingBetweenFrames, averageSpacingBetweenFrames);\r\n\r\n    if (spacingIssue) {\r\n      const issue = spacingIssue.issue;\r\n\r\n      // avoid multiple warning of the same thing\r\n      if (!issuesFound.includes(issue)) {\r\n        issuesFound.push(issue);\r\n        if (issue === reconstructionIssues.MISSING_FRAMES) {\r\n          messages.addMessage(DisplaySetMessage.CODES.MISSING_FRAMES);\r\n        } else if (issue === reconstructionIssues.IRREGULAR_SPACING) {\r\n          messages.addMessage(DisplaySetMessage.CODES.IRREGULAR_SPACING);\r\n        }\r\n      }\r\n      // we just want to find issues not how many\r\n      if (issuesFound.length > 1) {\r\n        break;\r\n      }\r\n    }\r\n    previousImagePositionPatient = imagePositionPatient;\r\n  }\r\n}\r\n","import sortInstancesByPosition from '@ohif/core/src/utils/sortInstancesByPosition';\r\nimport { constructableModalities } from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\r\nimport checkMultiFrame from './utils/validations/checkMultiframe';\r\nimport checkSingleFrames from './utils/validations/checkSingleFrames';\r\n/**\r\n * Checks if a series is reconstructable to a 3D volume.\r\n *\r\n * @param {Object[]} instances An array of `OHIFInstanceMetadata` objects.\r\n */\r\nexport default function getDisplaySetMessages(\r\n  instances: Array<any>,\r\n  isReconstructable: boolean\r\n): DisplaySetMessageList {\r\n  const messages = new DisplaySetMessageList();\r\n  if (!instances.length) {\r\n    messages.addMessage(DisplaySetMessage.CODES.NO_VALID_INSTANCES);\r\n    return;\r\n  }\r\n\r\n  const firstInstance = instances[0];\r\n  const { Modality, ImageType, NumberOfFrames } = firstInstance;\r\n  // Due to current requirements, LOCALIZER series doesn't have any messages\r\n  if (ImageType?.includes('LOCALIZER')) {\r\n    return messages;\r\n  }\r\n\r\n  if (!constructableModalities.includes(Modality)) {\r\n    return messages;\r\n  }\r\n\r\n  const isMultiframe = NumberOfFrames > 1;\r\n  // Can't reconstruct if all instances don't have the ImagePositionPatient.\r\n  if (!isMultiframe && !instances.every(instance => instance.ImagePositionPatient)) {\r\n    messages.addMessage(DisplaySetMessage.CODES.NO_POSITION_INFORMATION);\r\n  }\r\n\r\n  const sortedInstances = sortInstancesByPosition(instances);\r\n\r\n  isMultiframe\r\n    ? checkMultiFrame(sortedInstances[0], messages)\r\n    : checkSingleFrames(sortedInstances, messages);\r\n\r\n  if (!isReconstructable) {\r\n    messages.addMessage(DisplaySetMessage.CODES.NOT_RECONSTRUCTABLE);\r\n  }\r\n  return messages;\r\n}\r\n","import {\r\n  hasPixelMeasurements,\r\n  hasOrientation,\r\n  hasPosition,\r\n} from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\r\n\r\n/**\r\n * Check various multi frame issues. It calls OHIF core functions\r\n * @param {*} multiFrameInstance\r\n * @param {*} warnings\r\n */\r\nexport default function checkMultiFrame(multiFrameInstance, messages: DisplaySetMessageList): void {\r\n  if (!hasPixelMeasurements(multiFrameInstance)) {\r\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_PIXEL_MEASUREMENTS);\r\n  }\r\n\r\n  if (!hasOrientation(multiFrameInstance)) {\r\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_ORIENTATION);\r\n  }\r\n\r\n  if (!hasPosition(multiFrameInstance)) {\r\n    messages.addMessage(DisplaySetMessage.CODES.MULTIFRAME_NO_POSITION_INFORMATION);\r\n  }\r\n}\r\n","import ImageSet from '@ohif/core/src/classes/ImageSet';\r\nimport { DisplaySetMessage, DisplaySetMessageList } from '@ohif/core';\r\n/**\r\n * Default handler for a instance list with an unsupported sopClassUID\r\n */\r\nexport default function getDisplaySetsFromUnsupportedSeries(instances) {\r\n  const imageSet = new ImageSet(instances);\r\n  const messages = new DisplaySetMessageList();\r\n  messages.addMessage(DisplaySetMessage.CODES.UNSUPPORTED_DISPLAYSET);\r\n  const instance = instances[0];\r\n\r\n  imageSet.setAttributes({\r\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\r\n    SeriesDate: instance.SeriesDate,\r\n    SeriesTime: instance.SeriesTime,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    SeriesNumber: instance.SeriesNumber || 0,\r\n    FrameRate: instance.FrameTime,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    SeriesDescription: instance.SeriesDescription || '',\r\n    Modality: instance.Modality,\r\n    numImageFrames: instances.length,\r\n    unsupported: true,\r\n    SOPClassHandlerId: 'unsupported',\r\n    isReconstructable: false,\r\n    messages,\r\n  });\r\n  return [imageSet];\r\n}\r\n","import { isImage } from '@ohif/core/src/utils/isImage';\r\nimport sopClassDictionary from '@ohif/core/src/utils/sopClassDictionary';\r\nimport ImageSet from '@ohif/core/src/classes/ImageSet';\r\nimport isDisplaySetReconstructable from '@ohif/core/src/utils/isDisplaySetReconstructable';\r\nimport { id } from './id';\r\nimport getDisplaySetMessages from './getDisplaySetMessages';\r\nimport getDisplaySetsFromUnsupportedSeries from './getDisplaySetsFromUnsupportedSeries';\r\n\r\nconst sopClassHandlerName = 'stack';\r\n\r\nconst isMultiFrame = instance => {\r\n  return instance.NumberOfFrames > 1;\r\n};\r\n\r\nconst makeDisplaySet = instances => {\r\n  const instance = instances[0];\r\n  const imageSet = new ImageSet(instances);\r\n\r\n  const { value: isReconstructable, averageSpacingBetweenFrames } =\r\n    isDisplaySetReconstructable(instances);\r\n  // set appropriate attributes to image set...\r\n  const messages = getDisplaySetMessages(instances, isReconstructable);\r\n\r\n  imageSet.setAttributes({\r\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\r\n    SeriesDate: instance.SeriesDate,\r\n    SeriesTime: instance.SeriesTime,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    SeriesNumber: instance.SeriesNumber || 0,\r\n    FrameRate: instance.FrameTime,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    SeriesDescription: instance.SeriesDescription || '',\r\n    Modality: instance.Modality,\r\n    isMultiFrame: isMultiFrame(instance),\r\n    countIcon: isReconstructable ? 'icon-mpr' : undefined,\r\n    numImageFrames: instances.length,\r\n    SOPClassHandlerId: `${id}.sopClassHandlerModule.${sopClassHandlerName}`,\r\n    isReconstructable,\r\n    messages,\r\n    averageSpacingBetweenFrames: averageSpacingBetweenFrames || null,\r\n  });\r\n\r\n  // Sort the images in this series if needed\r\n  const shallSort = true; //!OHIF.utils.ObjectPath.get(Meteor, 'settings.public.ui.sortSeriesByIncomingOrder');\r\n  if (shallSort) {\r\n    imageSet.sortBy((a, b) => {\r\n      // Sort by InstanceNumber (0020,0013)\r\n      return (parseInt(a.InstanceNumber) || 0) - (parseInt(b.InstanceNumber) || 0);\r\n    });\r\n  }\r\n\r\n  // Include the first image instance number (after sorted)\r\n  /*imageSet.setAttribute(\r\n    'instanceNumber',\r\n    imageSet.getImage(0).InstanceNumber\r\n  );*/\r\n\r\n  /*const isReconstructable = isDisplaySetReconstructable(series, instances);\r\n\r\n  imageSet.isReconstructable = isReconstructable.value;\r\n\r\n  if (isReconstructable.missingFrames) {\r\n    // TODO -> This is currently unused, but may be used for reconstructing\r\n    // Volumes with gaps later on.\r\n    imageSet.missingFrames = isReconstructable.missingFrames;\r\n  }*/\r\n\r\n  return imageSet;\r\n};\r\n\r\nconst isSingleImageModality = modality => {\r\n  return modality === 'CR' || modality === 'MG' || modality === 'DX';\r\n};\r\n\r\nfunction getSopClassUids(instances) {\r\n  const uniqueSopClassUidsInSeries = new Set();\r\n  instances.forEach(instance => {\r\n    uniqueSopClassUidsInSeries.add(instance.SOPClassUID);\r\n  });\r\n  const sopClassUids = Array.from(uniqueSopClassUidsInSeries);\r\n\r\n  return sopClassUids;\r\n}\r\n\r\n/**\r\n * Basic SOPClassHandler:\r\n * - For all Image types that are stackable, create\r\n *   a displaySet with a stack of images\r\n *\r\n * @param {Array} sopClassHandlerModules List of SOP Class Modules\r\n * @param {SeriesMetadata} series The series metadata object from which the display sets will be created\r\n * @returns {Array} The list of display sets created for the given series object\r\n */\r\nfunction getDisplaySetsFromSeries(instances) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const displaySets = [];\r\n  const sopClassUids = getSopClassUids(instances);\r\n\r\n  // Search through the instances (InstanceMetadata object) of this series\r\n  // Split Multi-frame instances and Single-image modalities\r\n  // into their own specific display sets. Place the rest of each\r\n  // series into another display set.\r\n  const stackableInstances = [];\r\n  instances.forEach(instance => {\r\n    // All imaging modalities must have a valid value for sopClassUid (x00080016) or rows (x00280010)\r\n    if (!isImage(instance.SOPClassUID) && !instance.Rows) {\r\n      return;\r\n    }\r\n\r\n    let displaySet;\r\n\r\n    if (isMultiFrame(instance)) {\r\n      displaySet = makeDisplaySet([instance]);\r\n\r\n      displaySet.setAttributes({\r\n        sopClassUids,\r\n        isClip: true,\r\n        numImageFrames: instance.NumberOfFrames,\r\n        instanceNumber: instance.InstanceNumber,\r\n        acquisitionDatetime: instance.AcquisitionDateTime,\r\n      });\r\n      displaySets.push(displaySet);\r\n    } else if (isSingleImageModality(instance.Modality)) {\r\n      displaySet = makeDisplaySet([instance]);\r\n      displaySet.setAttributes({\r\n        sopClassUids,\r\n        instanceNumber: instance.InstanceNumber,\r\n        acquisitionDatetime: instance.AcquisitionDateTime,\r\n      });\r\n      displaySets.push(displaySet);\r\n    } else {\r\n      stackableInstances.push(instance);\r\n    }\r\n  });\r\n\r\n  if (stackableInstances.length) {\r\n    const displaySet = makeDisplaySet(stackableInstances);\r\n    displaySet.setAttribute('studyInstanceUid', instances[0].StudyInstanceUID);\r\n    displaySet.setAttributes({\r\n      sopClassUids,\r\n    });\r\n    displaySets.push(displaySet);\r\n  }\r\n\r\n  return displaySets;\r\n}\r\n\r\nconst sopClassUids = [\r\n  sopClassDictionary.ComputedRadiographyImageStorage,\r\n  sopClassDictionary.DigitalXRayImageStorageForPresentation,\r\n  sopClassDictionary.DigitalXRayImageStorageForProcessing,\r\n  sopClassDictionary.DigitalMammographyXRayImageStorageForPresentation,\r\n  sopClassDictionary.DigitalMammographyXRayImageStorageForProcessing,\r\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForPresentation,\r\n  sopClassDictionary.DigitalIntraOralXRayImageStorageForProcessing,\r\n  sopClassDictionary.CTImageStorage,\r\n  sopClassDictionary.EnhancedCTImageStorage,\r\n  sopClassDictionary.LegacyConvertedEnhancedCTImageStorage,\r\n  sopClassDictionary.UltrasoundMultiframeImageStorage,\r\n  sopClassDictionary.MRImageStorage,\r\n  sopClassDictionary.EnhancedMRImageStorage,\r\n  sopClassDictionary.EnhancedMRColorImageStorage,\r\n  sopClassDictionary.LegacyConvertedEnhancedMRImageStorage,\r\n  sopClassDictionary.UltrasoundImageStorage,\r\n  sopClassDictionary.UltrasoundImageStorageRET,\r\n  sopClassDictionary.SecondaryCaptureImageStorage,\r\n  sopClassDictionary.MultiframeSingleBitSecondaryCaptureImageStorage,\r\n  sopClassDictionary.MultiframeGrayscaleByteSecondaryCaptureImageStorage,\r\n  sopClassDictionary.MultiframeGrayscaleWordSecondaryCaptureImageStorage,\r\n  sopClassDictionary.MultiframeTrueColorSecondaryCaptureImageStorage,\r\n  sopClassDictionary.XRayAngiographicImageStorage,\r\n  sopClassDictionary.EnhancedXAImageStorage,\r\n  sopClassDictionary.XRayRadiofluoroscopicImageStorage,\r\n  sopClassDictionary.EnhancedXRFImageStorage,\r\n  sopClassDictionary.XRay3DAngiographicImageStorage,\r\n  sopClassDictionary.XRay3DCraniofacialImageStorage,\r\n  sopClassDictionary.BreastTomosynthesisImageStorage,\r\n  sopClassDictionary.BreastProjectionXRayImageStorageForPresentation,\r\n  sopClassDictionary.BreastProjectionXRayImageStorageForProcessing,\r\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForPresentation,\r\n  sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForProcessing,\r\n  sopClassDictionary.NuclearMedicineImageStorage,\r\n  sopClassDictionary.VLEndoscopicImageStorage,\r\n  sopClassDictionary.VideoEndoscopicImageStorage,\r\n  sopClassDictionary.VLMicroscopicImageStorage,\r\n  sopClassDictionary.VideoMicroscopicImageStorage,\r\n  sopClassDictionary.VLSlideCoordinatesMicroscopicImageStorage,\r\n  sopClassDictionary.VLPhotographicImageStorage,\r\n  sopClassDictionary.VideoPhotographicImageStorage,\r\n  sopClassDictionary.OphthalmicPhotography8BitImageStorage,\r\n  sopClassDictionary.OphthalmicPhotography16BitImageStorage,\r\n  sopClassDictionary.OphthalmicTomographyImageStorage,\r\n  sopClassDictionary.VLWholeSlideMicroscopyImageStorage,\r\n  sopClassDictionary.PositronEmissionTomographyImageStorage,\r\n  sopClassDictionary.EnhancedPETImageStorage,\r\n  sopClassDictionary.LegacyConvertedEnhancedPETImageStorage,\r\n  sopClassDictionary.RTImageStorage,\r\n  sopClassDictionary.EnhancedUSVolumeStorage,\r\n];\r\n\r\nfunction getSopClassHandlerModule() {\r\n  return [\r\n    {\r\n      name: sopClassHandlerName,\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n    {\r\n      name: 'not-supported-display-sets-handler',\r\n      sopClassUids: [],\r\n      getDisplaySetsFromSeries: getDisplaySetsFromUnsupportedSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import React from 'react';\r\n\r\nexport default function ToolbarDivider() {\r\n  return <span className=\"border-common-dark mx-2 h-8 w-4 self-center border-l\" />;\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { LayoutSelector as OHIFLayoutSelector, ToolbarButton } from '@ohif/ui';\r\nimport { ServicesManager } from '@ohif/core';\r\n\r\nfunction ToolbarLayoutSelectorWithServices({ servicesManager, ...props }) {\r\n  const { toolbarService } = servicesManager.services;\r\n\r\n  const onSelection = useCallback(\r\n    props => {\r\n      toolbarService.recordInteraction({\r\n        interactionType: 'action',\r\n        commands: [\r\n          {\r\n            commandName: 'setViewportGridLayout',\r\n            commandOptions: { ...props },\r\n            context: 'DEFAULT',\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    [toolbarService]\r\n  );\r\n\r\n  return (\r\n    <LayoutSelector\r\n      {...props}\r\n      onSelection={onSelection}\r\n    />\r\n  );\r\n}\r\n\r\nfunction LayoutSelector({ rows, columns, className, onSelection, ...rest }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const closeOnOutsideClick = () => {\r\n    if (isOpen) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('click', closeOnOutsideClick);\r\n    return () => {\r\n      window.removeEventListener('click', closeOnOutsideClick);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  const onInteractionHandler = () => setIsOpen(!isOpen);\r\n  const DropdownContent = isOpen ? OHIFLayoutSelector : null;\r\n\r\n  return (\r\n    <ToolbarButton\r\n      id=\"Layout\"\r\n      label=\"Grid Layout\"\r\n      icon=\"tool-layout\"\r\n      onInteraction={onInteractionHandler}\r\n      className={className}\r\n      rounded={rest.rounded}\r\n      dropdownContent={\r\n        DropdownContent !== null && (\r\n          <DropdownContent\r\n            rows={rows}\r\n            columns={columns}\r\n            onSelection={onSelection}\r\n          />\r\n        )\r\n      }\r\n      isActive={isOpen}\r\n      type=\"toggle\"\r\n    />\r\n  );\r\n}\r\n\r\nLayoutSelector.propTypes = {\r\n  rows: PropTypes.number,\r\n  columns: PropTypes.number,\r\n  onLayoutChange: PropTypes.func,\r\n  servicesManager: PropTypes.instanceOf(ServicesManager),\r\n};\r\n\r\nLayoutSelector.defaultProps = {\r\n  rows: 3,\r\n  columns: 3,\r\n  onLayoutChange: () => {},\r\n};\r\n\r\nexport default ToolbarLayoutSelectorWithServices;\r\n","import { SplitButton, Icon, ToolbarButton } from '@ohif/ui';\r\nimport React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nfunction ToolbarSplitButtonWithServices({\r\n  isRadio,\r\n  isAction,\r\n  groupId,\r\n  primary,\r\n  secondary,\r\n  items,\r\n  renderer,\r\n  onInteraction,\r\n  servicesManager,\r\n}) {\r\n  const { toolbarService } = servicesManager?.services;\r\n\r\n  const handleItemClick = (item, index) => {\r\n    const { id, type, commands } = item;\r\n    onInteraction({\r\n      groupId,\r\n      itemId: id,\r\n      interactionType: type,\r\n      commands,\r\n    });\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      primary: !isAction && isRadio ? { ...item, index } : state.primary,\r\n      isExpanded: false,\r\n      items: getSplitButtonItems(items).filter(item =>\r\n        isRadio && !isAction ? item.index !== index : true\r\n      ),\r\n    }));\r\n  };\r\n\r\n  /* Bubbles up individual item clicks */\r\n  const getSplitButtonItems = items =>\r\n    items.map((item, index) => ({\r\n      ...item,\r\n      index,\r\n      onClick: () => handleItemClick(item, index),\r\n    }));\r\n\r\n  const [buttonsState, setButtonState] = useState({\r\n    primaryToolId: '',\r\n    toggles: {},\r\n    groups: {},\r\n  });\r\n\r\n  const [state, setState] = useState({\r\n    primary,\r\n    items: getSplitButtonItems(items).filter(item =>\r\n      isRadio && !isAction ? item.id !== primary.id : true\r\n    ),\r\n  });\r\n\r\n  const { primaryToolId, toggles } = buttonsState;\r\n\r\n  const isPrimaryToggle = state.primary.type === 'toggle';\r\n\r\n  const isPrimaryActive =\r\n    (state.primary.type === 'tool' && primaryToolId === state.primary.id) ||\r\n    (isPrimaryToggle && toggles[state.primary.id] === true);\r\n\r\n  const PrimaryButtonComponent =\r\n    toolbarService?.getButtonComponentForUIType(state.primary.uiType) ?? ToolbarButton;\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = toolbarService.subscribe(\r\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\r\n      state => {\r\n        setButtonState({ ...state });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [toolbarService]);\r\n\r\n  const updatedItems = state.items.map(item => {\r\n    const isActive = item.type === 'tool' && primaryToolId === item.id;\r\n\r\n    // We could have added the\r\n    // item.type === 'toggle' && toggles[item.id] === true\r\n    // too but that makes the button active when the toggle is active under it\r\n    // which feels weird\r\n    return {\r\n      ...item,\r\n      isActive,\r\n    };\r\n  });\r\n\r\n  const DefaultListItemRenderer = ({ type, icon, label, t, id }) => {\r\n    const isActive = type === 'toggle' && toggles[id] === true;\r\n\r\n    return (\r\n      <div\r\n        className={classNames(\r\n          'hover:bg-primary-dark flex h-8 w-full flex-row items-center p-3',\r\n          'whitespace-pre text-base',\r\n          isActive && 'bg-primary-dark',\r\n          isActive\r\n            ? 'text-[#348CFD]'\r\n            : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n        )}\r\n      >\r\n        {icon && (\r\n          <span className=\"mr-4\">\r\n            <Icon\r\n              name={icon}\r\n              className=\"h-5 w-5\"\r\n            />\r\n          </span>\r\n        )}\r\n        <span className=\"mr-5\">{t(label)}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const listItemRenderer = renderer || DefaultListItemRenderer;\r\n\r\n  return (\r\n    <SplitButton\r\n      isRadio={isRadio}\r\n      isAction={isAction}\r\n      primary={state.primary}\r\n      secondary={secondary}\r\n      items={updatedItems}\r\n      groupId={groupId}\r\n      renderer={listItemRenderer}\r\n      isActive={isPrimaryActive || updatedItems.some(item => item.isActive)}\r\n      isToggle={isPrimaryToggle}\r\n      onInteraction={onInteraction}\r\n      Component={props => (\r\n        <PrimaryButtonComponent\r\n          {...props}\r\n          servicesManager={servicesManager}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nToolbarSplitButtonWithServices.propTypes = {\r\n  isRadio: PropTypes.bool,\r\n  isAction: PropTypes.bool,\r\n  groupId: PropTypes.string,\r\n  primary: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\r\n    uiType: PropTypes.string,\r\n  }),\r\n  secondary: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    icon: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    tooltip: PropTypes.string.isRequired,\r\n    isActive: PropTypes.bool,\r\n  }),\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\r\n      icon: PropTypes.string,\r\n      label: PropTypes.string,\r\n      tooltip: PropTypes.string,\r\n    })\r\n  ),\r\n  renderer: PropTypes.func,\r\n  onInteraction: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      toolbarService: PropTypes.object,\r\n    }),\r\n  }),\r\n};\r\n\r\nToolbarSplitButtonWithServices.defaultProps = {\r\n  isRadio: false,\r\n  isAction: false,\r\n};\r\n\r\nexport default ToolbarSplitButtonWithServices;\r\n","import { ToolbarButton } from '@ohif/ui';\r\nimport React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ToolbarButtonWithServices({\r\n  id,\r\n  type,\r\n  commands,\r\n  onInteraction,\r\n  servicesManager,\r\n  ...props\r\n}) {\r\n  const { toolbarService } = servicesManager?.services || {};\r\n\r\n  const [buttonsState, setButtonState] = useState({\r\n    primaryToolId: '',\r\n    toggles: {},\r\n    groups: {},\r\n  });\r\n  const { primaryToolId } = buttonsState;\r\n\r\n  const isActive =\r\n    (type === 'tool' && id === primaryToolId) ||\r\n    (type === 'toggle' && buttonsState.toggles[id] === true);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = toolbarService.subscribe(\r\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\r\n      state => {\r\n        setButtonState({ ...state });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [toolbarService]);\r\n\r\n  return (\r\n    <ToolbarButton\r\n      commands={commands}\r\n      id={id}\r\n      type={type}\r\n      isActive={isActive}\r\n      onInteraction={onInteraction}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nToolbarButtonWithServices.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  type: PropTypes.oneOf(['tool', 'action', 'toggle']).isRequired,\r\n  commands: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      commandName: PropTypes.string.isRequired,\r\n      context: PropTypes.string,\r\n    })\r\n  ),\r\n  onInteraction: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      toolbarService: PropTypes.shape({\r\n        subscribe: PropTypes.func.isRequired,\r\n        state: PropTypes.shape({\r\n          primaryToolId: PropTypes.string,\r\n          toggles: PropTypes.objectOf(PropTypes.bool),\r\n          groups: PropTypes.objectOf(PropTypes.object),\r\n        }).isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ToolbarButtonWithServices;\r\n","import { Types } from '@ohif/ui';\r\nimport { Menu, SelectorProps, MenuItem, ContextMenuProps } from './types';\r\n\r\ntype ContextMenuItem = Types.ContextMenuItem;\r\n\r\n/**\r\n * Finds menu by menu id\r\n *\r\n * @returns Menu having the menuId\r\n */\r\nexport function findMenuById(menus: Menu[], menuId?: string): Menu {\r\n  if (!menuId) {\r\n    return;\r\n  }\r\n\r\n  return menus.find(menu => menu.id === menuId);\r\n}\r\n\r\n/**\r\n * Default finding menu method.  This method will go through\r\n * the list of menus until it finds the first one which\r\n * has no selector, OR has the selector, when applied to the\r\n * check props, return true.\r\n * The selectorProps are a set of provided properties which can be\r\n * passed into the selector function to determine when to display a menu.\r\n * For example, a selector function of:\r\n * `({displayset}) => displaySet?.SeriesDescription?.indexOf?.('Left')!==-1\r\n * would match series descriptions containing 'Left'.\r\n *\r\n * @param {Object[]} menus List of menus\r\n * @param {*} subProps\r\n * @returns\r\n */\r\nexport function findMenuDefault(menus: Menu[], subProps: Record<string, unknown>): Menu {\r\n  if (!menus) {\r\n    return null;\r\n  }\r\n  return menus.find(menu => !menu.selector || menu.selector(subProps.selectorProps));\r\n}\r\n\r\n/**\r\n * Finds the menu to be used for different scenarios:\r\n * This will first look for a subMenu with the specified subMenuId\r\n * Next it will look for the first menu whose selector returns true.\r\n *\r\n * @param menus - List of menus\r\n * @param props - root props\r\n * @param menuIdFilter - menu id identifier (to be considered on selection)\r\n *      This is intended to support other types of filtering in the future.\r\n */\r\nexport function findMenu(menus: Menu[], props?: Types.IProps, menuIdFilter?: string) {\r\n  const { subMenu } = props;\r\n\r\n  function* findMenuIterator() {\r\n    yield findMenuById(menus, menuIdFilter || subMenu);\r\n    yield findMenuDefault(menus, props);\r\n  }\r\n\r\n  const findIt = findMenuIterator();\r\n\r\n  let current = findIt.next();\r\n  let menu = current.value;\r\n\r\n  while (!current.done) {\r\n    menu = current.value;\r\n\r\n    if (menu) {\r\n      findIt.return();\r\n    }\r\n    current = findIt.next();\r\n  }\r\n\r\n  console.log('Menu chosen', menu?.id || 'NONE');\r\n\r\n  return menu;\r\n}\r\n\r\n/**\r\n * Returns the menu from a list of possible menus, based on the actual state of component props and tool data nearby.\r\n * This uses the findMenu command above to first find the appropriate\r\n * menu, and then it chooses the actual contents of that menu.\r\n * A menu item can be optional by implementing the 'selector',\r\n * which will be called with the selectorProps, and if it does not return true,\r\n * then the item is excluded.\r\n *\r\n * Other menus can be delegated to by setting the delegating value to\r\n * a string id for another menu.  That menu's content will replace the\r\n * current menu item (only if the item would be included).\r\n *\r\n * This allows single id menus to be chosen by id, but have varying contents\r\n * based on the delegated menus.\r\n *\r\n * Finally, for each item, the adaptItem call is made.  This allows\r\n * items to modify themselves before being displayed, such as\r\n * incorporating additional information from translation sources.\r\n * See the `test-mode` examples for details.\r\n *\r\n * @param selectorProps\r\n * @param {*} event event that originates the context menu\r\n * @param {*} menus List of menus\r\n * @param {*} menuIdFilter\r\n * @returns\r\n */\r\nexport function getMenuItems(\r\n  selectorProps: SelectorProps,\r\n  event: Event,\r\n  menus: Menu[],\r\n  menuIdFilter?: string\r\n): MenuItem[] | void {\r\n  // Include both the check props and the ...check props as one is used\r\n  // by the child menu and the other used by the selector function\r\n  const subProps = { selectorProps, event };\r\n\r\n  const menu = findMenu(menus, subProps, menuIdFilter);\r\n\r\n  if (!menu) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!menu.items) {\r\n    console.warn('Must define items in menu', menu);\r\n    return [];\r\n  }\r\n\r\n  let menuItems = [];\r\n  menu.items.forEach(item => {\r\n    const { delegating, selector, subMenu } = item;\r\n\r\n    if (!selector || selector(selectorProps)) {\r\n      if (delegating) {\r\n        menuItems = [...menuItems, ...getMenuItems(selectorProps, event, menus, subMenu)];\r\n      } else {\r\n        const toAdd = adaptItem(item, subProps);\r\n        menuItems.push(toAdd);\r\n      }\r\n    }\r\n  });\r\n\r\n  return menuItems;\r\n}\r\n\r\n/**\r\n * Returns item adapted to be consumed by ContextMenu component\r\n * and then goes through the item to add action behaviour for clicking the item,\r\n * making it compatible with the default ContextMenu display.\r\n *\r\n * @param {Object} item\r\n * @param {Object} subProps\r\n * @returns a MenuItem that is compatible with the base ContextMenu\r\n *    This requires having a label and set of actions to be called.\r\n */\r\nexport function adaptItem(item: MenuItem, subProps: ContextMenuProps): ContextMenuItem {\r\n  const newItem: ContextMenuItem = {\r\n    ...item,\r\n    value: subProps.selectorProps?.value,\r\n  };\r\n\r\n  if (item.actionType === 'ShowSubMenu' && !newItem.iconRight) {\r\n    newItem.iconRight = 'chevron-menu';\r\n  }\r\n  if (!item.action) {\r\n    newItem.action = (itemRef, componentProps) => {\r\n      const { event = {} } = componentProps;\r\n      const { detail = {} } = event;\r\n      newItem.element = detail.element;\r\n\r\n      componentProps.onClose();\r\n      const action = componentProps[`on${itemRef.actionType || 'Default'}`];\r\n      if (action) {\r\n        action.call(componentProps, newItem, itemRef, subProps);\r\n      } else {\r\n        console.warn('No action defined for', itemRef);\r\n      }\r\n    };\r\n  }\r\n\r\n  return newItem;\r\n}\r\n","import * as ContextMenuItemsBuilder from './ContextMenuItemsBuilder';\r\nimport ContextMenu from '../../../../platform/ui/src/components/ContextMenu/ContextMenu';\r\nimport { CommandsManager, ServicesManager, Types } from '@ohif/core';\r\nimport { Menu, MenuItem, Point, ContextMenuProps } from './types';\r\n\r\n/**\r\n * The context menu controller is a helper class that knows how\r\n * to manage context menus based on the UI Customization Service.\r\n * There are a few parts to this:\r\n *    1. Basic controls to manage displaying and hiding context menus\r\n *    2. Menu selection services, which use the UI customization service\r\n *       to choose which menu to display\r\n *    3. Menu item adapter services to convert menu items into displayable and actionable items.\r\n *\r\n * The format for a menu is defined in the exported type MenuItem\r\n */\r\nexport default class ContextMenuController {\r\n  commandsManager: CommandsManager;\r\n  services: Types.Services;\r\n  menuItems: Menu[] | MenuItem[];\r\n\r\n  constructor(servicesManager: ServicesManager, commandsManager: CommandsManager) {\r\n    this.services = servicesManager.services as Obj;\r\n    this.commandsManager = commandsManager;\r\n  }\r\n\r\n  closeContextMenu() {\r\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\r\n  }\r\n\r\n  /**\r\n   * Figures out which context menu is appropriate to display and shows it.\r\n   *\r\n   * @param contextMenuProps - the context menu properties, see ./types.ts\r\n   * @param viewportElement - the DOM element this context menu is related to\r\n   * @param defaultPointsPosition - a default position to show the context menu\r\n   */\r\n  showContextMenu(\r\n    contextMenuProps: ContextMenuProps,\r\n    viewportElement,\r\n    defaultPointsPosition\r\n  ): void {\r\n    if (!this.services.uiDialogService) {\r\n      console.warn('Unable to show dialog; no UI Dialog Service available.');\r\n      return;\r\n    }\r\n\r\n    const { event, subMenu, menuId, menus, selectorProps } = contextMenuProps;\r\n\r\n    console.log('Getting items from', menus);\r\n    const items = ContextMenuItemsBuilder.getMenuItems(\r\n      selectorProps || contextMenuProps,\r\n      event,\r\n      menus,\r\n      menuId\r\n    );\r\n\r\n    this.services.uiDialogService.dismiss({ id: 'context-menu' });\r\n    this.services.uiDialogService.create({\r\n      id: 'context-menu',\r\n      isDraggable: false,\r\n      preservePosition: false,\r\n      preventCutOf: true,\r\n      defaultPosition: ContextMenuController._getDefaultPosition(\r\n        defaultPointsPosition,\r\n        event?.detail,\r\n        viewportElement\r\n      ),\r\n      event,\r\n      content: ContextMenu,\r\n\r\n      // This naming is part of the uiDialogService convention\r\n      // Clicking outside simply closes the dialog box.\r\n      onClickOutside: () => this.services.uiDialogService.dismiss({ id: 'context-menu' }),\r\n\r\n      contentProps: {\r\n        items,\r\n        selectorProps,\r\n        menus,\r\n        event,\r\n        subMenu,\r\n        eventData: event?.detail,\r\n\r\n        onClose: () => {\r\n          this.services.uiDialogService.dismiss({ id: 'context-menu' });\r\n        },\r\n\r\n        /**\r\n         * Displays a sub-menu, removing this menu\r\n         * @param {*} item\r\n         * @param {*} itemRef\r\n         * @param {*} subProps\r\n         */\r\n        onShowSubMenu: (item, itemRef, subProps) => {\r\n          if (!itemRef.subMenu) {\r\n            console.warn('No submenu defined for', item, itemRef, subProps);\r\n            return;\r\n          }\r\n          this.showContextMenu(\r\n            {\r\n              ...contextMenuProps,\r\n              menuId: itemRef.subMenu,\r\n            },\r\n            viewportElement,\r\n            defaultPointsPosition\r\n          );\r\n        },\r\n\r\n        // Default is to run the specified commands.\r\n        onDefault: (item, itemRef, subProps) => {\r\n          this.commandsManager.run(item, {\r\n            ...selectorProps,\r\n            ...itemRef,\r\n            subProps,\r\n          });\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  static getDefaultPosition = (): Point => {\r\n    return {\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n  };\r\n\r\n  static _getEventDefaultPosition = eventDetail => ({\r\n    x: eventDetail && eventDetail.currentPoints.client[0],\r\n    y: eventDetail && eventDetail.currentPoints.client[1],\r\n  });\r\n\r\n  static _getElementDefaultPosition = element => {\r\n    if (element) {\r\n      const boundingClientRect = element.getBoundingClientRect();\r\n      return {\r\n        x: boundingClientRect.x,\r\n        y: boundingClientRect.y,\r\n      };\r\n    }\r\n\r\n    return {\r\n      x: undefined,\r\n      y: undefined,\r\n    };\r\n  };\r\n\r\n  static _getCanvasPointsPosition = (points = [], element) => {\r\n    const viewerPos = ContextMenuController._getElementDefaultPosition(element);\r\n\r\n    for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\r\n      const point = {\r\n        x: points[pointIndex][0] || points[pointIndex]['x'],\r\n        y: points[pointIndex][1] || points[pointIndex]['y'],\r\n      };\r\n      if (\r\n        ContextMenuController._isValidPosition(point) &&\r\n        ContextMenuController._isValidPosition(viewerPos)\r\n      ) {\r\n        return {\r\n          x: point.x + viewerPos.x,\r\n          y: point.y + viewerPos.y,\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  static _isValidPosition = (source): boolean => {\r\n    return source && typeof source.x === 'number' && typeof source.y === 'number';\r\n  };\r\n\r\n  /**\r\n   * Returns the context menu default position. It look for the positions of: canvasPoints (got from selected), event that triggers it, current viewport element\r\n   */\r\n  static _getDefaultPosition = (canvasPoints, eventDetail, viewerElement) => {\r\n    function* getPositionIterator() {\r\n      yield ContextMenuController._getCanvasPointsPosition(canvasPoints, viewerElement);\r\n      yield ContextMenuController._getEventDefaultPosition(eventDetail);\r\n      yield ContextMenuController._getElementDefaultPosition(viewerElement);\r\n      yield ContextMenuController.getDefaultPosition();\r\n    }\r\n\r\n    const positionIterator = getPositionIterator();\r\n\r\n    let current = positionIterator.next();\r\n    let position = current.value;\r\n\r\n    while (!current.done) {\r\n      position = current.value;\r\n\r\n      if (ContextMenuController._isValidPosition(position)) {\r\n        positionIterator.return();\r\n      }\r\n      current = positionIterator.next();\r\n    }\r\n\r\n    return position;\r\n  };\r\n}\r\n","const defaultContextMenu = {\r\n  id: 'measurementsContextMenu',\r\n  customizationType: 'ohif.contextMenu',\r\n  menus: [\r\n    // Get the items from the UI Customization for the menu name (and have a custom name)\r\n    {\r\n      id: 'forExistingMeasurement',\r\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\r\n      items: [\r\n        {\r\n          label: 'Delete measurement',\r\n          commands: [\r\n            {\r\n              commandName: 'deleteMeasurement',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          label: 'Add Label',\r\n          commands: [\r\n            {\r\n              commandName: 'setMeasurementLabel',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default defaultContextMenu;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { VariableSizeList as List } from 'react-window';\r\nimport classNames from 'classnames';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst lineHeightPx = 20;\r\nconst lineHeightClassName = `leading-[${lineHeightPx}px]`;\r\nconst rowVerticalPaddingPx = 10;\r\nconst rowBottomBorderPx = 1;\r\nconst rowVerticalPaddingStyle = { padding: `${rowVerticalPaddingPx}px 0` };\r\nconst rowStyle = {\r\n  borderBottomWidth: `${rowBottomBorderPx}px`,\r\n  ...rowVerticalPaddingStyle,\r\n};\r\n\r\nfunction ColumnHeaders({ tagRef, vrRef, keywordRef, valueRef }) {\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'bg-secondary-dark ohif-scrollbar flex w-full flex-row overflow-y-scroll'\r\n      )}\r\n      style={rowVerticalPaddingStyle}\r\n    >\r\n      <div className=\"w-4/24 px-3\">\r\n        <label\r\n          ref={tagRef}\r\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\r\n        >\r\n          <span className=\"flex flex-row items-center focus:outline-none\">Tag</span>\r\n        </label>\r\n      </div>\r\n      <div className=\"w-2/24 px-3\">\r\n        <label\r\n          ref={vrRef}\r\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\r\n        >\r\n          <span className=\"flex flex-row items-center focus:outline-none\">VR</span>\r\n        </label>\r\n      </div>\r\n      <div className=\"w-6/24 px-3\">\r\n        <label\r\n          ref={keywordRef}\r\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\r\n        >\r\n          <span className=\"flex flex-row items-center focus:outline-none\">Keyword</span>\r\n        </label>\r\n      </div>\r\n      <div className=\"w-5/24 grow px-3\">\r\n        <label\r\n          ref={valueRef}\r\n          className=\"flex flex-1 select-none flex-col pl-1 text-lg text-white\"\r\n        >\r\n          <span className=\"flex flex-row items-center focus:outline-none\">Value</span>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DicomTagTable({ rows }) {\r\n  const listRef = useRef();\r\n  const canvasRef = useRef();\r\n\r\n  const [tagHeaderElem, setTagHeaderElem] = useState(null);\r\n  const [vrHeaderElem, setVrHeaderElem] = useState(null);\r\n  const [keywordHeaderElem, setKeywordHeaderElem] = useState(null);\r\n  const [valueHeaderElem, setValueHeaderElem] = useState(null);\r\n\r\n  // Here the refs are inturn stored in state to trigger a render of the table.\r\n  // This virtualized table does NOT render until the header is rendered because the header column widths are used to determine the row heights in the table.\r\n  // Therefore whenever the refs change (in particular the first time the refs are set), we want to trigger a render of the table.\r\n  const tagRef = elem => {\r\n    if (elem) {\r\n      setTagHeaderElem(elem);\r\n    }\r\n  };\r\n  const vrRef = elem => {\r\n    if (elem) {\r\n      setVrHeaderElem(elem);\r\n    }\r\n  };\r\n  const keywordRef = elem => {\r\n    if (elem) {\r\n      setKeywordHeaderElem(elem);\r\n    }\r\n  };\r\n  const valueRef = elem => {\r\n    if (elem) {\r\n      setValueHeaderElem(elem);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When new rows are set, scroll to the top and reset the virtualization.\r\n   */\r\n  useEffect(() => {\r\n    if (!listRef?.current) {\r\n      return;\r\n    }\r\n\r\n    listRef.current.scrollTo(0);\r\n    listRef.current.resetAfterIndex(0);\r\n  }, [rows]);\r\n\r\n  /**\r\n   * When the browser window resizes, update the row virtualization (i.e. row heights)\r\n   */\r\n  useEffect(() => {\r\n    const debouncedResize = debounce(() => listRef.current.resetAfterIndex(0), 100);\r\n\r\n    window.addEventListener('resize', debouncedResize);\r\n\r\n    return () => {\r\n      debouncedResize.cancel();\r\n      window.removeEventListener('resize', debouncedResize);\r\n    };\r\n  }, []);\r\n\r\n  const Row = useCallback(\r\n    ({ index, style }) => {\r\n      const row = rows[index];\r\n\r\n      return (\r\n        <div\r\n          style={{ ...style, ...rowStyle }}\r\n          className={classNames(\r\n            'hover:bg-secondary-main border-secondary-light flex w-full flex-row items-center break-all bg-black text-base transition duration-300',\r\n            lineHeightClassName\r\n          )}\r\n          key={`DICOMTagRow-${index}`}\r\n        >\r\n          <div className=\"w-4/24 px-3\">{row[0]}</div>\r\n          <div className=\"w-2/24 px-3\">{row[1]}</div>\r\n          <div className=\"w-6/24 px-3\">{row[2]}</div>\r\n          <div className=\"w-5/24 grow px-3\">{row[3]}</div>\r\n        </div>\r\n      );\r\n    },\r\n    [rows]\r\n  );\r\n\r\n  /**\r\n   * Whenever any one of the column headers is set, then the header is rendered.\r\n   * Here we chose the tag header.\r\n   */\r\n  const isHeaderRendered = useCallback(() => tagHeaderElem !== null, [tagHeaderElem]);\r\n\r\n  /**\r\n   * Get the item/row size. We use the header column widths to calculate the various row heights.\r\n   * @param index the row index\r\n   * @returns the row height\r\n   */\r\n  const getItemSize = useCallback(\r\n    index => {\r\n      const headerWidths = [\r\n        tagHeaderElem.offsetWidth,\r\n        vrHeaderElem.offsetWidth,\r\n        keywordHeaderElem.offsetWidth,\r\n        valueHeaderElem.offsetWidth,\r\n      ];\r\n\r\n      const context = canvasRef.current.getContext('2d');\r\n      context.font = getComputedStyle(canvasRef.current).font;\r\n\r\n      return rows[index]\r\n        .map((colText, index) => {\r\n          const colOneLineWidth = context.measureText(colText).width;\r\n          const numLines = Math.ceil(colOneLineWidth / headerWidths[index]);\r\n          return numLines * lineHeightPx + 2 * rowVerticalPaddingPx + rowBottomBorderPx;\r\n        })\r\n        .reduce((maxHeight, colHeight) => Math.max(maxHeight, colHeight));\r\n    },\r\n    [rows, keywordHeaderElem, tagHeaderElem, valueHeaderElem, vrHeaderElem]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        style={{ visibility: 'hidden', position: 'absolute' }}\r\n        className=\"text-base\"\r\n        ref={canvasRef}\r\n      />\r\n      <ColumnHeaders\r\n        tagRef={tagRef}\r\n        vrRef={vrRef}\r\n        keywordRef={keywordRef}\r\n        valueRef={valueRef}\r\n      />\r\n      <div\r\n        className=\"relative m-auto border-2 border-black bg-black\"\r\n        style={{ height: '32rem' }}\r\n      >\r\n        {isHeaderRendered() && (\r\n          <List\r\n            ref={listRef}\r\n            height={500}\r\n            itemCount={rows.length}\r\n            itemSize={getItemSize}\r\n            width={'100%'}\r\n            className=\"ohif-scrollbar\"\r\n          >\r\n            {Row}\r\n          </List>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DicomTagTable;\r\n","import dcmjs from 'dcmjs';\r\nimport moment from 'moment';\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport { classes } from '@ohif/core';\r\nimport { InputRange, Select, Typography, InputFilterText } from '@ohif/ui';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport DicomTagTable from './DicomTagTable';\r\nimport './DicomTagBrowser.css';\r\n\r\nconst { ImageSet } = classes;\r\nconst { DicomMetaDictionary } = dcmjs.data;\r\nconst { nameMap } = DicomMetaDictionary;\r\n\r\nconst DicomTagBrowser = ({ displaySets, displaySetInstanceUID }) => {\r\n  // The column indices that are to be excluded during a filter of the table.\r\n  // At present the column indices are:\r\n  // 0: DICOM tag\r\n  // 1: VR\r\n  // 2: Keyword\r\n  // 3: Value\r\n  const excludedColumnIndicesForFilter: Set<number> = new Set([1]);\r\n\r\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] =\r\n    useState(displaySetInstanceUID);\r\n  const [instanceNumber, setInstanceNumber] = useState(1);\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const onSelectChange = value => {\r\n    setSelectedDisplaySetInstanceUID(value.value);\r\n    setInstanceNumber(1);\r\n  };\r\n\r\n  const activeDisplaySet = displaySets.find(\r\n    ds => ds.displaySetInstanceUID === selectedDisplaySetInstanceUID\r\n  );\r\n\r\n  const isImageStack = _isImageStack(activeDisplaySet);\r\n  const showInstanceList = isImageStack && activeDisplaySet.images.length > 1;\r\n\r\n  const displaySetList = useMemo(() => {\r\n    displaySets.sort((a, b) => a.SeriesNumber - b.SeriesNumber);\r\n    return displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDate,\r\n        SeriesTime,\r\n        SeriesNumber,\r\n        SeriesDescription,\r\n        Modality,\r\n      } = displaySet;\r\n\r\n      /* Map to display representation */\r\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0];\r\n      const date = moment(dateStr, 'YYYYMMDD:HHmmss');\r\n      const displayDate = date.format('ddd, MMM Do YYYY');\r\n\r\n      return {\r\n        value: displaySetInstanceUID,\r\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\r\n        description: displayDate,\r\n      };\r\n    });\r\n  }, [displaySets]);\r\n\r\n  const rows = useMemo(() => {\r\n    let metadata;\r\n    if (isImageStack) {\r\n      metadata = activeDisplaySet.images[instanceNumber - 1];\r\n    } else {\r\n      metadata = activeDisplaySet.instance || activeDisplaySet;\r\n    }\r\n    const tags = getSortedTags(metadata);\r\n    return getFormattedRowsFromTags(tags, metadata);\r\n  }, [instanceNumber, selectedDisplaySetInstanceUID]);\r\n\r\n  const filteredRows = useMemo(() => {\r\n    if (!filterValue) {\r\n      return rows;\r\n    }\r\n\r\n    const filterValueLowerCase = filterValue.toLowerCase();\r\n    return rows.filter(row => {\r\n      return row.reduce((keepRow, col, colIndex) => {\r\n        if (keepRow) {\r\n          // We are already keeping the row, why do more work so return now.\r\n          return keepRow;\r\n        }\r\n\r\n        if (excludedColumnIndicesForFilter.has(colIndex)) {\r\n          return keepRow;\r\n        }\r\n\r\n        return keepRow || col.toLowerCase().includes(filterValueLowerCase);\r\n      }, false);\r\n    });\r\n  }, [rows, filterValue]);\r\n\r\n  const debouncedSetFilterValue = useMemo(() => {\r\n    return debounce(setFilterValue, 200);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      debouncedSetFilterValue?.cancel();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dicom-tag-browser-content\">\r\n      <div className=\"mb-6 flex flex-row items-center pl-1\">\r\n        <div className=\"flex w-1/2 flex-row items-center\">\r\n          <Typography\r\n            variant=\"subtitle\"\r\n            className=\"mr-4\"\r\n          >\r\n            Series\r\n          </Typography>\r\n          <div className=\"mr-8 grow\">\r\n            <Select\r\n              id=\"display-set-selector\"\r\n              isClearable={false}\r\n              onChange={onSelectChange}\r\n              options={displaySetList}\r\n              value={displaySetList.find(ds => ds.value === selectedDisplaySetInstanceUID)}\r\n              className=\"text-white\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"flex w-1/2 flex-row items-center\">\r\n          {showInstanceList && (\r\n            <Typography\r\n              variant=\"subtitle\"\r\n              className=\"mr-4\"\r\n            >\r\n              Instance Number\r\n            </Typography>\r\n          )}\r\n          {showInstanceList && (\r\n            <div className=\"grow\">\r\n              <InputRange\r\n                value={instanceNumber}\r\n                key={selectedDisplaySetInstanceUID}\r\n                onChange={value => {\r\n                  setInstanceNumber(parseInt(value));\r\n                }}\r\n                minValue={1}\r\n                maxValue={activeDisplaySet.images.length}\r\n                step={1}\r\n                inputClassName=\"w-full\"\r\n                labelPosition=\"left\"\r\n                trackColor={'#3a3f99'}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"h-1 w-full bg-black\"></div>\r\n      <div className=\"my-3 flex w-1/2 flex-row\">\r\n        <InputFilterText\r\n          className=\"mr-8 block w-full\"\r\n          placeholder=\"Search metadata...\"\r\n          onDebounceChange={setFilterValue}\r\n        ></InputFilterText>\r\n      </div>\r\n      <DicomTagTable rows={filteredRows} />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getFormattedRowsFromTags(tags, metadata) {\r\n  const rows = [];\r\n\r\n  tags.forEach(tagInfo => {\r\n    if (tagInfo.vr === 'SQ') {\r\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, '']);\r\n\r\n      const { values } = tagInfo;\r\n\r\n      values.forEach((item, index) => {\r\n        const formatedRowsFromTags = getFormattedRowsFromTags(item, metadata);\r\n\r\n        rows.push([`${item[0].tagIndent}(FFFE,E000)`, '', `Item #${index}`, '']);\r\n\r\n        rows.push(...formatedRowsFromTags);\r\n      });\r\n    } else {\r\n      if (tagInfo.vr === 'xs') {\r\n        try {\r\n          const tag = dcmjs.data.Tag.fromPString(tagInfo.tag).toCleanString();\r\n          const originalTagInfo = metadata[tag];\r\n          tagInfo.vr = originalTagInfo.vr;\r\n        } catch (error) {\r\n          console.error(`Failed to parse value representation for tag '${tagInfo.keyword}'`);\r\n        }\r\n      }\r\n      rows.push([`${tagInfo.tagIndent}${tagInfo.tag}`, tagInfo.vr, tagInfo.keyword, tagInfo.value]);\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\nfunction getSortedTags(metadata) {\r\n  const tagList = getRows(metadata);\r\n\r\n  // Sort top level tags, sequence groups are sorted when created.\r\n  _sortTagList(tagList);\r\n\r\n  return tagList;\r\n}\r\n\r\nfunction getRows(metadata, depth = 0) {\r\n  // Tag, Type, Value, Keyword\r\n\r\n  const keywords = Object.keys(metadata);\r\n\r\n  let tagIndent = '';\r\n\r\n  for (let i = 0; i < depth; i++) {\r\n    tagIndent += '>';\r\n  }\r\n\r\n  if (depth > 0) {\r\n    tagIndent += ' '; // If indented, add a space after the indents.\r\n  }\r\n\r\n  const rows = [];\r\n  for (let i = 0; i < keywords.length; i++) {\r\n    let keyword = keywords[i];\r\n\r\n    if (keyword === '_vrMap') {\r\n      continue;\r\n    }\r\n\r\n    const tagInfo = nameMap[keyword];\r\n\r\n    let value = metadata[keyword];\r\n\r\n    if (tagInfo && tagInfo.vr === 'SQ') {\r\n      const sequenceAsArray = toArray(value);\r\n\r\n      // Push line defining the sequence\r\n\r\n      const sequence = {\r\n        tag: tagInfo.tag,\r\n        tagIndent,\r\n        vr: tagInfo.vr,\r\n        keyword,\r\n        values: [],\r\n      };\r\n\r\n      rows.push(sequence);\r\n\r\n      if (value === null) {\r\n        // Type 2 Sequence\r\n        continue;\r\n      }\r\n\r\n      sequenceAsArray.forEach(item => {\r\n        const sequenceRows = getRows(item, depth + 1);\r\n\r\n        if (sequenceRows.length) {\r\n          // Sort the sequence group.\r\n          _sortTagList(sequenceRows);\r\n          sequence.values.push(sequenceRows);\r\n        }\r\n      });\r\n\r\n      continue;\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      if (value.length > 0 && typeof value[0] != 'object') {\r\n        value = value.join('\\\\');\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      value = value.toString();\r\n    }\r\n\r\n    if (typeof value !== 'string') {\r\n      if (value === null) {\r\n        value = ' ';\r\n      } else {\r\n        if (typeof value === 'object') {\r\n          if (value.InlineBinary) {\r\n            value = 'Inline Binary';\r\n          } else if (value.BulkDataURI) {\r\n            value = `Bulk Data URI`; //: ${value.BulkDataURI}`;\r\n          } else if (value.Alphabetic) {\r\n            value = value.Alphabetic;\r\n          } else {\r\n            console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\r\n            console.warn(value);\r\n            value = ' ';\r\n          }\r\n        } else {\r\n          console.warn(`Unrecognised Value: ${value} for ${keyword}:`);\r\n          value = ' ';\r\n        }\r\n      }\r\n    }\r\n\r\n    // tag / vr/ keyword/ value\r\n\r\n    // Remove retired tags\r\n    keyword = keyword.replace('RETIRED_', '');\r\n    if (tagInfo) {\r\n      rows.push({\r\n        tag: tagInfo.tag,\r\n        tagIndent,\r\n        vr: tagInfo.vr,\r\n        keyword,\r\n        value,\r\n      });\r\n    } else {\r\n      // skip properties without hex tag numbers\r\n      const regex = /[0-9A-Fa-f]{6}/g;\r\n      if (keyword.match(regex)) {\r\n        const tag = `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`;\r\n        rows.push({\r\n          tag,\r\n          tagIndent,\r\n          vr: '',\r\n          keyword: 'Private Tag',\r\n          value,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nfunction _isImageStack(displaySet) {\r\n  return displaySet instanceof ImageSet;\r\n}\r\n\r\nfunction toArray(objectOrArray) {\r\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\r\n}\r\n\r\nfunction _sortTagList(tagList) {\r\n  tagList.sort((a, b) => {\r\n    if (a.tag < b.tag) {\r\n      return -1;\r\n    }\r\n\r\n    return 1;\r\n  });\r\n}\r\n\r\nexport default DicomTagBrowser;\r\n","import { HangingProtocolService, StateSyncService, Types } from '@ohif/core';\r\n\r\nexport type ReturnType = {\r\n  hangingProtocolStageIndexMap: Record<string, Types.HangingProtocol.HPInfo>;\r\n  viewportGridStore: Record<string, unknown>;\r\n  displaySetSelectorMap: Record<string, string>;\r\n};\r\n\r\n/**\r\n * Calculates a set of state information for hanging protocols and viewport grid\r\n * which defines the currently applied hanging protocol state.\r\n * @param state is the viewport grid state\r\n * @param syncService is the state sync service to use for getting existing state\r\n * @returns Set of states that can be applied to the state sync to remember\r\n *   the current view state.\r\n */\r\nconst reuseCachedLayout = (\r\n  state,\r\n  hangingProtocolService: HangingProtocolService,\r\n  syncService: StateSyncService\r\n): ReturnType => {\r\n  const { activeViewportId } = state;\r\n  const { protocol } = hangingProtocolService.getActiveProtocol();\r\n  const hpInfo = hangingProtocolService.getState();\r\n  const { protocolId, stageIndex, activeStudyUID } = hpInfo;\r\n\r\n  const syncState = syncService.getState();\r\n  const viewportGridStore = { ...syncState.viewportGridStore };\r\n  const displaySetSelectorMap = { ...syncState.displaySetSelectorMap };\r\n\r\n  const stage = protocol.stages[stageIndex];\r\n  const storeId = `${activeStudyUID}:${protocolId}:${stageIndex}`;\r\n  const cacheId = `${activeStudyUID}:${protocolId}`;\r\n  const hangingProtocolStageIndexMap = {\r\n    ...syncState.hangingProtocolStageIndexMap,\r\n  };\r\n  const { rows, columns } = stage.viewportStructure.properties;\r\n  const custom =\r\n    stage.viewports.length !== state.viewports.size ||\r\n    state.layout.numRows !== rows ||\r\n    state.layout.numCols !== columns;\r\n\r\n  hangingProtocolStageIndexMap[cacheId] = hpInfo;\r\n\r\n  if (storeId && custom) {\r\n    viewportGridStore[storeId] = { ...state };\r\n  }\r\n\r\n  state.viewports.forEach((viewport, viewportId) => {\r\n    const { displaySetOptions, displaySetInstanceUIDs } = viewport;\r\n    if (!displaySetOptions) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < displaySetOptions.length; i++) {\r\n      const displaySetUID = displaySetInstanceUIDs[i];\r\n      if (!displaySetUID) {\r\n        continue;\r\n      }\r\n      if (viewportId === activeViewportId && i === 0) {\r\n        displaySetSelectorMap[`${activeStudyUID}:activeDisplaySet:0`] = displaySetUID;\r\n      }\r\n      if (displaySetOptions[i]?.id) {\r\n        displaySetSelectorMap[\r\n          `${activeStudyUID}:${displaySetOptions[i].id}:${\r\n            displaySetOptions[i].matchedDisplaySetsIndex || 0\r\n          }`\r\n        ] = displaySetUID;\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    hangingProtocolStageIndexMap,\r\n    viewportGridStore,\r\n    displaySetSelectorMap,\r\n  };\r\n};\r\n\r\nexport default reuseCachedLayout;\r\n","import { StateSyncService } from '@ohif/core';\r\n\r\n/**\r\n * This find or create viewport is paired with the reduce results from\r\n * below, and the action of this viewport is to look for previously filled\r\n * viewports, and to reuse by position id.  If there is no filled viewport,\r\n * then one can be re-used from the display set if it isn't going to be displayed.\r\n * @param hangingProtocolService - bound parameter supplied before using this\r\n * @param viewportsByPosition - bound parameter supplied before using this\r\n * @param position - the position in the grid to retrieve\r\n * @param positionId - the current position on screen to retrieve\r\n * @param options - the set of options used, so that subsequent calls can\r\n *                  store state that is reset by the setLayout.\r\n *                  This class uses the options to store the already viewed\r\n *                  display sets, filling it initially with the pre-existing viewports.\r\n */\r\nexport const findOrCreateViewport = (\r\n  hangingProtocolService,\r\n  viewportsByPosition,\r\n  position: number,\r\n  positionId: string,\r\n  options: Record<string, unknown>\r\n) => {\r\n  const byPositionViewport = viewportsByPosition?.[positionId];\r\n  if (byPositionViewport) {\r\n    return { ...byPositionViewport };\r\n  }\r\n  const { protocolId, stageIndex } = hangingProtocolService.getState();\r\n\r\n  // Setup the initial in display correctly for initial view/select\r\n  if (!options.inDisplay) {\r\n    options.inDisplay = [...viewportsByPosition.initialInDisplay];\r\n  }\r\n  // See if there is a default viewport for new views.\r\n  const missing = hangingProtocolService.getMissingViewport(protocolId, stageIndex, options);\r\n  if (missing) {\r\n    const displaySetInstanceUIDs = missing.displaySetsInfo.map(it => it.displaySetInstanceUID);\r\n    options.inDisplay.push(...displaySetInstanceUIDs);\r\n    return {\r\n      displaySetInstanceUIDs,\r\n      displaySetOptions: missing.displaySetsInfo.map(it => it.displaySetOptions),\r\n      viewportOptions: {\r\n        ...missing.viewportOptions,\r\n      },\r\n    };\r\n  }\r\n  return {};\r\n};\r\n\r\n/**\r\n * Records the information on what viewports are displayed in which position.\r\n * Also records what instances from the existing positions are going to be in\r\n * view initially.\r\n * @param state is the viewport grid state\r\n * @param syncService is the state sync service to use for getting existing state\r\n * @returns Set of states that can be applied to the state sync to remember\r\n *   the current view state.\r\n */\r\nconst findViewportsByPosition = (\r\n  state,\r\n  { numRows, numCols },\r\n  syncService: StateSyncService\r\n): Record<string, Record<string, unknown>> => {\r\n  const { viewports } = state;\r\n  const syncState = syncService.getState();\r\n  const viewportsByPosition = { ...syncState.viewportsByPosition };\r\n  const initialInDisplay = [];\r\n\r\n  viewports.forEach(viewport => {\r\n    if (viewport.positionId) {\r\n      const storedViewport = {\r\n        ...viewport,\r\n        viewportOptions: { ...viewport.viewportOptions },\r\n      };\r\n      viewportsByPosition[viewport.positionId] = storedViewport;\r\n    }\r\n  });\r\n\r\n  for (let row = 0; row < numRows; row++) {\r\n    for (let col = 0; col < numCols; col++) {\r\n      const positionId = `${col}-${row}`;\r\n      const viewport = viewportsByPosition[positionId];\r\n      if (viewport?.displaySetInstanceUIDs) {\r\n        initialInDisplay.push(...viewport.displaySetInstanceUIDs);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Store the initially displayed elements\r\n  viewportsByPosition.initialInDisplay = initialInDisplay;\r\n\r\n  return { viewportsByPosition };\r\n};\r\n\r\nexport default findViewportsByPosition;\r\n","import { ServicesManager, utils, Types } from '@ohif/core';\r\n\r\nimport { ContextMenuController, defaultContextMenu } from './CustomizableContextMenu';\r\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser';\r\nimport reuseCachedLayouts from './utils/reuseCachedLayouts';\r\nimport findViewportsByPosition, {\r\n  findOrCreateViewport as layoutFindOrCreate,\r\n} from './findViewportsByPosition';\r\n\r\nimport { ContextMenuProps } from './CustomizableContextMenu/types';\r\nimport { NavigateHistory } from './types/commandModuleTypes';\r\nimport { history } from '@ohif/app';\r\n\r\nconst { subscribeToNextViewportGridChange } = utils;\r\n\r\nexport type HangingProtocolParams = {\r\n  protocolId?: string;\r\n  stageIndex?: number;\r\n  activeStudyUID?: string;\r\n  stageId?: string;\r\n};\r\n\r\nexport type UpdateViewportDisplaySetParams = {\r\n  direction: number;\r\n  excludeNonImageModalities?: boolean;\r\n};\r\n\r\n/**\r\n * Determine if a command is a hanging protocol one.\r\n * For now, just use the two hanging protocol commands that are in this\r\n * commands module, but if others get added elsewhere this may need enhancing.\r\n */\r\nconst isHangingProtocolCommand = command =>\r\n  command &&\r\n  (command.commandName === 'setHangingProtocol' || command.commandName === 'toggleHangingProtocol');\r\n\r\nconst commandsModule = ({\r\n  servicesManager,\r\n  commandsManager,\r\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\r\n  const {\r\n    customizationService,\r\n    measurementService,\r\n    hangingProtocolService,\r\n    uiNotificationService,\r\n    viewportGridService,\r\n    displaySetService,\r\n    stateSyncService,\r\n    toolbarService,\r\n  } = (servicesManager as ServicesManager).services;\r\n\r\n  // Define a context menu controller for use with any context menus\r\n  const contextMenuController = new ContextMenuController(servicesManager, commandsManager);\r\n\r\n  const actions = {\r\n    /**\r\n     * Show the context menu.\r\n     * @param options.menuId defines the menu name to lookup, from customizationService\r\n     * @param options.defaultMenu contains the default menu set to use\r\n     * @param options.element is the element to show the menu within\r\n     * @param options.event is the event that caused the context menu\r\n     * @param options.selectorProps is the set of selection properties to use\r\n     */\r\n    showContextMenu: (options: ContextMenuProps) => {\r\n      const {\r\n        menuCustomizationId,\r\n        element,\r\n        event,\r\n        selectorProps,\r\n        defaultPointsPosition = [],\r\n      } = options;\r\n\r\n      const optionsToUse = { ...options };\r\n\r\n      if (menuCustomizationId) {\r\n        Object.assign(\r\n          optionsToUse,\r\n          customizationService.get(menuCustomizationId, defaultContextMenu)\r\n        );\r\n      }\r\n\r\n      // TODO - make the selectorProps richer by including the study metadata and display set.\r\n      const { protocol, stage } = hangingProtocolService.getActiveProtocol();\r\n      optionsToUse.selectorProps = {\r\n        event,\r\n        protocol,\r\n        stage,\r\n        ...selectorProps,\r\n      };\r\n\r\n      contextMenuController.showContextMenu(optionsToUse, element, defaultPointsPosition);\r\n    },\r\n\r\n    /** Close a context menu currently displayed */\r\n    closeContextMenu: () => {\r\n      contextMenuController.closeContextMenu();\r\n    },\r\n\r\n    displayNotification: ({ text, title, type }) => {\r\n      uiNotificationService.show({\r\n        title: title,\r\n        message: text,\r\n        type: type,\r\n      });\r\n    },\r\n    clearMeasurements: () => {\r\n      measurementService.clear();\r\n    },\r\n\r\n    /**\r\n     * Toggles off all tools which contain a commandName of setHangingProtocol\r\n     * or toggleHangingProtocol, and which match/don't match the protocol id/stage\r\n     */\r\n    toggleHpTools: () => {\r\n      const {\r\n        protocol,\r\n        stageIndex: toggleStageIndex,\r\n        stage,\r\n      } = hangingProtocolService.getActiveProtocol();\r\n      const enableListener = button => {\r\n        if (!button.id) {\r\n          return;\r\n        }\r\n        const { commands, items } = button.props || button;\r\n        if (items) {\r\n          items.forEach(enableListener);\r\n        }\r\n        const hpCommand = commands?.find?.(isHangingProtocolCommand);\r\n        if (!hpCommand) {\r\n          return;\r\n        }\r\n        const { protocolId, stageIndex, stageId } = hpCommand.commandOptions;\r\n        const isActive =\r\n          (!protocolId || protocolId === protocol.id) &&\r\n          (stageIndex === undefined || stageIndex === toggleStageIndex) &&\r\n          (!stageId || stageId === stage.id);\r\n        toolbarService.setToggled(button.id, isActive);\r\n      };\r\n      Object.values(toolbarService.getButtons()).forEach(enableListener);\r\n    },\r\n\r\n    /**\r\n     *  Sets the specified protocol\r\n     *    1. Records any existing state using the viewport grid service\r\n     *    2. Finds the destination state - this can be one of:\r\n     *       a. The specified protocol stage\r\n     *       b. An alternate (toggled or restored) protocol stage\r\n     *       c. A restored custom layout\r\n     *    3. Finds the parameters for the specified state\r\n     *       a. Gets the displaySetSelectorMap\r\n     *       b. Gets the map by position\r\n     *       c. Gets any toggle mapping to map position to/from current view\r\n     *    4. If restore, then sets layout\r\n     *       a. Maps viewport position by currently displayed viewport map id\r\n     *       b. Uses toggle information to map display set id\r\n     *    5. Else applies the hanging protocol\r\n     *       a. HP Service is provided displaySetSelectorMap\r\n     *       b. HP Service will throw an exception if it isn't applicable\r\n     * @param options - contains information on the HP to apply\r\n     * @param options.activeStudyUID - the updated study to apply the HP to\r\n     * @param options.protocolId - the protocol ID to change to\r\n     * @param options.stageId - the stageId to apply\r\n     * @param options.stageIndex - the index of the stage to go to.\r\n     * @param options.reset - flag to indicate if the HP should be reset to its original and not restored to a previous state\r\n     */\r\n    setHangingProtocol: ({\r\n      activeStudyUID = '',\r\n      protocolId,\r\n      stageId,\r\n      stageIndex,\r\n      reset = false,\r\n    }: HangingProtocolParams): boolean => {\r\n      const primaryToolBeforeHPChange = toolbarService.getActivePrimaryTool();\r\n      try {\r\n        // Stores in the state the display set selector id to displaySetUID mapping\r\n        // Pass in viewportId for the active viewport.  This item will get set as\r\n        // the activeViewportId\r\n        const state = viewportGridService.getState();\r\n        const hpInfo = hangingProtocolService.getState();\r\n        const { protocol: oldProtocol } = hangingProtocolService.getActiveProtocol();\r\n        const stateSyncReduce = reuseCachedLayouts(state, hangingProtocolService, stateSyncService);\r\n        const { hangingProtocolStageIndexMap, viewportGridStore, displaySetSelectorMap } =\r\n          stateSyncReduce;\r\n\r\n        if (!protocolId) {\r\n          // Reuse the previous protocol id, and optionally stage\r\n          protocolId = hpInfo.protocolId;\r\n          if (stageId === undefined && stageIndex === undefined) {\r\n            stageIndex = hpInfo.stageIndex;\r\n          }\r\n        } else if (stageIndex === undefined && stageId === undefined) {\r\n          // Re-set the same stage as was previously used\r\n          const hangingId = `${activeStudyUID || hpInfo.activeStudyUID}:${protocolId}`;\r\n          stageIndex = hangingProtocolStageIndexMap[hangingId]?.stageIndex;\r\n        }\r\n\r\n        const useStageIdx =\r\n          stageIndex ??\r\n          hangingProtocolService.getStageIndex(protocolId, {\r\n            stageId,\r\n            stageIndex,\r\n          });\r\n\r\n        if (activeStudyUID) {\r\n          hangingProtocolService.setActiveStudyUID(activeStudyUID);\r\n        }\r\n\r\n        const storedHanging = `${hangingProtocolService.getState().activeStudyUID}:${protocolId}:${\r\n          useStageIdx || 0\r\n        }`;\r\n\r\n        const restoreProtocol = !reset && viewportGridStore[storedHanging];\r\n\r\n        if (\r\n          protocolId === hpInfo.protocolId &&\r\n          useStageIdx === hpInfo.stageIndex &&\r\n          !activeStudyUID\r\n        ) {\r\n          // Clear the HP setting to reset them\r\n          hangingProtocolService.setProtocol(protocolId, {\r\n            stageId,\r\n            stageIndex: useStageIdx,\r\n          });\r\n        } else {\r\n          hangingProtocolService.setProtocol(protocolId, {\r\n            displaySetSelectorMap,\r\n            stageId,\r\n            stageIndex: useStageIdx,\r\n            restoreProtocol,\r\n          });\r\n          if (restoreProtocol) {\r\n            viewportGridService.set(viewportGridStore[storedHanging]);\r\n          }\r\n        }\r\n        // Do this after successfully applying the update\r\n        // Note, don't store the active display set - it is only needed while\r\n        // changing display sets.  This causes jump to measurement to fail on\r\n        // multi-study display.\r\n        delete displaySetSelectorMap[\r\n          `${activeStudyUID || hpInfo.activeStudyUID}:activeDisplaySet:0`\r\n        ];\r\n        stateSyncService.store(stateSyncReduce);\r\n        // This is a default action applied\r\n        const { protocol } = hangingProtocolService.getActiveProtocol();\r\n        actions.toggleHpTools();\r\n\r\n        // try to use the same tool in the new hanging protocol stage\r\n        const primaryButton = toolbarService.getButton(primaryToolBeforeHPChange);\r\n        if (primaryButton) {\r\n          // is there any type of interaction on this button, if not it might be in the\r\n          // items. This is a bit of a hack, but it works for now.\r\n\r\n          let interactionType = primaryButton.props?.interactionType;\r\n\r\n          if (!interactionType && primaryButton.props?.items) {\r\n            const firstItem = primaryButton.props.items[0];\r\n            interactionType = firstItem.props?.interactionType || firstItem.props?.type;\r\n          }\r\n\r\n          if (interactionType) {\r\n            toolbarService.recordInteraction({\r\n              interactionType,\r\n              ...primaryButton.props,\r\n            });\r\n          }\r\n        }\r\n\r\n        // Send the notification about updating the state\r\n        if (protocolId !== hpInfo.protocolId) {\r\n          // The old protocol callbacks are used for turning off things\r\n          // like crosshairs when moving to the new HP\r\n          commandsManager.run(oldProtocol.callbacks?.onProtocolExit);\r\n          // The new protocol callback is used for things like\r\n          // activating modes etc.\r\n        }\r\n        commandsManager.run(protocol.callbacks?.onProtocolEnter);\r\n        return true;\r\n      } catch (e) {\r\n        console.error(e);\r\n        actions.toggleHpTools();\r\n        uiNotificationService.show({\r\n          title: 'Apply Hanging Protocol',\r\n          message: 'The hanging protocol could not be applied.',\r\n          type: 'error',\r\n          duration: 3000,\r\n        });\r\n        return false;\r\n      }\r\n    },\r\n\r\n    toggleHangingProtocol: ({ protocolId, stageIndex }: HangingProtocolParams): boolean => {\r\n      const {\r\n        protocol,\r\n        stageIndex: desiredStageIndex,\r\n        activeStudy,\r\n      } = hangingProtocolService.getActiveProtocol();\r\n      const { toggleHangingProtocol } = stateSyncService.getState();\r\n      const storedHanging = `${activeStudy.StudyInstanceUID}:${protocolId}:${stageIndex | 0}`;\r\n      if (\r\n        protocol.id === protocolId &&\r\n        (stageIndex === undefined || stageIndex === desiredStageIndex)\r\n      ) {\r\n        // Toggling off - restore to previous state\r\n        const previousState = toggleHangingProtocol[storedHanging] || {\r\n          protocolId: 'default',\r\n        };\r\n        return actions.setHangingProtocol(previousState);\r\n      } else {\r\n        stateSyncService.store({\r\n          toggleHangingProtocol: {\r\n            ...toggleHangingProtocol,\r\n            [storedHanging]: {\r\n              protocolId: protocol.id,\r\n              stageIndex: desiredStageIndex,\r\n            },\r\n          },\r\n        });\r\n        return actions.setHangingProtocol({\r\n          protocolId,\r\n          stageIndex,\r\n          reset: true,\r\n        });\r\n      }\r\n    },\r\n\r\n    deltaStage: ({ direction }) => {\r\n      const { protocolId, stageIndex: oldStageIndex } = hangingProtocolService.getState();\r\n      const { protocol } = hangingProtocolService.getActiveProtocol();\r\n      for (\r\n        let stageIndex = oldStageIndex + direction;\r\n        stageIndex >= 0 && stageIndex < protocol.stages.length;\r\n        stageIndex += direction\r\n      ) {\r\n        if (protocol.stages[stageIndex].status !== 'disabled') {\r\n          return actions.setHangingProtocol({\r\n            protocolId,\r\n            stageIndex,\r\n          });\r\n        }\r\n      }\r\n      uiNotificationService.show({\r\n        title: 'Change Stage',\r\n        message: 'The hanging protocol has no more applicable stages',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Changes the viewport grid layout in terms of the MxN layout.\r\n     */\r\n    setViewportGridLayout: ({ numRows, numCols }) => {\r\n      const { protocol } = hangingProtocolService.getActiveProtocol();\r\n      const onLayoutChange = protocol.callbacks?.onLayoutChange;\r\n      if (commandsManager.run(onLayoutChange, { numRows, numCols }) === false) {\r\n        console.log('setViewportGridLayout running', onLayoutChange, numRows, numCols);\r\n        // Don't apply the layout if the run command returns false\r\n        return;\r\n      }\r\n\r\n      const completeLayout = () => {\r\n        const state = viewportGridService.getState();\r\n        const stateReduce = findViewportsByPosition(state, { numRows, numCols }, stateSyncService);\r\n        const findOrCreateViewport = layoutFindOrCreate.bind(\r\n          null,\r\n          hangingProtocolService,\r\n          stateReduce.viewportsByPosition\r\n        );\r\n\r\n        viewportGridService.setLayout({\r\n          numRows,\r\n          numCols,\r\n          findOrCreateViewport,\r\n        });\r\n        stateSyncService.store(stateReduce);\r\n      };\r\n      // Need to finish any work in the callback\r\n      window.setTimeout(completeLayout, 0);\r\n    },\r\n\r\n    toggleOneUp() {\r\n      const viewportGridState = viewportGridService.getState();\r\n      const { activeViewportId, viewports, layout } = viewportGridState;\r\n      const { displaySetInstanceUIDs, displaySetOptions, viewportOptions } =\r\n        viewports.get(activeViewportId);\r\n\r\n      if (layout.numCols === 1 && layout.numRows === 1) {\r\n        // The viewer is in one-up. Check if there is a state to restore/toggle back to.\r\n        const { toggleOneUpViewportGridStore } = stateSyncService.getState();\r\n\r\n        if (!toggleOneUpViewportGridStore.layout) {\r\n          return;\r\n        }\r\n        // There is a state to toggle back to. The viewport that was\r\n        // originally toggled to one up was the former active viewport.\r\n        const viewportIdToUpdate = toggleOneUpViewportGridStore.activeViewportId;\r\n\r\n        // We are restoring the previous layout but taking into the account that\r\n        // the current one up viewport might have a new displaySet dragged and dropped on it.\r\n        // updatedViewportsViaHP below contains the viewports applicable to the HP that existed\r\n        // prior to the toggle to one-up - including the updated viewports if a display\r\n        // set swap were to have occurred.\r\n        const updatedViewportsViaHP =\r\n          displaySetInstanceUIDs.length > 1\r\n            ? []\r\n            : displaySetInstanceUIDs\r\n                .map(displaySetInstanceUID =>\r\n                  hangingProtocolService.getViewportsRequireUpdate(\r\n                    viewportIdToUpdate,\r\n                    displaySetInstanceUID\r\n                  )\r\n                )\r\n                .flat();\r\n\r\n        // findOrCreateViewport returns either one of the updatedViewportsViaHP\r\n        // returned from the HP service OR if there is not one from the HP service then\r\n        // simply returns what was in the previous state for a given position in the layout.\r\n        const findOrCreateViewport = (position: number, positionId: string) => {\r\n          // Find the viewport for the given position prior to the toggle to one-up.\r\n          const preOneUpViewport = Array.from(toggleOneUpViewportGridStore.viewports.values()).find(\r\n            viewport => viewport.positionId === positionId\r\n          );\r\n\r\n          // Use the viewport id from before the toggle to one-up to find any updates to the viewport.\r\n          const viewport = updatedViewportsViaHP.find(\r\n            viewport => viewport.viewportId === preOneUpViewport.viewportId\r\n          );\r\n\r\n          return viewport\r\n            ? // Use the applicable viewport from the HP updated viewports\r\n              { viewportOptions, displaySetOptions, ...viewport }\r\n            : // Use the previous viewport for the given position\r\n              preOneUpViewport;\r\n        };\r\n\r\n        const layoutOptions = viewportGridService.getLayoutOptionsFromState(\r\n          toggleOneUpViewportGridStore\r\n        );\r\n\r\n        // Restore the previous layout including the active viewport.\r\n        viewportGridService.setLayout({\r\n          numRows: toggleOneUpViewportGridStore.layout.numRows,\r\n          numCols: toggleOneUpViewportGridStore.layout.numCols,\r\n          activeViewportId: viewportIdToUpdate,\r\n          layoutOptions,\r\n          findOrCreateViewport,\r\n        });\r\n      } else {\r\n        // We are not in one-up, so toggle to one up.\r\n\r\n        // Store the current viewport grid state so we can toggle it back later.\r\n        stateSyncService.store({\r\n          toggleOneUpViewportGridStore: viewportGridState,\r\n        });\r\n\r\n        // This findOrCreateViewport only return one viewport - the active\r\n        // one being toggled to one up.\r\n        const findOrCreateViewport = () => {\r\n          return {\r\n            displaySetInstanceUIDs,\r\n            displaySetOptions,\r\n            viewportOptions,\r\n          };\r\n        };\r\n\r\n        // Set the layout to be 1x1/one-up.\r\n        viewportGridService.setLayout({\r\n          numRows: 1,\r\n          numCols: 1,\r\n          findOrCreateViewport,\r\n        });\r\n\r\n        // Subscribe to ANY (i.e. manual and hanging protocol) layout changes so that\r\n        // any grid layout state to toggle to from one up is cleared. This is performed on\r\n        // a timeout to avoid clearing the state for the actual to one up change.\r\n        // Whenever the next layout change event is fired, the subscriptions are unsubscribed.\r\n        const clearToggleOneUpViewportGridStore = () => {\r\n          const toggleOneUpViewportGridStore = {};\r\n          stateSyncService.store({\r\n            toggleOneUpViewportGridStore,\r\n          });\r\n        };\r\n\r\n        subscribeToNextViewportGridChange(viewportGridService, clearToggleOneUpViewportGridStore);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Exposes the browser history navigation used by OHIF. This command can be used to either replace or\r\n     * push a new entry into the browser history. For example, the following will replace the current\r\n     * browser history entry with the specified relative URL which changes the study displayed to the\r\n     * study with study instance UID 1.2.3. Note that as a result of using `options.replace = true`, the\r\n     * page prior to invoking this command cannot be returned to via the browser back button.\r\n     *\r\n     * navigateHistory({\r\n     *   to: 'viewer?StudyInstanceUIDs=1.2.3',\r\n     *   options: { replace: true },\r\n     * });\r\n     *\r\n     * @param historyArgs - arguments for the history function;\r\n     *                      the `to` property is the URL;\r\n     *                      the `options.replace` is a boolean indicating if the current browser history entry\r\n     *                      should be replaced or a new entry pushed onto the history (stack); the default value\r\n     *                      for `replace` is false\r\n     */\r\n    navigateHistory(historyArgs: NavigateHistory) {\r\n      history.navigate(historyArgs.to, historyArgs.options);\r\n    },\r\n\r\n    openDICOMTagViewer() {\r\n      const { activeViewportId, viewports } = viewportGridService.getState();\r\n      const activeViewportSpecificData = viewports.get(activeViewportId);\r\n      const { displaySetInstanceUIDs } = activeViewportSpecificData;\r\n\r\n      const displaySets = displaySetService.activeDisplaySets;\r\n      const { UIModalService } = servicesManager.services;\r\n\r\n      const displaySetInstanceUID = displaySetInstanceUIDs[0];\r\n      UIModalService.show({\r\n        content: DicomTagBrowser,\r\n        contentProps: {\r\n          displaySets,\r\n          displaySetInstanceUID,\r\n          onClose: UIModalService.hide,\r\n        },\r\n        title: 'DICOM Tag Browser',\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Toggle viewport overlay (the information panel shown on the four corners\r\n     * of the viewport)\r\n     * @see ViewportOverlay and CustomizableViewportOverlay components\r\n     */\r\n    toggleOverlays: () => {\r\n      const overlays = document.getElementsByClassName('viewport-overlay');\r\n      for (let i = 0; i < overlays.length; i++) {\r\n        overlays.item(i).classList.toggle('hidden');\r\n      }\r\n    },\r\n\r\n    scrollActiveThumbnailIntoView: () => {\r\n      const { activeViewportId, viewports } = viewportGridService.getState();\r\n\r\n      const activeViewport = viewports.get(activeViewportId);\r\n      const activeDisplaySetInstanceUID = activeViewport.displaySetInstanceUIDs[0];\r\n\r\n      const thumbnailList = document.querySelector('#ohif-thumbnail-list');\r\n\r\n      if (!thumbnailList) {\r\n        return;\r\n      }\r\n\r\n      const thumbnailListBounds = thumbnailList.getBoundingClientRect();\r\n\r\n      const thumbnail = document.querySelector(`#thumbnail-${activeDisplaySetInstanceUID}`);\r\n\r\n      if (!thumbnail) {\r\n        return;\r\n      }\r\n\r\n      const thumbnailBounds = thumbnail.getBoundingClientRect();\r\n\r\n      // This only handles a vertical thumbnail list.\r\n      if (\r\n        thumbnailBounds.top >= thumbnailListBounds.top &&\r\n        thumbnailBounds.top <= thumbnailListBounds.bottom\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      thumbnail.scrollIntoView({ behavior: 'smooth' });\r\n    },\r\n\r\n    updateViewportDisplaySet: ({\r\n      direction,\r\n      excludeNonImageModalities,\r\n    }: UpdateViewportDisplaySetParams) => {\r\n      const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\r\n\r\n      // Sort the display sets as per the hanging protocol service viewport/display set scoring system.\r\n      // The thumbnail list uses the same sorting.\r\n      const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\r\n      const currentDisplaySets = [...displaySetService.activeDisplaySets];\r\n\r\n      currentDisplaySets.sort(dsSortFn);\r\n\r\n      const { activeViewportId, viewports } = viewportGridService.getState();\r\n\r\n      const { displaySetInstanceUIDs } = viewports.get(activeViewportId);\r\n\r\n      const activeDisplaySetIndex = currentDisplaySets.findIndex(displaySet =>\r\n        displaySetInstanceUIDs.includes(displaySet.displaySetInstanceUID)\r\n      );\r\n\r\n      let displaySetIndexToShow: number;\r\n\r\n      for (\r\n        displaySetIndexToShow = activeDisplaySetIndex + direction;\r\n        displaySetIndexToShow > -1 && displaySetIndexToShow < currentDisplaySets.length;\r\n        displaySetIndexToShow += direction\r\n      ) {\r\n        if (\r\n          !excludeNonImageModalities ||\r\n          !nonImageModalities.includes(currentDisplaySets[displaySetIndexToShow].Modality)\r\n        ) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (displaySetIndexToShow < 0 || displaySetIndexToShow >= currentDisplaySets.length) {\r\n        return;\r\n      }\r\n\r\n      const { displaySetInstanceUID } = currentDisplaySets[displaySetIndexToShow];\r\n\r\n      let updatedViewports = [];\r\n\r\n      try {\r\n        updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n          activeViewportId,\r\n          displaySetInstanceUID\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        uiNotificationService.show({\r\n          title: 'Navigate Viewport Display Set',\r\n          message:\r\n            'The requested display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n          type: 'info',\r\n          duration: 3000,\r\n        });\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n\r\n      setTimeout(() => actions.scrollActiveThumbnailIntoView(), 0);\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    showContextMenu: {\r\n      commandFn: actions.showContextMenu,\r\n    },\r\n    closeContextMenu: {\r\n      commandFn: actions.closeContextMenu,\r\n    },\r\n    clearMeasurements: {\r\n      commandFn: actions.clearMeasurements,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    displayNotification: {\r\n      commandFn: actions.displayNotification,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    setHangingProtocol: {\r\n      commandFn: actions.setHangingProtocol,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    toggleHangingProtocol: {\r\n      commandFn: actions.toggleHangingProtocol,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    navigateHistory: {\r\n      commandFn: actions.navigateHistory,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    nextStage: {\r\n      commandFn: actions.deltaStage,\r\n      storeContexts: [],\r\n      options: { direction: 1 },\r\n    },\r\n    previousStage: {\r\n      commandFn: actions.deltaStage,\r\n      storeContexts: [],\r\n      options: { direction: -1 },\r\n    },\r\n    setViewportGridLayout: {\r\n      commandFn: actions.setViewportGridLayout,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    toggleOneUp: {\r\n      commandFn: actions.toggleOneUp,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    openDICOMTagViewer: {\r\n      commandFn: actions.openDICOMTagViewer,\r\n    },\r\n    updateViewportDisplaySet: {\r\n      commandFn: actions.updateViewportDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'DEFAULT',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { Types } from '@ohif/core';\r\n\r\n/**\r\n * This hanging protocol can be activated on the primary mode by directly\r\n * referencing it in a URL or by directly including it within a mode, e.g.:\r\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\r\n * It is not included in the viewer mode by default.\r\n */\r\nconst hpMN: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/mnGrid',\r\n  description: 'Has various hanging protocol grid layouts',\r\n  name: '2x2',\r\n  protocolMatchingRules: [\r\n    {\r\n      id: 'OneOrMoreSeries',\r\n      weight: 25,\r\n      attribute: 'numberOfDisplaySetsWithImages',\r\n      constraint: {\r\n        greaterThan: 0,\r\n      },\r\n    },\r\n  ],\r\n  toolGroupIds: ['default'],\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'numImageFrames',\r\n          constraint: {\r\n            greaterThan: { value: 0 },\r\n          },\r\n          required: true,\r\n        },\r\n        // This display set will select the specified items by preference\r\n        // It has no affect if nothing is specified in the URL.\r\n        {\r\n          attribute: 'isDisplaySetFromUrl',\r\n          weight: 10,\r\n          constraint: {\r\n            equals: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'defaultDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  stages: [\r\n    {\r\n      id: '2x2',\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 4,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 2,\r\n          columns: 2,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              matchedDisplaySetsIndex: 1,\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              matchedDisplaySetsIndex: 2,\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              matchedDisplaySetsIndex: 3,\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n\r\n    // 3x1 stage\r\n    {\r\n      id: '3x1',\r\n      // Obsolete settings:\r\n      requiredViewports: 1,\r\n      preferredViewports: 3,\r\n      // New equivalent:\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 3,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n              matchedDisplaySetsIndex: 1,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n              matchedDisplaySetsIndex: 2,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n\r\n    // A 2x1 stage\r\n    {\r\n      id: '2x1',\r\n      requiredViewports: 1,\r\n      preferredViewports: 2,\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 2,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 2,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              matchedDisplaySetsIndex: 1,\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n\r\n    // A 1x1 stage - should be automatically activated if there is only 1 viewable instance\r\n    {\r\n      id: '1x1',\r\n      requiredViewports: 1,\r\n      preferredViewports: 1,\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 1,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            toolGroupId: 'default',\r\n            allowUnmatchedView: true,\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  numberOfPriorsReferenced: -1,\r\n};\r\n\r\nexport default hpMN;\r\n","import { Types } from '@ohif/core';\r\n\r\nconst defaultDisplaySetSelector = {\r\n  studyMatchingRules: [\r\n    {\r\n      // The priorInstance is a study counter that indicates what position this study is in\r\n      // and the value comes from the options parameter.\r\n      attribute: 'studyInstanceUIDsIndex',\r\n      from: 'options',\r\n      required: true,\r\n      constraint: {\r\n        equals: { value: 0 },\r\n      },\r\n    },\r\n  ],\r\n  seriesMatchingRules: [\r\n    {\r\n      attribute: 'numImageFrames',\r\n      constraint: {\r\n        greaterThan: { value: 0 },\r\n      },\r\n    },\r\n    // This display set will select the specified items by preference\r\n    // It has no affect if nothing is specified in the URL.\r\n    {\r\n      attribute: 'isDisplaySetFromUrl',\r\n      weight: 10,\r\n      constraint: {\r\n        equals: true,\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst priorDisplaySetSelector = {\r\n  studyMatchingRules: [\r\n    {\r\n      // The priorInstance is a study counter that indicates what position this study is in\r\n      // and the value comes from the options parameter.\r\n      attribute: 'studyInstanceUIDsIndex',\r\n      from: 'options',\r\n      required: true,\r\n      constraint: {\r\n        equals: { value: 1 },\r\n      },\r\n    },\r\n  ],\r\n  seriesMatchingRules: [\r\n    {\r\n      attribute: 'numImageFrames',\r\n      constraint: {\r\n        greaterThan: { value: 0 },\r\n      },\r\n    },\r\n    // This display set will select the specified items by preference\r\n    // It has no affect if nothing is specified in the URL.\r\n    {\r\n      attribute: 'isDisplaySetFromUrl',\r\n      weight: 10,\r\n      constraint: {\r\n        equals: true,\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst currentDisplaySet = {\r\n  id: 'defaultDisplaySetId',\r\n};\r\n\r\nconst priorDisplaySet = {\r\n  id: 'priorDisplaySetId',\r\n};\r\n\r\nconst currentViewport0 = {\r\n  viewportOptions: {\r\n    toolGroupId: 'default',\r\n    allowUnmatchedView: true,\r\n  },\r\n  displaySets: [currentDisplaySet],\r\n};\r\n\r\nconst currentViewport1 = {\r\n  ...currentViewport0,\r\n  displaySets: [\r\n    {\r\n      ...currentDisplaySet,\r\n      matchedDisplaySetsIndex: 1,\r\n    },\r\n  ],\r\n};\r\n\r\nconst priorViewport0 = {\r\n  ...currentViewport0,\r\n  displaySets: [priorDisplaySet],\r\n};\r\n\r\nconst priorViewport1 = {\r\n  ...priorViewport0,\r\n  displaySets: [\r\n    {\r\n      ...priorDisplaySet,\r\n      matchedDisplaySetsIndex: 1,\r\n    },\r\n  ],\r\n};\r\n\r\n/**\r\n * This hanging protocol can be activated on the primary mode by directly\r\n * referencing it in a URL or by directly including it within a mode, e.g.:\r\n * `&hangingProtocolId=@ohif/mnGrid` added to the viewer URL\r\n * It is not included in the viewer mode by default.\r\n */\r\nconst hpMNCompare: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/hpCompare',\r\n  description: 'Compare two studies in various layouts',\r\n  name: 'Compare Two Studies',\r\n  numberOfPriorsReferenced: 1,\r\n  protocolMatchingRules: [\r\n    {\r\n      id: 'Two Studies',\r\n      weight: 1000,\r\n      attribute: 'StudyInstanceUID',\r\n      // The 'from' attribute says where to get the 'attribute' value from.  In this case\r\n      // prior means the second study in the study list.\r\n      from: 'prior',\r\n      required: true,\r\n      constraint: {\r\n        notNull: true,\r\n      },\r\n    },\r\n  ],\r\n  toolGroupIds: ['default'],\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: defaultDisplaySetSelector,\r\n    priorDisplaySetId: priorDisplaySetSelector,\r\n  },\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'defaultDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  stages: [\r\n    {\r\n      name: '2x2',\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 4,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 2,\r\n          columns: 2,\r\n        },\r\n      },\r\n      viewports: [currentViewport0, priorViewport0, currentViewport1, priorViewport1],\r\n    },\r\n\r\n    {\r\n      name: '2x1',\r\n      stageActivation: {\r\n        enabled: {\r\n          minViewportsMatched: 2,\r\n        },\r\n      },\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 2,\r\n        },\r\n      },\r\n      viewports: [currentViewport0, priorViewport0],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default hpMNCompare;\r\n","import hpMNGrid from './hpMNGrid';\r\nimport hpMNCompare from './hpCompare';\r\n\r\nconst defaultProtocol = {\r\n  id: 'default',\r\n  locked: true,\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'Default',\r\n  createdDate: '2021-02-23T19:22:08.894Z',\r\n  modifiedDate: '2023-04-01',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'defaultDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: {\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        // Try to match series with images by default, to prevent weird display\r\n        // on SEG/SR containing studies\r\n        {\r\n          attribute: 'numImageFrames',\r\n          constraint: {\r\n            greaterThan: { value: 0 },\r\n          },\r\n        },\r\n        // This display set will select the specified items by preference\r\n        // It has no affect if nothing is specified in the URL.\r\n        {\r\n          attribute: 'isDisplaySetFromUrl',\r\n          weight: 10,\r\n          constraint: {\r\n            equals: true,\r\n          },\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'default',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            viewportType: 'stack',\r\n            viewportId: 'default',\r\n            toolGroupId: 'default',\r\n            // This will specify the initial image options index if it matches in the URL\r\n            // and will otherwise not specify anything.\r\n            initialImageOptions: {\r\n              custom: 'sopInstanceLocation',\r\n            },\r\n            // Other options for initialImageOptions, which can be included in the default\r\n            // custom attribute, or can be provided directly.\r\n            //   index: 180,\r\n            //   preset: 'middle', // 'first', 'last', 'middle'\r\n            // },\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'defaultDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      createdDate: '2021-02-23T18:32:42.850Z',\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: defaultProtocol.id,\r\n      protocol: defaultProtocol,\r\n    },\r\n    // Create a MxN hanging protocol available by default\r\n    {\r\n      name: hpMNGrid.id,\r\n      protocol: hpMNGrid,\r\n    },\r\n    // Create a MxN comparison hanging protocol available by default\r\n    {\r\n      name: hpMNCompare.id,\r\n      protocol: hpMNCompare,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppConfig } from '@state';\r\n\r\nimport { Button, ButtonEnums } from '@ohif/ui';\r\n\r\nfunction DataSourceSelector() {\r\n  const [appConfig] = useAppConfig();\r\n  const navigate = useNavigate();\r\n\r\n  // This is frowned upon, but the raw config is needed here to provide\r\n  // the selector\r\n  const dsConfigs = appConfig.dataSources;\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%' }}>\r\n      <div className=\"flex h-screen w-screen items-center justify-center \">\r\n        <div className=\"bg-secondary-dark mx-auto space-y-2 rounded-lg py-8 px-8 drop-shadow-md\">\r\n          <img\r\n            className=\"mx-auto block h-14\"\r\n            src=\"./ohif-logo.svg\"\r\n            alt=\"OHIF\"\r\n          />\r\n          <div className=\"space-y-2 pt-4 text-center\">\r\n            {dsConfigs\r\n              .filter(it => it.sourceName !== 'dicomjson' && it.sourceName !== 'dicomlocal')\r\n              .map(ds => (\r\n                <div key={ds.sourceName}>\r\n                  <h1 className=\"text-white\">\r\n                    {ds.configuration?.friendlyName || ds.friendlyName}\r\n                  </h1>\r\n                  <Button\r\n                    type={ButtonEnums.type.primary}\r\n                    className={classnames('ml-2')}\r\n                    onClick={() => {\r\n                      navigate({\r\n                        pathname: '/',\r\n                        search: `datasources=${ds.sourceName}`,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {ds.sourceName}\r\n                  </Button>\r\n                  <br />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataSourceSelector;\r\n","import classNames from 'classnames';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Icon, InputFilterText, LoadingIndicatorProgress } from '@ohif/ui';\r\nimport { Types } from '@ohif/core';\r\n\r\ntype ItemListComponentProps = {\r\n  itemLabel: string;\r\n  itemList: Array<Types.BaseDataSourceConfigurationAPIItem>;\r\n  onItemClicked: (item: Types.BaseDataSourceConfigurationAPIItem) => void;\r\n};\r\n\r\nfunction ItemListComponent({\r\n  itemLabel,\r\n  itemList,\r\n  onItemClicked,\r\n}: ItemListComponentProps): ReactElement {\r\n  const { t } = useTranslation('DataSourceConfiguration');\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    setFilterValue('');\r\n  }, [itemList]);\r\n\r\n  return (\r\n    <div className=\"flex min-h-[1px] grow flex-col gap-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"text-primary-light text-[20px]\">{t(`Select ${itemLabel}`)}</div>\r\n        <InputFilterText\r\n          className=\"max-w-[40%] grow\"\r\n          value={filterValue}\r\n          onDebounceChange={setFilterValue}\r\n          placeholder={t(`Search ${itemLabel} list`)}\r\n        ></InputFilterText>\r\n      </div>\r\n      <div className=\"relative flex min-h-[1px] grow flex-col bg-black text-[14px]\">\r\n        {itemList == null ? (\r\n          <LoadingIndicatorProgress className={'h-full w-full'} />\r\n        ) : itemList.length === 0 ? (\r\n          <div className=\"text-primary-light flex h-full flex-col items-center justify-center px-6 py-4\">\r\n            <Icon\r\n              name=\"magnifier\"\r\n              className=\"mb-4\"\r\n            />\r\n            <span>{t(`No ${itemLabel} available`)}</span>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"bg-secondary-dark px-3 py-1.5 text-white\">{t(itemLabel)}</div>\r\n            <div className=\"ohif-scrollbar overflow-auto\">\r\n              {itemList\r\n                .filter(\r\n                  item =>\r\n                    !filterValue || item.name.toLowerCase().includes(filterValue.toLowerCase())\r\n                )\r\n                .map(item => {\r\n                  const border =\r\n                    'rounded border-transparent border-b-secondary-light border-[1px] hover:border-primary-light';\r\n                  return (\r\n                    <div\r\n                      className={classNames(\r\n                        'hover:text-primary-light hover:bg-primary-dark group mx-2 flex items-center justify-between px-6 py-2',\r\n                        border\r\n                      )}\r\n                      key={item.id}\r\n                    >\r\n                      <div>{item.name}</div>\r\n                      <Button\r\n                        onClick={() => onItemClicked(item)}\r\n                        className=\"invisible group-hover:visible\"\r\n                        endIcon={<Icon name=\"arrow-left\" />}\r\n                      >\r\n                        {t('Select')}\r\n                      </Button>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemListComponent;\r\n","import classNames from 'classnames';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon } from '@ohif/ui';\r\nimport { Types } from '@ohif/core';\r\nimport ItemListComponent from './ItemListComponent';\r\n\r\nconst NO_WRAP_ELLIPSIS_CLASS_NAMES = 'text-ellipsis whitespace-nowrap overflow-hidden';\r\n\r\ntype DataSourceConfigurationModalComponentProps = {\r\n  configurationAPI: Types.BaseDataSourceConfigurationAPI;\r\n  configuredItems: Array<Types.BaseDataSourceConfigurationAPIItem>;\r\n  onHide: () => void;\r\n};\r\n\r\nfunction DataSourceConfigurationModalComponent({\r\n  configurationAPI,\r\n  configuredItems,\r\n  onHide,\r\n}: DataSourceConfigurationModalComponentProps) {\r\n  const { t } = useTranslation('DataSourceConfiguration');\r\n\r\n  const [itemList, setItemList] = useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\r\n\r\n  const [selectedItems, setSelectedItems] = useState(configuredItems);\r\n\r\n  const [errorMessage, setErrorMessage] = useState<string>();\r\n\r\n  const [itemLabels] = useState(configurationAPI.getItemLabels());\r\n\r\n  // Determines whether to show the full/existing configuration for the data source.\r\n  // A full or complete configuration is one where the data source (path) has the\r\n  // maximum/required number of path items. Anything less is considered not complete and\r\n  // the configuration starts from scratch (i.e. as if no items are configured at all).\r\n  // TODO: consider configuration starting from a partial (i.e. non-empty) configuration\r\n  const [showFullConfig, setShowFullConfig] = useState(\r\n    itemLabels.length === configuredItems.length\r\n  );\r\n\r\n  /**\r\n   * The index of the selected item that is considered current and for which\r\n   * its sub-items should be displayed in the items list component. When the\r\n   * full/existing configuration for a data source is to be shown, the current\r\n   * selected item is the second to last in the `selectedItems` list.\r\n   */\r\n  const currentSelectedItemIndex = showFullConfig\r\n    ? selectedItems.length - 2\r\n    : selectedItems.length - 1;\r\n\r\n  useEffect(() => {\r\n    let shouldUpdate = true;\r\n\r\n    setErrorMessage(null);\r\n\r\n    // Clear out the former/old list while we fetch the next sub item list.\r\n    setItemList(null);\r\n\r\n    if (selectedItems.length === 0) {\r\n      configurationAPI\r\n        .initialize()\r\n        .then(items => {\r\n          if (shouldUpdate) {\r\n            setItemList(items);\r\n          }\r\n        })\r\n        .catch(error => setErrorMessage(error.message));\r\n    } else if (!showFullConfig && selectedItems.length === itemLabels.length) {\r\n      // The last item to configure the data source (path) has been selected.\r\n      configurationAPI.setCurrentItem(selectedItems[selectedItems.length - 1]);\r\n      // We can hide the modal dialog now.\r\n      onHide();\r\n    } else {\r\n      configurationAPI\r\n        .setCurrentItem(selectedItems[currentSelectedItemIndex])\r\n        .then(items => {\r\n          if (shouldUpdate) {\r\n            setItemList(items);\r\n          }\r\n        })\r\n        .catch(error => setErrorMessage(error.message));\r\n    }\r\n\r\n    return () => {\r\n      shouldUpdate = false;\r\n    };\r\n  }, [\r\n    selectedItems,\r\n    configurationAPI,\r\n    onHide,\r\n    itemLabels,\r\n    showFullConfig,\r\n    currentSelectedItemIndex,\r\n  ]);\r\n\r\n  const getSelectedItemCursorClasses = itemIndex =>\r\n    itemIndex !== itemLabels.length - 1 && itemIndex < selectedItems.length\r\n      ? 'cursor-pointer'\r\n      : 'cursor-auto';\r\n\r\n  const getSelectedItemBackgroundClasses = itemIndex =>\r\n    itemIndex < selectedItems.length\r\n      ? classNames(\r\n          'bg-black/[.4]',\r\n          itemIndex !== itemLabels.length - 1 ? 'hover:bg-transparent active:bg-secondary-dark' : ''\r\n        )\r\n      : 'bg-transparent';\r\n\r\n  const getSelectedItemBorderClasses = itemIndex =>\r\n    itemIndex === currentSelectedItemIndex + 1\r\n      ? classNames('border-2', 'border-solid', 'border-primary-light')\r\n      : itemIndex < selectedItems.length\r\n      ? 'border border-solid border-primary-active hover:border-primary-light active:border-white'\r\n      : 'border border-dashed border-secondary-light';\r\n\r\n  const getSelectedItemTextClasses = itemIndex =>\r\n    itemIndex <= selectedItems.length ? 'text-primary-light' : 'text-primary-active';\r\n\r\n  const getErrorComponent = (): ReactElement => {\r\n    return (\r\n      <div className=\"flex min-h-[1px] grow flex-col gap-4\">\r\n        <div className=\"text-primary-light text-[20px]\">\r\n          {t(`Error fetching ${itemLabels[selectedItems.length]} list`)}\r\n        </div>\r\n        <div className=\"grow bg-black p-4 text-[14px]\">{errorMessage}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getSelectedItemsComponent = (): ReactElement => {\r\n    return (\r\n      <div className=\"flex gap-4\">\r\n        {itemLabels.map((itemLabel, itemLabelIndex) => {\r\n          return (\r\n            <div\r\n              key={itemLabel}\r\n              className={classNames(\r\n                'flex min-w-[1px] shrink basis-[200px] flex-col gap-1 rounded-md p-3.5',\r\n                getSelectedItemCursorClasses(itemLabelIndex),\r\n                getSelectedItemBackgroundClasses(itemLabelIndex),\r\n                getSelectedItemBorderClasses(itemLabelIndex),\r\n                getSelectedItemTextClasses(itemLabelIndex)\r\n              )}\r\n              onClick={\r\n                (showFullConfig && itemLabelIndex < currentSelectedItemIndex) ||\r\n                itemLabelIndex <= currentSelectedItemIndex\r\n                  ? () => {\r\n                      setShowFullConfig(false);\r\n                      setSelectedItems(theList => theList.slice(0, itemLabelIndex));\r\n                    }\r\n                  : undefined\r\n              }\r\n            >\r\n              <div className=\"text- flex items-center gap-2\">\r\n                {itemLabelIndex < selectedItems.length ? (\r\n                  <Icon name=\"status-tracked\" />\r\n                ) : (\r\n                  <Icon name=\"status-untracked\" />\r\n                )}\r\n                <div className={classNames(NO_WRAP_ELLIPSIS_CLASS_NAMES)}>{t(itemLabel)}</div>\r\n              </div>\r\n              {itemLabelIndex < selectedItems.length ? (\r\n                <div className={classNames('text-[14px] text-white', NO_WRAP_ELLIPSIS_CLASS_NAMES)}>\r\n                  {selectedItems[itemLabelIndex].name}\r\n                </div>\r\n              ) : (\r\n                <br></br>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-[calc(100vh-300px)] select-none flex-col gap-4 pt-0.5\">\r\n      {getSelectedItemsComponent()}\r\n      <div className=\"h-0.5 w-full shrink-0 bg-black\"></div>\r\n      {errorMessage ? (\r\n        getErrorComponent()\r\n      ) : (\r\n        <ItemListComponent\r\n          itemLabel={itemLabels[currentSelectedItemIndex + 1]}\r\n          itemList={itemList}\r\n          onItemClicked={item => {\r\n            setShowFullConfig(false);\r\n            setSelectedItems(theList => [...theList.slice(0, currentSelectedItemIndex + 1), item]);\r\n          }}\r\n        ></ItemListComponent>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataSourceConfigurationModalComponent;\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon, useModal } from '@ohif/ui';\r\nimport { ExtensionManager, ServicesManager, Types } from '@ohif/core';\r\nimport DataSourceConfigurationModalComponent from './DataSourceConfigurationModalComponent';\r\n\r\ntype DataSourceConfigurationComponentProps = {\r\n  servicesManager: ServicesManager;\r\n  extensionManager: ExtensionManager;\r\n};\r\n\r\nfunction DataSourceConfigurationComponent({\r\n  servicesManager,\r\n  extensionManager,\r\n}: DataSourceConfigurationComponentProps): ReactElement {\r\n  const { t } = useTranslation('DataSourceConfiguration');\r\n  const { show, hide } = useModal();\r\n\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const [configurationAPI, setConfigurationAPI] = useState<Types.BaseDataSourceConfigurationAPI>();\r\n\r\n  const [configuredItems, setConfiguredItems] =\r\n    useState<Array<Types.BaseDataSourceConfigurationAPIItem>>();\r\n\r\n  useEffect(() => {\r\n    let shouldUpdate = true;\r\n\r\n    const dataSourceChangedCallback = async () => {\r\n      const activeDataSourceDef = extensionManager.getActiveDataSourceDefinition();\r\n\r\n      if (!activeDataSourceDef.configuration.configurationAPI) {\r\n        return;\r\n      }\r\n\r\n      const { factory: configurationAPIFactory } =\r\n        customizationService.get(activeDataSourceDef.configuration.configurationAPI) ?? {};\r\n\r\n      if (!configurationAPIFactory) {\r\n        return;\r\n      }\r\n\r\n      const configAPI = configurationAPIFactory(activeDataSourceDef.sourceName);\r\n      setConfigurationAPI(configAPI);\r\n\r\n      // New configuration API means that the existing configured items must be cleared.\r\n      setConfiguredItems(null);\r\n\r\n      configAPI.getConfiguredItems().then(list => {\r\n        if (shouldUpdate) {\r\n          setConfiguredItems(list);\r\n        }\r\n      });\r\n    };\r\n\r\n    const sub = extensionManager.subscribe(\r\n      extensionManager.EVENTS.ACTIVE_DATA_SOURCE_CHANGED,\r\n      dataSourceChangedCallback\r\n    );\r\n\r\n    dataSourceChangedCallback();\r\n\r\n    return () => {\r\n      shouldUpdate = false;\r\n      sub.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const showConfigurationModal = useCallback(() => {\r\n    show({\r\n      content: DataSourceConfigurationModalComponent,\r\n      title: t('Configure Data Source'),\r\n      contentProps: {\r\n        configurationAPI,\r\n        configuredItems,\r\n        onHide: hide,\r\n      },\r\n    });\r\n  }, [configurationAPI, configuredItems]);\r\n\r\n  useEffect(() => {\r\n    if (!configurationAPI || !configuredItems) {\r\n      return;\r\n    }\r\n\r\n    if (configuredItems.length !== configurationAPI.getItemLabels().length) {\r\n      // Not the correct number of configured items, so show the modal to configure the data source.\r\n      showConfigurationModal();\r\n    }\r\n  }, [configurationAPI, configuredItems, showConfigurationModal]);\r\n\r\n  return configuredItems ? (\r\n    <div className=\"text-aqua-pale flex items-center overflow-hidden\">\r\n      <Icon\r\n        name=\"settings\"\r\n        className=\"mr-2.5 h-3.5 w-3.5 shrink-0 cursor-pointer\"\r\n        onClick={showConfigurationModal}\r\n      ></Icon>\r\n      {configuredItems.map((item, itemIndex) => {\r\n        return (\r\n          <div\r\n            key={itemIndex}\r\n            className=\"flex overflow-hidden\"\r\n          >\r\n            <div\r\n              key={itemIndex}\r\n              className=\"overflow-hidden text-ellipsis whitespace-nowrap\"\r\n            >\r\n              {item.name}\r\n            </div>\r\n            {itemIndex !== configuredItems.length - 1 && <div className=\"px-2.5\">|</div>}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default DataSourceConfigurationComponent;\r\n","import { ExtensionManager, Types } from '@ohif/core';\r\n\r\n/**\r\n * This file contains the implementations of BaseDataSourceConfigurationAPIItem\r\n * and BaseDataSourceConfigurationAPI for the Google cloud healthcare API. To\r\n * better understand this implementation and/or to implement custom implementations,\r\n * see the platform\\core\\src\\types\\DataSourceConfigurationAPI.ts and its JS doc\r\n * comments as a guide.\r\n */\r\n\r\n/**\r\n * The various Google Cloud Healthcare path item types.\r\n */\r\nenum ItemType {\r\n  projects = 0,\r\n  locations = 1,\r\n  datasets = 2,\r\n  dicomStores = 3,\r\n}\r\n\r\ninterface NamedItem {\r\n  name: string;\r\n}\r\ninterface Project extends NamedItem {\r\n  projectId: string;\r\n}\r\n\r\nconst initialUrl = 'https://cloudresourcemanager.googleapis.com/v1';\r\nconst baseHealthcareUrl = 'https://healthcare.googleapis.com/v1';\r\n\r\nclass GoogleCloudDataSourceConfigurationAPIItem\r\n  implements Types.BaseDataSourceConfigurationAPIItem\r\n{\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  itemType: ItemType;\r\n}\r\n\r\nclass GoogleCloudDataSourceConfigurationAPI implements Types.BaseDataSourceConfigurationAPI {\r\n  private _extensionManager: ExtensionManager;\r\n  private _fetchOptions: { method: string; headers: unknown };\r\n  private _dataSourceName: string;\r\n\r\n  constructor(dataSourceName, servicesManager, extensionManager) {\r\n    this._dataSourceName = dataSourceName;\r\n    this._extensionManager = extensionManager;\r\n    const userAuthenticationService = servicesManager.services.userAuthenticationService;\r\n    this._fetchOptions = {\r\n      method: 'GET',\r\n      headers: userAuthenticationService.getAuthorizationHeader(),\r\n    };\r\n  }\r\n\r\n  getItemLabels = () => ['Project', 'Location', 'Data set', 'DICOM store'];\r\n\r\n  async initialize(): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\r\n    const url = `${initialUrl}/projects`;\r\n\r\n    const projects = (await GoogleCloudDataSourceConfigurationAPI._doFetch(\r\n      url,\r\n      ItemType.projects,\r\n      this._fetchOptions\r\n    )) as Array<Project>;\r\n\r\n    if (!projects?.length) {\r\n      return [];\r\n    }\r\n\r\n    const projectItems = projects.map(project => {\r\n      return {\r\n        id: project.projectId,\r\n        name: project.name,\r\n        itemType: ItemType.projects,\r\n        url: `${baseHealthcareUrl}/projects/${project.projectId}`,\r\n      };\r\n    });\r\n\r\n    return projectItems;\r\n  }\r\n\r\n  async setCurrentItem(\r\n    anItem: Types.BaseDataSourceConfigurationAPIItem\r\n  ): Promise<Types.BaseDataSourceConfigurationAPIItem[]> {\r\n    const googleCloudItem = anItem as GoogleCloudDataSourceConfigurationAPIItem;\r\n\r\n    if (googleCloudItem.itemType === ItemType.dicomStores) {\r\n      // Last configurable item, so update the data source configuration.\r\n      const url = `${googleCloudItem.url}/dicomWeb`;\r\n      const dataSourceDefCopy = JSON.parse(\r\n        JSON.stringify(this._extensionManager.getDataSourceDefinition(this._dataSourceName))\r\n      );\r\n      dataSourceDefCopy.configuration = {\r\n        ...dataSourceDefCopy.configuration,\r\n        wadoUriRoot: url,\r\n        qidoRoot: url,\r\n        wadoRoot: url,\r\n      };\r\n\r\n      this._extensionManager.updateDataSourceConfiguration(\r\n        dataSourceDefCopy.sourceName,\r\n        dataSourceDefCopy.configuration\r\n      );\r\n\r\n      return [];\r\n    }\r\n\r\n    const subItemType = googleCloudItem.itemType + 1;\r\n    const subItemField = `${ItemType[subItemType]}`;\r\n\r\n    const url = `${googleCloudItem.url}/${subItemField}`;\r\n\r\n    const fetchedSubItems = await GoogleCloudDataSourceConfigurationAPI._doFetch(\r\n      url,\r\n      subItemType,\r\n      this._fetchOptions\r\n    );\r\n\r\n    if (!fetchedSubItems?.length) {\r\n      return [];\r\n    }\r\n\r\n    const subItems = fetchedSubItems.map(subItem => {\r\n      const nameSplit = subItem.name.split('/');\r\n      return {\r\n        id: subItem.name,\r\n        name: nameSplit[nameSplit.length - 1],\r\n        itemType: subItemType,\r\n        url: `${baseHealthcareUrl}/${subItem.name}`,\r\n      };\r\n    });\r\n\r\n    return subItems;\r\n  }\r\n\r\n  async getConfiguredItems(): Promise<Array<GoogleCloudDataSourceConfigurationAPIItem>> {\r\n    const dataSourceDefinition = this._extensionManager.getDataSourceDefinition(\r\n      this._dataSourceName\r\n    );\r\n\r\n    const url = dataSourceDefinition.configuration.wadoUriRoot;\r\n    const projectsIndex = url.indexOf('projects');\r\n    // Split the configured URL into (essentially) pairs (i.e. item type followed by item)\r\n    // Explicitly: ['projects','aProject','locations','aLocation','datasets','aDataSet','dicomStores','aDicomStore']\r\n    // Note that a partial configuration will have a subset of the above.\r\n    const urlSplit = url.substring(projectsIndex).split('/');\r\n\r\n    const configuredItems = [];\r\n\r\n    for (\r\n      let itemType = 0;\r\n      // the number of configured items is either the max (4) or the number extracted from the url split\r\n      itemType < 4 && (itemType + 1) * 2 < urlSplit.length;\r\n      itemType += 1\r\n    ) {\r\n      if (itemType === ItemType.projects) {\r\n        const projectId = urlSplit[1];\r\n        const projectUrl = `${initialUrl}/projects/${projectId}`;\r\n        const data = await GoogleCloudDataSourceConfigurationAPI._doFetch(\r\n          projectUrl,\r\n          ItemType.projects,\r\n          this._fetchOptions\r\n        );\r\n        const project = data[0] as Project;\r\n        configuredItems.push({\r\n          id: project.projectId,\r\n          name: project.name,\r\n          itemType: itemType,\r\n          url: `${baseHealthcareUrl}/projects/${project.projectId}`,\r\n        });\r\n      } else {\r\n        const relativePath = urlSplit.slice(0, itemType * 2 + 2).join('/');\r\n        configuredItems.push({\r\n          id: relativePath,\r\n          name: urlSplit[itemType * 2 + 1],\r\n          itemType: itemType,\r\n          url: `${baseHealthcareUrl}/${relativePath}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    return configuredItems;\r\n  }\r\n\r\n  /**\r\n   * Fetches an array of items the specified item type.\r\n   * @param urlStr the fetch url\r\n   * @param fetchItemType the type to fetch\r\n   * @param fetchOptions the header options for the fetch (e.g. authorization header)\r\n   * @param fetchSearchParams any search query params; currently only used for paging results\r\n   * @returns an array of items of the specified type\r\n   */\r\n  private static async _doFetch(\r\n    urlStr: string,\r\n    fetchItemType: ItemType,\r\n    fetchOptions = {},\r\n    fetchSearchParams: Record<string, string> = {}\r\n  ): Promise<Array<Project> | Array<NamedItem>> {\r\n    try {\r\n      const url = new URL(urlStr);\r\n      url.search = new URLSearchParams(fetchSearchParams).toString();\r\n\r\n      const response = await fetch(url, fetchOptions);\r\n      const data = await response.json();\r\n      if (response.status >= 200 && response.status < 300 && data != null) {\r\n        if (data.nextPageToken != null) {\r\n          fetchSearchParams.pageToken = data.nextPageToken;\r\n          const subPageData = await this._doFetch(\r\n            urlStr,\r\n            fetchItemType,\r\n            fetchOptions,\r\n            fetchSearchParams\r\n          );\r\n          data[ItemType[fetchItemType]] = data[ItemType[fetchItemType]].concat(subPageData);\r\n        }\r\n        if (data[ItemType[fetchItemType]]) {\r\n          return data[ItemType[fetchItemType]];\r\n        } else if (data.name) {\r\n          return [data];\r\n        } else {\r\n          return [];\r\n        }\r\n      } else {\r\n        const message =\r\n          data?.error?.message ||\r\n          `Error returned from Google Cloud Healthcare: ${response.status} - ${response.statusText}`;\r\n        throw new Error(message);\r\n      }\r\n    } catch (err) {\r\n      const message = err?.message || 'Error occurred during fetch request.';\r\n      throw new Error(message);\r\n    }\r\n  }\r\n}\r\n\r\nexport { GoogleCloudDataSourceConfigurationAPI };\r\n","import OHIF from '@ohif/core';\r\n\r\nimport { InstanceMetadata, PhilipsPETPrivateGroup } from '@cornerstonejs/calculate-suv/src/types';\r\n\r\nconst metadataProvider = OHIF.classes.MetadataProvider;\r\n\r\nexport default function getPTImageIdInstanceMetadata(imageId: string): InstanceMetadata {\r\n  const dicomMetaData = metadataProvider.get('instance', imageId);\r\n\r\n  if (!dicomMetaData) {\r\n    throw new Error('dicom metadata are required');\r\n  }\r\n\r\n  if (\r\n    dicomMetaData.SeriesDate === undefined ||\r\n    dicomMetaData.SeriesTime === undefined ||\r\n    dicomMetaData.CorrectedImage === undefined ||\r\n    dicomMetaData.Units === undefined ||\r\n    !dicomMetaData.RadiopharmaceuticalInformationSequence ||\r\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife === undefined ||\r\n    dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose === undefined ||\r\n    dicomMetaData.DecayCorrection === undefined ||\r\n    dicomMetaData.AcquisitionDate === undefined ||\r\n    dicomMetaData.AcquisitionTime === undefined ||\r\n    (dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime ===\r\n      undefined &&\r\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime ===\r\n        undefined)\r\n  ) {\r\n    throw new Error('required metadata are missing');\r\n  }\r\n\r\n  if (dicomMetaData.PatientWeight === undefined) {\r\n    console.warn('PatientWeight missing from PT instance metadata');\r\n  }\r\n\r\n  const instanceMetadata: InstanceMetadata = {\r\n    CorrectedImage: dicomMetaData.CorrectedImage,\r\n    Units: dicomMetaData.Units,\r\n    RadionuclideHalfLife:\r\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\r\n    RadionuclideTotalDose:\r\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\r\n    RadiopharmaceuticalStartDateTime:\r\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\r\n    RadiopharmaceuticalStartTime:\r\n      dicomMetaData.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\r\n    DecayCorrection: dicomMetaData.DecayCorrection,\r\n    PatientWeight: dicomMetaData.PatientWeight,\r\n    SeriesDate: dicomMetaData.SeriesDate,\r\n    SeriesTime: dicomMetaData.SeriesTime,\r\n    AcquisitionDate: dicomMetaData.AcquisitionDate,\r\n    AcquisitionTime: dicomMetaData.AcquisitionTime,\r\n  };\r\n\r\n  if (\r\n    dicomMetaData['70531000'] ||\r\n    dicomMetaData['70531000'] !== undefined ||\r\n    dicomMetaData['70531009'] ||\r\n    dicomMetaData['70531009'] !== undefined\r\n  ) {\r\n    const philipsPETPrivateGroup: PhilipsPETPrivateGroup = {\r\n      SUVScaleFactor: dicomMetaData['70531000'],\r\n      ActivityConcentrationScaleFactor: dicomMetaData['70531009'],\r\n    };\r\n    instanceMetadata.PhilipsPETPrivateGroup = philipsPETPrivateGroup;\r\n  }\r\n\r\n  if (dicomMetaData['0009100d'] && dicomMetaData['0009100d'] !== undefined) {\r\n    instanceMetadata.GEPrivatePostInjectionDateTime = dicomMetaData['0009100d'];\r\n  }\r\n\r\n  if (dicomMetaData.FrameReferenceTime && dicomMetaData.FrameReferenceTime !== undefined) {\r\n    instanceMetadata.FrameReferenceTime = dicomMetaData.FrameReferenceTime;\r\n  }\r\n\r\n  if (dicomMetaData.ActualFrameDuration && dicomMetaData.ActualFrameDuration !== undefined) {\r\n    instanceMetadata.ActualFrameDuration = dicomMetaData.ActualFrameDuration;\r\n  }\r\n\r\n  if (dicomMetaData.PatientSex && dicomMetaData.PatientSex !== undefined) {\r\n    instanceMetadata.PatientSex = dicomMetaData.PatientSex;\r\n  }\r\n\r\n  if (dicomMetaData.PatientSize && dicomMetaData.PatientSize !== undefined) {\r\n    instanceMetadata.PatientSize = dicomMetaData.PatientSize;\r\n  }\r\n\r\n  return instanceMetadata;\r\n}\r\n\r\nfunction convertInterfaceTimeToString(time): string {\r\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\r\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\r\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\r\n\r\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(6, '0');\r\n\r\n  const timeString = `${hours}${minutes}${seconds}.${fractionalSeconds}`;\r\n  return timeString;\r\n}\r\n\r\nfunction convertInterfaceDateToString(date): string {\r\n  const month = `${date.month}`.padStart(2, '0');\r\n  const day = `${date.day}`.padStart(2, '0');\r\n  const dateString = `${date.year}${month}${day}`;\r\n  return dateString;\r\n}\r\n\r\nexport { getPTImageIdInstanceMetadata };\r\n","import { DicomMetadataStore, classes } from '@ohif/core';\r\nimport { calculateSUVScalingFactors } from '@cornerstonejs/calculate-suv';\r\n\r\nimport getPTImageIdInstanceMetadata from './getPTImageIdInstanceMetadata';\r\n\r\nconst metadataProvider = classes.MetadataProvider;\r\n\r\n/**\r\n *\r\n * @param {Object} servicesManager\r\n * @param {Object} configuration\r\n */\r\nexport default function init({ servicesManager, configuration = {} }): void {\r\n  const { stateSyncService } = servicesManager.services;\r\n  // Add\r\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handlePETImageMetadata);\r\n\r\n  // If the metadata for PET has changed by the user (e.g. manually changing the PatientWeight)\r\n  // we need to recalculate the SUV Scaling Factors\r\n  DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_UPDATED, handlePETImageMetadata);\r\n\r\n  // viewportGridStore is a sync state which stores the entire\r\n  // ViewportGridService getState, by the keys `<activeStudyUID>:<protocolId>:<stageIndex>`\r\n  // Used to recover manual changes to the layout of a stage.\r\n  stateSyncService.register('viewportGridStore', { clearOnModeExit: true });\r\n\r\n  // displaySetSelectorMap stores a map from\r\n  // `<activeStudyUID>:<displaySetSelectorId>:<matchOffset>` to\r\n  // a displaySetInstanceUID, used to display named display sets in\r\n  // specific spots within a hanging protocol and be able to remember what the\r\n  // user did with those named spots between stages and protocols.\r\n  stateSyncService.register('displaySetSelectorMap', { clearOnModeExit: true });\r\n\r\n  // Stores a map from `<activeStudyUID>:${protocolId}` to the getHPInfo results\r\n  // in order to recover the correct stage when returning to a Hanging Protocol.\r\n  stateSyncService.register('hangingProtocolStageIndexMap', {\r\n    clearOnModeExit: true,\r\n  });\r\n\r\n  // Stores a map from the to be applied hanging protocols `<activeStudyUID>:<protocolId>`\r\n  // to the previously applied hanging protolStageIndexMap key, in order to toggle\r\n  // off the applied protocol and remember the old state.\r\n  stateSyncService.register('toggleHangingProtocol', { clearOnModeExit: true });\r\n\r\n  // Stores the viewports by `rows-cols` position so that when the layout\r\n  // changes numRows and numCols, the viewports can be remembers and then replaced\r\n  // afterwards.\r\n  stateSyncService.register('viewportsByPosition', { clearOnModeExit: true });\r\n}\r\n\r\nconst handlePETImageMetadata = ({ SeriesInstanceUID, StudyInstanceUID }) => {\r\n  const { instances } = DicomMetadataStore.getSeries(StudyInstanceUID, SeriesInstanceUID);\r\n\r\n  const modality = instances[0].Modality;\r\n  if (modality !== 'PT') {\r\n    return;\r\n  }\r\n  const imageIds = instances.map(instance => instance.imageId);\r\n  const instanceMetadataArray = [];\r\n  imageIds.forEach(imageId => {\r\n    const instanceMetadata = getPTImageIdInstanceMetadata(imageId);\r\n    if (instanceMetadata) {\r\n      instanceMetadataArray.push(instanceMetadata);\r\n    }\r\n  });\r\n\r\n  if (!instanceMetadataArray.length) {\r\n    return;\r\n  }\r\n\r\n  // try except block to prevent errors when the metadata is not correct\r\n  let suvScalingFactors;\r\n  try {\r\n    suvScalingFactors = calculateSUVScalingFactors(instanceMetadataArray);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  if (!suvScalingFactors) {\r\n    return;\r\n  }\r\n\r\n  instanceMetadataArray.forEach((instanceMetadata, index) => {\r\n    metadataProvider.addCustomMetadata(imageIds[index], 'scalingModule', suvScalingFactors[index]);\r\n  });\r\n};\r\n","import { Types } from '@ohif/core';\r\n\r\nimport getDataSourcesModule from './getDataSourcesModule.js';\r\nimport getLayoutTemplateModule from './getLayoutTemplateModule.js';\r\nimport getPanelModule from './getPanelModule';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule.js';\r\nimport getToolbarModule from './getToolbarModule';\r\nimport getCommandsModule from './commandsModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getStudiesForPatientByMRN from './Panels/getStudiesForPatientByMRN';\r\nimport getCustomizationModule from './getCustomizationModule';\r\nimport { id } from './id.js';\r\nimport preRegistration from './init';\r\nimport { ContextMenuController, CustomizableContextMenuTypes } from './CustomizableContextMenu';\r\nimport * as dicomWebUtils from './DicomWebDataSource/utils';\r\nimport { createReportDialogPrompt } from './Panels';\r\nimport createReportAsync from './Actions/createReportAsync';\r\n\r\nconst defaultExtension: Types.Extensions.Extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n  preRegistration,\r\n  getDataSourcesModule,\r\n  getLayoutTemplateModule,\r\n  getPanelModule,\r\n  getHangingProtocolModule,\r\n  getSopClassHandlerModule,\r\n  getToolbarModule,\r\n  getCommandsModule,\r\n  getUtilityModule({ servicesManager }) {\r\n    return [\r\n      {\r\n        name: 'common',\r\n        exports: {\r\n          getStudiesForPatientByMRN,\r\n        },\r\n      },\r\n    ];\r\n  },\r\n\r\n  getCustomizationModule,\r\n};\r\n\r\nexport default defaultExtension;\r\n\r\nexport {\r\n  ContextMenuController,\r\n  CustomizableContextMenuTypes,\r\n  getStudiesForPatientByMRN,\r\n  dicomWebUtils,\r\n  createReportDialogPrompt,\r\n  createReportAsync,\r\n};\r\n","import ViewerLayout from './ViewerLayout';\r\n/*\r\n- Define layout for the viewer in mode configuration.\r\n- Pass in the viewport types that can populate the viewer.\r\n- Init layout based on the displaySets and the objects.\r\n*/\r\n\r\nexport default function ({ servicesManager, extensionManager, commandsManager, hotkeysManager }) {\r\n  function ViewerLayoutWithServices(props) {\r\n    return ViewerLayout({\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      hotkeysManager,\r\n      ...props,\r\n    });\r\n  }\r\n\r\n  return [\r\n    // Layout Template Definition\r\n    // TODO: this is weird naming\r\n    {\r\n      name: 'viewerLayout',\r\n      id: 'viewerLayout',\r\n      component: ViewerLayoutWithServices,\r\n    },\r\n  ];\r\n}\r\n","import ToolbarDivider from './Toolbar/ToolbarDivider';\r\nimport ToolbarLayoutSelectorWithServices from './Toolbar/ToolbarLayoutSelector';\r\nimport ToolbarSplitButtonWithServices from './Toolbar/ToolbarSplitButtonWithServices';\r\nimport ToolbarButtonWithServices from './Toolbar/ToolbarButtonWithServices';\r\n\r\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\r\n  return [\r\n    {\r\n      name: 'ohif.divider',\r\n      defaultComponent: ToolbarDivider,\r\n      clickHandler: () => {},\r\n    },\r\n    {\r\n      name: 'ohif.action',\r\n      defaultComponent: ToolbarButtonWithServices,\r\n      clickHandler: () => {},\r\n    },\r\n    {\r\n      name: 'ohif.radioGroup',\r\n      defaultComponent: ToolbarButtonWithServices,\r\n      clickHandler: () => {},\r\n    },\r\n    {\r\n      name: 'ohif.splitButton',\r\n      defaultComponent: ToolbarSplitButtonWithServices,\r\n      clickHandler: () => {},\r\n    },\r\n    {\r\n      name: 'ohif.layoutSelector',\r\n      defaultComponent: ToolbarLayoutSelectorWithServices,\r\n      clickHandler: (evt, clickedBtn, btnSectionName) => {},\r\n    },\r\n    {\r\n      name: 'ohif.toggle',\r\n      defaultComponent: ToolbarButtonWithServices,\r\n      clickHandler: () => {},\r\n    },\r\n  ];\r\n}\r\n","import { CustomizationService } from '@ohif/core';\r\nimport React from 'react';\r\nimport DataSourceSelector from './Panels/DataSourceSelector';\r\nimport DataSourceConfigurationComponent from './Components/DataSourceConfigurationComponent';\r\nimport { GoogleCloudDataSourceConfigurationAPI } from './DataSourceConfigurationAPI/GoogleCloudDataSourceConfigurationAPI';\r\n\r\n/**\r\n *\r\n * Note: this is an example of how the customization module can be used\r\n * using the customization module. Below, we are adding a new custom route\r\n * to the application at the path /custom and rendering a custom component\r\n * Real world use cases of the having a custom route would be to add a\r\n * custom page for the user to view their profile, or to add a custom\r\n * page for login etc.\r\n */\r\nexport default function getCustomizationModule({ servicesManager, extensionManager }) {\r\n  return [\r\n    {\r\n      name: 'helloPage',\r\n      value: {\r\n        id: 'customRoutes',\r\n        routes: [\r\n          {\r\n            path: '/custom',\r\n            children: () => <h1 style={{ color: 'white' }}>Hello Custom Route</h1>,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n\r\n    // Example customization to list a set of datasources\r\n    {\r\n      name: 'datasources',\r\n      value: {\r\n        id: 'customRoutes',\r\n        routes: [\r\n          {\r\n            path: '/datasources',\r\n            children: DataSourceSelector,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n\r\n    {\r\n      name: 'default',\r\n      value: [\r\n        /**\r\n         * Customization Component Type definition for overlay items.\r\n         * Overlay items are texts (or other components) that will be displayed\r\n         * on a Viewport Overlay, which contains the information panels on the\r\n         * four corners of a viewport.\r\n         *\r\n         * @definition of a overlay item using this type\r\n         * The value to be displayed is defined by\r\n         *  - setting DICOM image instance's property to this field,\r\n         *  - or defining contentF()\r\n         *\r\n         * {\r\n         *   id: string - unique id for the overlay item\r\n         *   customizationType: string - indicates customization type definition to this\r\n         *   label: string - Label, to be displayed for the item\r\n         *   title: string - Tooltip, for the item\r\n         *   color: string - Color of the text\r\n         *   condition: ({ instance }) => boolean - decides whether to display the overlay item or not\r\n         *   attribute: string - property name of the DICOM image instance\r\n         *   contentF: ({ instance, formatters }) => string | component,\r\n         * }\r\n         *\r\n         * @example\r\n         *  {\r\n         *    id: 'PatientNameOverlay',\r\n         *    customizationType: 'ohif.overlayItem',\r\n         *    label: 'PN:',\r\n         *    title: 'Patient Name',\r\n         *    color: 'yellow',\r\n         *    condition: ({ instance }) => instance && instance.PatientName && instance.PatientName.Alphabetic,\r\n         *    attribute: 'PatientName',\r\n         *    contentF: ({ instance, formatters: { formatPN } }) => `${formatPN(instance.PatientName.Alphabetic)} ${(instance.PatientSex ? '(' + instance.PatientSex + ')' : '')}`,\r\n         *  },\r\n         *\r\n         * @see CustomizableViewportOverlay\r\n         */\r\n        {\r\n          id: 'ohif.overlayItem',\r\n          content: function (props) {\r\n            if (this.condition && !this.condition(props)) {\r\n              return null;\r\n            }\r\n\r\n            const { instance } = props;\r\n            const value =\r\n              instance && this.attribute\r\n                ? instance[this.attribute]\r\n                : this.contentF && typeof this.contentF === 'function'\r\n                ? this.contentF(props)\r\n                : null;\r\n            if (!value) {\r\n              return null;\r\n            }\r\n\r\n            return (\r\n              <span\r\n                className=\"overlay-item flex flex-row\"\r\n                style={{ color: this.color || undefined }}\r\n                title={this.title || ''}\r\n              >\r\n                {this.label && <span className=\"mr-1 shrink-0\">{this.label}</span>}\r\n                <span className=\"font-light\">{value}</span>\r\n              </span>\r\n            );\r\n          },\r\n        },\r\n\r\n        {\r\n          id: 'ohif.contextMenu',\r\n\r\n          /** Applies the customizationType to all the menu items.\r\n           * This function clones the object and child objects to prevent\r\n           * changes to the original customization object.\r\n           */\r\n          transform: function (customizationService: CustomizationService) {\r\n            // Don't modify the children, as those are copied by reference\r\n            const clonedObject = { ...this };\r\n            clonedObject.menus = this.menus.map(menu => ({ ...menu }));\r\n\r\n            for (const menu of clonedObject.menus) {\r\n              const { items: originalItems } = menu;\r\n              menu.items = [];\r\n              for (const item of originalItems) {\r\n                menu.items.push(customizationService.transform(item));\r\n              }\r\n            }\r\n            return clonedObject;\r\n          },\r\n        },\r\n\r\n        {\r\n          // the generic GUI component to configure a data source using an instance of a BaseDataSourceConfigurationAPI\r\n          id: 'ohif.dataSourceConfigurationComponent',\r\n          component: DataSourceConfigurationComponent.bind(null, {\r\n            servicesManager,\r\n            extensionManager,\r\n          }),\r\n        },\r\n\r\n        {\r\n          // The factory for creating an instance of a BaseDataSourceConfigurationAPI for Google Cloud Healthcare\r\n          id: 'ohif.dataSourceConfigurationAPI.google',\r\n          factory: (dataSourceName: string) =>\r\n            new GoogleCloudDataSourceConfigurationAPI(\r\n              dataSourceName,\r\n              servicesManager,\r\n              extensionManager\r\n            ),\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n"],"names":["getString","getName","getModalities","DICOMWeb","processResults","qidoStudies","length","studies","forEach","qidoStudy","push","studyInstanceUid","date","time","accession","mrn","patientName","utils","formatPN","instances","Number","description","modalities","async","search","dicomWebClient","seriesInstanceUid","queryParameters","searchForStudies","undefined","queryParams","mapParams","params","options","arguments","commaSeparatedFields","join","supportsWildcard","withWildcard","value","parameters","PatientName","patientId","AccessionNumber","accessionNumber","StudyDescription","studyDescription","ModalitiesInStudy","modalitiesInStudy","limit","offset","fuzzymatching","supportsFuzzyMatching","includefield","startDate","endDate","StudyDate","today","Date","DD","String","getDate","padStart","MM","getMonth","todayStr","getFullYear","oldDateStr","studyUids","Array","isArray","replace","StudyInstanceUID","final","Object","keys","key","getImageId","_ref","instance","frame","config","thumbnail","url","renderingAttr","uri","baseWadoRsUri","SeriesInstanceUID","SOPInstanceUID","wadoRoot","buildInstanceWadoRsUri","buildInstanceFrameWadoRsUri","getWADORSImageId","wadouri","paramString","wadoUriRoot","buildInstanceWadoUrl","imageId","RetrieveMetadataLoader","constructor","client","studyInstanceUID","filters","sortCriteria","sortFunction","this","execLoad","preLoadData","preLoad","loadData","load","posLoad","runLoaders","loaders","result","loader","e","next","done","Error","configLoad","RetrieveMetadataLoaderSync","getOptions","seriesInstanceUID","getLoaders","retrieveSeriesMetadata","bind","retrieveStudyMetadata","RetrieveMetadataLoaderAsync","getPreLoaders","preLoaders","searchForSeries","naturalizeDataset","dcmjs","DicomMetaDictionary","naturalized","map","sortStudySeries","sortingCriteria","seriesSortCriteria","seriesInfoSortingCriteria","seriesAsyncLoader","seriesInstanceUIDList","freeze","hasNext","shift","makeSeriesAsyncLoader","s","promises","enableStudyLazyLoad","retrieveMetadataLoader","moduleName","StudyMetaDataPromises","Map","has","get","promise","Promise","resolve","reject","RetrieveMetadata","then","data","set","deleteStudyMetadataPromise","delete","StaticWadoClient","api","DICOMwebClient","qidoConfig","super","staticWado","searchResult","lowerParams","toLowerParams","filter","study","studyFilterKeys","filterItem","series","seriesFilterKeys","compareValues","desired","actual","find","item","actualItem","Alphabetic","indexOf","substring","compareDateRange","range","dash","start","end","sourceFilterMap","altKey","testValue","valueElem","vr","Value","entries","toLowerCase","studyinstanceuid","patientname","studydescription","studydate","modalitiesinstudy","accessionnumber","seriesinstanceuid","seriesnumber","modality","getDirectURL","singlepart","tag","defaultPath","defaultType","fetchPart","DirectRetrieveURL","InlineBinary","blob","b64toBlob","URL","createObjectURL","retrieveBulkData","arr","Blob","type","console","warn","BulkDataURI","hasQuery","hasAccept","fixBulkDataURI","dicomWebConfig","startsWith","origin","bulkDataURI","relativeResolution","DicomDict","denaturalizeDataset","ImplementationClassUID","ImplementationVersionName","EXPLICIT_VR_LITTLE_ENDIAN","metadataProvider","classes","MetadataProvider","createDicomWebApi","userAuthenticationService","dicomWebConfigCopy","wadoConfig","qidoDicomWebClient","wadoDicomWebClient","getAuthrorizationHeader","generateWadoHeader","implementation","initialize","query","onConfiguration","JSON","parse","stringify","xhrRequestHeaders","authHeaders","getAuthorizationHeader","Authorization","Accept","generateAcceptHeader","acceptHeader","requestTransferSyntaxUID","omitQuotationForMultipartRequest","qidoRoot","headers","errorInterceptor","errorHandler","getHTTPErrorHandler","origParams","mappedParams","qidoSearch","qidoSeries","seriesNumber","seriesDate","formatDate","numSeriesInstances","processSeriesResults","seriesInStudy","call","retrieve","directURL","_ref2","multipart","val","metadata","madeInClient","_retrieveSeriesMetadataAsync","_retrieveSeriesMetadataSync","store","dicom","dataset","request","ArrayBuffer","datasets","storeInstances","meta","FileMetaInformationVersion","_meta","MediaStorageSOPClassUID","SOPClassUID","MediaStorageSOPInstanceUID","TransferSyntaxUID","denaturalized","dicomDict","dict","write","naturalizedInstancesMetadata","seriesSummaryMetadata","instancesPerSeries","SeriesDescription","SeriesNumber","SeriesTime","ProtocolName","Modality","getImageIdsForInstance","wadoUri","addImageIdToUIDs","seriesMetadata","values","DicomMetadataStore","addSeriesMetadata","addInstances","seriesPromises","addRetrieveBulkData","enabled","ret","arrayBuffer","byteLength","aSeries","seriesDeliveredPromises","naturalizedInstances","index","all","getStudy","isLoaded","getImageIdsForDisplaySet","displaySet","images","imageIds","NumberOfFrames","_ref3","getConfig","getStudyInstanceUIDs","_ref4","StudyInstanceUIDs","paramsStudyInstanceUIDs","queryStudyInstanceUIDs","splitComma","getAll","supportsReject","xhr","XMLHttpRequest","open","log","onreadystatechange","readyState","status","responseText","send","IWebApiDataSource","create","OHIF","mappings","_store","urls","studyInstanceUIDMap","getMetaDataByURL","metaData","findStudies","aStudy","createDicomJSONApi","dicomJsonConfig","response","fetch","json","naturalizedDicom","param","mappedParam","NumInstances","Modalities","PatientID","StudyTime","customSort","seriesSummary","numberOfSeries","obj","i","EVENTS","END_MODALITIES","SR","SEG","DOC","compareValue","v1","v2","seriesA","seriesB","instanceA","instanceB","modalityA","modalityB","isEndA","isEndB","createDicomLocalApi","dicomLocalConfig","name","numInstances","Set","add","firstInstance","from","SeriesDate","_broadcastEvent","SERIES_ADDED","isMultiframe","frameIndex","INSTANCES_ADDED","naturalizedReport","reportBlob","datasetToBlob","objectUrl","window","location","assign","getInstance","StudyInstanceUIDsAsArray","isStudyInCache","sort","createDicomWebProxyApi","dicomWebProxyConfig","UserAuthenticationService","dicomWebDelegate","servers","dicomWeb","configuration","studyInstanceUIDs","split","createDataSource","Toolbar","servicesManager","toolbarService","services","toolbarButtons","setToolbarButtons","useState","useEffect","unsubscribe","subscribe","TOOL_BAR_MODIFIED","getButtonSection","onInteraction","useCallback","args","recordInteraction","React","toolDef","id","Component","componentProps","className","classnames","_extends","availableLanguages","defaultLanguage","currentLanguage","i18n","hotkeysManager","extensionManager","appConfig","useAppConfig","navigate","useNavigate","useLocation","t","useTranslation","show","hide","useModal","hotkeyDefinitions","hotkeyDefaults","menuOptions","title","icon","onClick","content","AboutModal","contentProps","versionNumber","process","commitHash","UserPreferences","getValidHotkeyDefinitions","onCancel","hotkeys","stopRecord","unpause","onSubmit","language","changeLanguage","setHotkeys","onReset","restoreDefaultBindings","hotkeysModule","oidc","encodeURIComponent","href","Header","isReturnEnabled","showStudyList","onClickReturnButton","pathname","dataSourceIdx","configUrl","URLSearchParams","dataSourceName","existingDataSource","getDataSources","searchQuery","append","decodeURIComponent","toString","WhiteLabeling","whiteLabeling","ErrorBoundary","context","side","activeTabIndex","activeTabIndexProp","tabs","panelService","hasBeenOpened","setHasBeenOpened","setActiveTabIndex","activatePanelSubscription","ACTIVATE_PANEL","activatePanelEvent","forceActive","tabIndex","findIndex","tab","panelId","SidePanel","onOpen","ViewerLayout","commandsManager","viewports","ViewportGridComp","leftPanels","rightPanels","leftPanelDefaultClosed","rightPanelDefaultClosed","hangingProtocolService","showLoadingIndicator","setShowLoadingIndicator","document","body","classList","remove","getComponent","entry","getModuleEntry","component","getPanelData","iconName","iconLabel","label","HangingProtocolService","PROTOCOL_CHANGED","leftPanelComponents","rightPanelComponents","viewportComponents","viewportComponent","namespace","displaySetsToDisplay","ViewerHeader","style","height","LoadingIndicatorProgress","SidePanelWithServices","propTypes","PropTypes","isRequired","CommandsManager","ServicesManager","children","sortStudyInstances","PanelStudyBrowser","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","displaySetService","uiNotificationService","useImageViewer","activeViewportId","viewportGridService","useViewportGrid","activeTabName","setActiveTabName","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","sid","qidoForStudyUID","qidoStudiesForPatient","error","actuallyMappedStudies","prevArray","it","fetchStudiesForPatient","activeDisplaySets","newImageSrcEntry","getDisplaySetByUID","dSet","displaySetInstanceUID","Math","floor","unsupported","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","initialViewport","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","ds","tabStudy","includes","_createStudyBrowserTabs","activeDisplaySetInstanceUIDs","displaySetInstanceUIDs","StudyBrowser","onDoubleClickThumbnail","updatedViewports","viewportId","getViewportsRequireUpdate","message","duration","setDisplaySetsForViewports","onClickStudy","shouldCollapseStudy","updatedExpandedStudyInstanceUIDs","stdyUid","onClickTab","clickedTabName","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","seriesTime","numImageFrames","countIcon","messages","dragData","isHydratedForDerivedDisplaySet","isHydrated","cornerstone","canvas","createElement","utilities","loadImageToCanvas","toDataURL","catch","some","WrappedPanelStudyBrowser","_getStudiesForPatientByMRN","_getImageSrcFromImageId","exports","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","LegacyButtonGroup","color","size","LegacyButton","defaultProps","alert","CREATE_REPORT_DIALOG_RESPONSE","CANCEL","CREATE_REPORT","CreateReportDialogPrompt","uiDialogService","dialogId","dataSourcesOpts","dataSourceMap","dataSourceDefs","supportsStow","placeHolder","centralize","isDraggable","Dialog","useLastPosition","showOverlay","activeDataSource","noCloseButton","onClose","_handleClose","dismiss","action","actions","text","ButtonEnums","secondary","primary","setValue","allowMultiSelectExport","Select","closeMenuOnSelect","placeholder","option","onChange","evt","v","isClearable","Input","autoFocus","labelClassName","event","persist","target","onKeyPress","required","Loading","getReport","reportType","loadingDialogId","getMostRecentDisplaySet","MIN_SR_SERIES_NUMBER","findSRWithSameSeriesDescription","sameSeries","InstanceNumber","srSeriesNumbers","max","getNextSRSeriesNumber","downloadCSVReport","PanelMeasurementTable","viewportGrid","measurementService","displayMeasurements","setDisplayMeasurements","debouncedSetDisplayMeasurements","debounce","_getMappedMeasurements","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","unsub","cancel","onMeasurementItemClickHandler","_ref6","uid","isActive","measurements","measurement","m","MeasurementTable","jumpToMeasurement","onEdit","getMeasurement","onSubmitHandler","update","_ref5","getMeasurements","onClearMeasurementsClick","clearMeasurements","activeViewport","trackedMeasurements","referenceStudyUID","promptResult","createReportDialogPrompt","createReportAsync","runCommand","measurementData","additionalFindingTypes","types","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","_mapMeasurementToDisplay","VALUE_TYPES","secondaryLabel","wrappedMeasurementPanel","packageJson","_checkSeriesPositionShift","previousPosition","actualPosition","scanAxisNormal","averageSpacingBetweenFrames","predictedPosition","vec3","areAllImagePositionsEqual","firstImageOrientationPatient","toNumber","ImageOrientationPatient","imageOrientation","rowCosineVec","colCosineVec","calculateScanAxisNormal","firstImagePositionPatient","ImagePositionPatient","lastIpp","_getPerpendicularDistance","previousImagePositionPatient","imagePositionPatient","checkSingleFrames","firstImage","firstImageRows","Rows","firstImageColumns","Columns","areAllImageDimensionsEqual","addMessage","DisplaySetMessage","CODES","INCONSISTENT_DIMENSIONS","firstImageSamplesPerPixel","SamplesPerPixel","areAllImageComponentsEqual","INCONSISTENT_COMPONENTS","imageOrientationPatient","_isSameOrientation","areAllImageOrientationsEqual","INCONSISTENT_ORIENTATIONS","INCONSISTENT_POSITION_INFORMATION","issuesFound","spacingBetweenFrames","spacingIssue","_getSpacingIssue","issue","reconstructionIssues","MISSING_FRAMES","IRREGULAR_SPACING","areAllImageSpacingEqual","getDisplaySetMessages","isReconstructable","DisplaySetMessageList","NO_VALID_INSTANCES","ImageType","constructableModalities","every","NO_POSITION_INFORMATION","sortedInstances","sortInstancesByPosition","multiFrameInstance","hasPixelMeasurements","MULTIFRAME_NO_PIXEL_MEASUREMENTS","hasOrientation","MULTIFRAME_NO_ORIENTATION","hasPosition","MULTIFRAME_NO_POSITION_INFORMATION","checkMultiFrame","NOT_RECONSTRUCTABLE","getDisplaySetsFromUnsupportedSeries","imageSet","ImageSet","UNSUPPORTED_DISPLAYSET","setAttributes","FrameRate","FrameTime","SOPClassHandlerId","sopClassHandlerName","isMultiFrame","makeDisplaySet","isDisplaySetReconstructable","sortBy","a","b","parseInt","isSingleImageModality","getDisplaySetsFromSeries","sopClassUids","uniqueSopClassUidsInSeries","getSopClassUids","stackableInstances","isImage","isClip","instanceNumber","acquisitionDatetime","AcquisitionDateTime","setAttribute","sopClassDictionary","ComputedRadiographyImageStorage","DigitalXRayImageStorageForPresentation","DigitalXRayImageStorageForProcessing","DigitalMammographyXRayImageStorageForPresentation","DigitalMammographyXRayImageStorageForProcessing","DigitalIntraOralXRayImageStorageForPresentation","DigitalIntraOralXRayImageStorageForProcessing","CTImageStorage","EnhancedCTImageStorage","LegacyConvertedEnhancedCTImageStorage","UltrasoundMultiframeImageStorage","MRImageStorage","EnhancedMRImageStorage","EnhancedMRColorImageStorage","LegacyConvertedEnhancedMRImageStorage","UltrasoundImageStorage","UltrasoundImageStorageRET","SecondaryCaptureImageStorage","MultiframeSingleBitSecondaryCaptureImageStorage","MultiframeGrayscaleByteSecondaryCaptureImageStorage","MultiframeGrayscaleWordSecondaryCaptureImageStorage","MultiframeTrueColorSecondaryCaptureImageStorage","XRayAngiographicImageStorage","EnhancedXAImageStorage","XRayRadiofluoroscopicImageStorage","EnhancedXRFImageStorage","XRay3DAngiographicImageStorage","XRay3DCraniofacialImageStorage","BreastTomosynthesisImageStorage","BreastProjectionXRayImageStorageForPresentation","BreastProjectionXRayImageStorageForProcessing","IntravascularOpticalCoherenceTomographyImageStorageForPresentation","IntravascularOpticalCoherenceTomographyImageStorageForProcessing","NuclearMedicineImageStorage","VLEndoscopicImageStorage","VideoEndoscopicImageStorage","VLMicroscopicImageStorage","VideoMicroscopicImageStorage","VLSlideCoordinatesMicroscopicImageStorage","VLPhotographicImageStorage","VideoPhotographicImageStorage","OphthalmicPhotography8BitImageStorage","OphthalmicPhotography16BitImageStorage","OphthalmicTomographyImageStorage","VLWholeSlideMicroscopyImageStorage","PositronEmissionTomographyImageStorage","EnhancedPETImageStorage","LegacyConvertedEnhancedPETImageStorage","RTImageStorage","EnhancedUSVolumeStorage","ToolbarDivider","LayoutSelector","rows","columns","onSelection","rest","isOpen","setIsOpen","closeOnOutsideClick","addEventListener","removeEventListener","DropdownContent","OHIFLayoutSelector","ToolbarButton","onInteractionHandler","rounded","dropdownContent","onLayoutChange","props","interactionType","commands","commandName","commandOptions","ToolbarSplitButtonWithServices","isRadio","isAction","groupId","items","renderer","handleItemClick","itemId","setState","state","isExpanded","getSplitButtonItems","buttonsState","setButtonState","primaryToolId","toggles","groups","isPrimaryToggle","isPrimaryActive","PrimaryButtonComponent","getButtonComponentForUIType","uiType","TOOL_BAR_STATE_MODIFIED","updatedItems","listItemRenderer","classNames","Icon","SplitButton","isToggle","tooltip","ToolbarButtonWithServices","getMenuItems","selectorProps","menus","menuIdFilter","subProps","menu","subMenu","findIt","menuId","findMenuById","selector","findMenuDefault","findMenuIterator","current","return","findMenu","menuItems","delegating","toAdd","newItem","actionType","iconRight","itemRef","detail","element","adaptItem","ContextMenuController","closeContextMenu","showContextMenu","contextMenuProps","viewportElement","defaultPointsPosition","ContextMenuItemsBuilder","preservePosition","preventCutOf","defaultPosition","_getDefaultPosition","ContextMenu","onClickOutside","eventData","onShowSubMenu","onDefault","run","getDefaultPosition","x","y","_getEventDefaultPosition","eventDetail","currentPoints","_getElementDefaultPosition","boundingClientRect","getBoundingClientRect","_getCanvasPointsPosition","points","viewerPos","pointIndex","point","_isValidPosition","source","canvasPoints","viewerElement","positionIterator","getPositionIterator","position","customizationType","nearbyToolData","rowVerticalPaddingStyle","padding","rowStyle","borderBottomWidth","ColumnHeaders","tagRef","vrRef","keywordRef","valueRef","ref","listRef","useRef","canvasRef","tagHeaderElem","setTagHeaderElem","vrHeaderElem","setVrHeaderElem","keywordHeaderElem","setKeywordHeaderElem","valueHeaderElem","setValueHeaderElem","scrollTo","resetAfterIndex","debouncedResize","Row","row","isHeaderRendered","getItemSize","headerWidths","offsetWidth","getContext","font","getComputedStyle","colText","colOneLineWidth","measureText","width","ceil","reduce","maxHeight","colHeight","visibility","elem","List","itemCount","itemSize","nameMap","getFormattedRowsFromTags","tags","tagInfo","tagIndent","keyword","formatedRowsFromTags","Tag","fromPString","toCleanString","originalTagInfo","getRows","depth","keywords","sequenceAsArray","objectOrArray","sequence","sequenceRows","_sortTagList","regex","match","tagList","excludedColumnIndicesForFilter","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","activeDisplaySet","isImageStack","showInstanceList","displaySetList","useMemo","dateStr","moment","format","getSortedTags","filteredRows","filterValueLowerCase","keepRow","col","colIndex","debouncedSetFilterValue","Typography","variant","InputRange","minValue","maxValue","step","inputClassName","labelPosition","trackColor","InputFilterText","onDebounceChange","DicomTagTable","reuseCachedLayout","syncService","protocol","getActiveProtocol","hpInfo","getState","protocolId","stageIndex","activeStudyUID","syncState","viewportGridStore","displaySetSelectorMap","stage","stages","storeId","cacheId","hangingProtocolStageIndexMap","viewportStructure","properties","custom","layout","numRows","numCols","viewport","displaySetOptions","displaySetUID","matchedDisplaySetsIndex","findOrCreateViewport","viewportsByPosition","positionId","byPositionViewport","inDisplay","initialInDisplay","missing","getMissingViewport","displaySetsInfo","viewportOptions","findViewportsByPosition","storedViewport","subscribeToNextViewportGridChange","isHangingProtocolCommand","command","customizationService","stateSyncService","contextMenuController","menuCustomizationId","optionsToUse","defaultContextMenu","displayNotification","clear","toggleHpTools","toggleStageIndex","enableListener","button","hpCommand","stageId","setToggled","getButtons","setHangingProtocol","reset","primaryToolBeforeHPChange","getActivePrimaryTool","oldProtocol","stateSyncReduce","reuseCachedLayouts","hangingId","useStageIdx","getStageIndex","setActiveStudyUID","storedHanging","restoreProtocol","setProtocol","primaryButton","getButton","firstItem","callbacks","onProtocolExit","onProtocolEnter","toggleHangingProtocol","desiredStageIndex","activeStudy","previousState","deltaStage","direction","oldStageIndex","setViewportGridLayout","setTimeout","completeLayout","stateReduce","layoutFindOrCreate","setLayout","toggleOneUp","viewportGridState","toggleOneUpViewportGridStore","viewportIdToUpdate","updatedViewportsViaHP","flat","preOneUpViewport","layoutOptions","getLayoutOptionsFromState","clearToggleOneUpViewportGridStore","navigateHistory","historyArgs","history","to","openDICOMTagViewer","activeViewportSpecificData","UIModalService","DicomTagBrowser","toggleOverlays","overlays","getElementsByClassName","toggle","scrollActiveThumbnailIntoView","activeDisplaySetInstanceUID","thumbnailList","querySelector","thumbnailListBounds","thumbnailBounds","top","bottom","scrollIntoView","behavior","updateViewportDisplaySet","_ref7","excludeNonImageModalities","nonImageModalities","dsSortFn","getDisplaySetSortFunction","currentDisplaySets","displaySetIndexToShow","definitions","commandFn","storeContexts","nextStage","previousStage","defaultContext","protocolMatchingRules","weight","attribute","constraint","greaterThan","toolGroupIds","displaySetSelectors","defaultDisplaySetId","seriesMatchingRules","equals","defaultViewport","viewportType","toolGroupId","allowUnmatchedView","stageActivation","minViewportsMatched","layoutType","requiredViewports","preferredViewports","numberOfPriorsReferenced","currentDisplaySet","priorDisplaySet","currentViewport0","currentViewport1","priorViewport0","notNull","studyMatchingRules","priorDisplaySetId","defaultProtocol","locked","createdDate","modifiedDate","availableTo","editableBy","initialImageOptions","hpMNGrid","hpMNCompare","dsConfigs","dataSources","src","alt","sourceName","friendlyName","Button","itemLabel","itemList","onItemClicked","endIcon","NO_WRAP_ELLIPSIS_CLASS_NAMES","configurationAPI","configuredItems","onHide","setItemList","selectedItems","setSelectedItems","errorMessage","setErrorMessage","itemLabels","getItemLabels","showFullConfig","setShowFullConfig","currentSelectedItemIndex","shouldUpdate","setCurrentItem","getSelectedItemBackgroundClasses","itemIndex","getSelectedItemBorderClasses","getSelectedItemTextClasses","itemLabelIndex","theList","slice","ItemListComponent","setConfigurationAPI","setConfiguredItems","dataSourceChangedCallback","activeDataSourceDef","getActiveDataSourceDefinition","factory","configurationAPIFactory","configAPI","getConfiguredItems","list","sub","ACTIVE_DATA_SOURCE_CHANGED","showConfigurationModal","DataSourceConfigurationModalComponent","ItemType","initialUrl","baseHealthcareUrl","GoogleCloudDataSourceConfigurationAPI","_extensionManager","_fetchOptions","_dataSourceName","method","projects","_doFetch","project","projectId","itemType","anItem","googleCloudItem","dicomStores","dataSourceDefCopy","getDataSourceDefinition","updateDataSourceConfiguration","subItemType","subItemField","fetchedSubItems","subItem","nameSplit","projectsIndex","urlSplit","projectUrl","relativePath","urlStr","fetchItemType","fetchOptions","fetchSearchParams","nextPageToken","pageToken","subPageData","concat","statusText","err","handlePETImageMetadata","getSeries","instanceMetadataArray","instanceMetadata","dicomMetaData","CorrectedImage","Units","RadiopharmaceuticalInformationSequence","RadionuclideHalfLife","RadionuclideTotalDose","DecayCorrection","AcquisitionDate","AcquisitionTime","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","PatientWeight","philipsPETPrivateGroup","SUVScaleFactor","ActivityConcentrationScaleFactor","PhilipsPETPrivateGroup","GEPrivatePostInjectionDateTime","FrameReferenceTime","ActualFrameDuration","PatientSex","PatientSize","getPTImageIdInstanceMetadata","suvScalingFactors","calculateSUVScalingFactors","addCustomMetadata","preRegistration","SERIES_UPDATED","register","clearOnModeExit","getDataSourcesModule","getLayoutTemplateModule","getPanelModule","getHangingProtocolModule","getSopClassHandlerModule","getToolbarModule","defaultComponent","clickHandler","ToolbarLayoutSelectorWithServices","clickedBtn","btnSectionName","getCommandsModule","getUtilityModule","getCustomizationModule","routes","path","DataSourceSelector","condition","contentF","transform","clonedObject","originalItems","DataSourceConfigurationComponent"],"sourceRoot":""}
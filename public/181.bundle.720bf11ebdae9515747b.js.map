{"version":3,"file":"181.bundle.720bf11ebdae9515747b.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\r\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\r\nimport { ImageScrollbar } from '@ohif/ui';\r\nimport { ServicesManger } from '@ohif/core';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportId,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}) {\r\n  const { cineService, cornerstoneViewportService } = (servicesManager as ServicesManger).services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element);\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n    }\r\n\r\n    csToolsUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (!viewport) {\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n\r\n      setImageSliceData({\r\n        imageIndex: imageIndex,\r\n        numberOfSlices: viewportData.data.imageIds.length,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\r\n        viewport as Types.IVolumeViewport\r\n      );\r\n\r\n      if (!sliceData) {\r\n        return;\r\n      }\r\n\r\n      const { imageIndex, numberOfSlices } = sliceData;\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    }\r\n  }, [viewportId, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK) {\r\n      return;\r\n    }\r\n\r\n    const updateStackIndex = event => {\r\n      const { newImageIdIndex } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex,\r\n        numberOfSlices: viewportData.data.imageIds.length,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\r\n      return;\r\n    }\r\n\r\n    const updateVolumeIndex = event => {\r\n      const { imageIndex, numberOfSlices } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\r\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportId: PropTypes.string.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import moment from 'moment';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision = 0) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Formats a patient name for display purposes\r\n *\r\n * @param {string} name\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatPN(name) {\r\n  if (!name) {\r\n    return '';\r\n  }\r\n\r\n  const cleaned = name\r\n    .split('^')\r\n    .filter(s => !!s)\r\n    .join(', ')\r\n    .trim();\r\n  return cleaned === ',' || cleaned === '' ? '' : cleaned;\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} compression type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\r\n    generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport PropTypes from 'prop-types';\r\nimport { metaData, Enums, utilities } from '@cornerstonejs/core';\r\nimport { ViewportOverlay } from '@ohif/ui';\r\nimport { formatPN, formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\r\nimport { InstanceMetadata } from 'platform/core/src/types';\r\nimport { ServicesManager } from '@ohif/core';\r\nimport { ImageSliceData } from '@cornerstonejs/core/dist/esm/types';\r\n\r\nimport './CustomizableViewportOverlay.css';\r\n\r\nconst EPSILON = 1e-4;\r\n\r\ninterface OverlayItemProps {\r\n  element: any;\r\n  viewportData: any;\r\n  imageSliceData: ImageSliceData;\r\n  servicesManager: ServicesManager;\r\n  instance: InstanceMetadata;\r\n  customization: any;\r\n  formatters: {\r\n    formatPN: (val) => string;\r\n    formatDate: (val) => string;\r\n    formatTime: (val) => string;\r\n    formatNumberPrecision: (val, number) => string;\r\n  };\r\n\r\n  // calculated values\r\n  voi: {\r\n    windowWidth: number;\r\n    windowCenter: number;\r\n  };\r\n  instanceNumber?: number;\r\n  scale?: number;\r\n}\r\n\r\n/**\r\n * Window Level / Center Overlay item\r\n */\r\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\r\n  const { windowWidth, windowCenter } = voi;\r\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">W:</span>\r\n      <span className=\"ml-1 mr-2 shrink-0 font-light\">{windowWidth.toFixed(0)}</span>\r\n      <span className=\"mr-1 shrink-0\">L:</span>\r\n      <span className=\"ml-1 shrink-0 font-light\">{windowCenter.toFixed(0)}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Zoom Level Overlay item\r\n */\r\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">Zoom:</span>\r\n      <span className=\"font-light\">{scale.toFixed(2)}x</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Instance Number Overlay Item\r\n */\r\nfunction InstanceNumberOverlayItem({\r\n  instanceNumber,\r\n  imageSliceData,\r\n  customization,\r\n}: OverlayItemProps) {\r\n  const { imageIndex, numberOfSlices } = imageSliceData;\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">I:</span>\r\n      <span className=\"font-light\">\r\n        {instanceNumber !== undefined && instanceNumber !== null\r\n          ? `${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`\r\n          : `${imageIndex + 1}/${numberOfSlices}`}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Customizable Viewport Overlay\r\n */\r\nfunction CustomizableViewportOverlay({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n}) {\r\n  const { toolbarService, cornerstoneViewportService, customizationService } =\r\n    servicesManager.services;\r\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\r\n  const [scale, setScale] = useState(1);\r\n  const [activeTools, setActiveTools] = useState([]);\r\n  const { imageIndex } = imageSliceData;\r\n\r\n  const topLeftCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayTopLeft'\r\n  );\r\n  const topRightCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayTopRight'\r\n  );\r\n  const bottomLeftCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayBottomLeft'\r\n  );\r\n  const bottomRightCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayBottomRight'\r\n  );\r\n\r\n  const instance = useMemo(() => {\r\n    if (viewportData != null) {\r\n      return _getViewportInstance(viewportData, imageIndex);\r\n    } else {\r\n      return null;\r\n    }\r\n  }, [viewportData, imageIndex]);\r\n\r\n  const instanceNumber = useMemo(() => {\r\n    if (viewportData != null) {\r\n      return _getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService);\r\n    }\r\n    return null;\r\n  }, [viewportData, viewportId, imageIndex, cornerstoneViewportService]);\r\n\r\n  /**\r\n   * Initial toolbar state\r\n   */\r\n  useEffect(() => {\r\n    setActiveTools(toolbarService.getActiveTools());\r\n  }, []);\r\n\r\n  /**\r\n   * Updating the VOI when the viewport changes its voi\r\n   */\r\n  useEffect(() => {\r\n    const updateVOI = eventDetail => {\r\n      const { range } = eventDetail.detail;\r\n\r\n      if (!range) {\r\n        return;\r\n      }\r\n\r\n      const { lower, upper } = range;\r\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\r\n\r\n      setVOI({ windowCenter, windowWidth });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n    };\r\n  }, [viewportId, viewportData, voi, element]);\r\n\r\n  /**\r\n   * Updating the scale when the viewport changes its zoom\r\n   */\r\n  useEffect(() => {\r\n    const updateScale = eventDetail => {\r\n      const { previousCamera, camera } = eventDetail.detail;\r\n\r\n      if (\r\n        previousCamera.parallelScale !== camera.parallelScale ||\r\n        previousCamera.scale !== camera.scale\r\n      ) {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n        if (!viewport) {\r\n          return;\r\n        }\r\n\r\n        const imageData = viewport.getImageData();\r\n\r\n        if (!imageData) {\r\n          return;\r\n        }\r\n\r\n        if (camera.scale) {\r\n          setScale(camera.scale);\r\n          return;\r\n        }\r\n\r\n        const { spacing } = imageData;\r\n        // convert parallel scale to scale\r\n        const scale = (element.clientHeight * spacing[0] * 0.5) / camera.parallelScale;\r\n        setScale(scale);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n    };\r\n  }, [viewportId, viewportData, cornerstoneViewportService, element]);\r\n\r\n  /**\r\n   * Updating the active tools when the toolbar changes\r\n   */\r\n  // Todo: this should act on the toolGroups instead of the toolbar state\r\n  useEffect(() => {\r\n    const { unsubscribe } = toolbarService.subscribe(\r\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\r\n      () => {\r\n        setActiveTools(toolbarService.getActiveTools());\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [toolbarService]);\r\n\r\n  const _renderOverlayItem = useCallback(\r\n    item => {\r\n      const overlayItemProps: OverlayItemProps = {\r\n        element,\r\n        viewportData,\r\n        imageSliceData,\r\n        viewportId,\r\n        servicesManager,\r\n        customization: item,\r\n        formatters: {\r\n          formatPN: formatPN,\r\n          formatDate: formatDICOMDate,\r\n          formatTime: formatDICOMTime,\r\n          formatNumberPrecision: formatNumberPrecision,\r\n        },\r\n        instance,\r\n        // calculated\r\n        voi,\r\n        scale,\r\n        instanceNumber,\r\n      };\r\n\r\n      if (item.customizationType === 'ohif.overlayItem.windowLevel') {\r\n        return <VOIOverlayItem {...overlayItemProps} />;\r\n      } else if (item.customizationType === 'ohif.overlayItem.zoomLevel') {\r\n        return <ZoomOverlayItem {...overlayItemProps} />;\r\n      } else if (item.customizationType === 'ohif.overlayItem.instanceNumber') {\r\n        return <InstanceNumberOverlayItem {...overlayItemProps} />;\r\n      } else {\r\n        const renderItem = customizationService.transform(item);\r\n\r\n        if (typeof renderItem.content === 'function') {\r\n          return renderItem.content(overlayItemProps);\r\n        }\r\n      }\r\n    },\r\n    [\r\n      element,\r\n      viewportData,\r\n      imageSliceData,\r\n      viewportId,\r\n      servicesManager,\r\n      customizationService,\r\n      instance,\r\n      voi,\r\n      scale,\r\n      instanceNumber,\r\n    ]\r\n  );\r\n\r\n  const getTopLeftContent = useCallback(() => {\r\n    const items = topLeftCustomization?.items || [\r\n      {\r\n        id: 'WindowLevel',\r\n        customizationType: 'ohif.overlayItem.windowLevel',\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`topLeftOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [topLeftCustomization, _renderOverlayItem]);\r\n\r\n  const getTopRightContent = useCallback(() => {\r\n    const items = topRightCustomization?.items || [\r\n      {\r\n        id: 'InstanceNmber',\r\n        customizationType: 'ohif.overlayItem.instanceNumber',\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`topRightOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [topRightCustomization, _renderOverlayItem]);\r\n\r\n  const getBottomLeftContent = useCallback(() => {\r\n    const items = bottomLeftCustomization?.items || [];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`bottomLeftOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [bottomLeftCustomization, _renderOverlayItem]);\r\n\r\n  const getBottomRightContent = useCallback(() => {\r\n    const items = bottomRightCustomization?.items || [];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`bottomRightOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [bottomRightCustomization, _renderOverlayItem]);\r\n\r\n  return (\r\n    <ViewportOverlay\r\n      topLeft={getTopLeftContent()}\r\n      topRight={getTopRightContent()}\r\n      bottomLeft={getBottomLeftContent()}\r\n      bottomRight={getBottomRightContent()}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getViewportInstance(viewportData, imageIndex) {\r\n  let imageId = null;\r\n  if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n    imageId = viewportData.data.imageIds[imageIndex];\r\n  } else if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n    const volumes = viewportData.data;\r\n    if (volumes && volumes.length == 1) {\r\n      const volume = volumes[0];\r\n      imageId = volume.imageIds[imageIndex];\r\n    }\r\n  }\r\n  return imageId ? metaData.get('instance', imageId) || {} : {};\r\n}\r\n\r\nfunction _getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService) {\r\n  let instanceNumber;\r\n\r\n  if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n    instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\r\n\r\n    if (!instanceNumber && instanceNumber !== 0) {\r\n      return null;\r\n    }\r\n  } else if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n    instanceNumber = _getInstanceNumberFromVolume(\r\n      viewportData,\r\n      imageIndex,\r\n      viewportId,\r\n      cornerstoneViewportService\r\n    );\r\n  }\r\n  return instanceNumber;\r\n}\r\n\r\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\r\n  const imageIds = viewportData.data.imageIds;\r\n  const imageId = imageIds[imageIndex];\r\n\r\n  if (!imageId) {\r\n    return;\r\n  }\r\n\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  const stackSize = imageIds.length;\r\n\r\n  if (stackSize <= 1) {\r\n    return;\r\n  }\r\n\r\n  return parseInt(instanceNumber);\r\n}\r\n\r\n// Since volume viewports can be in any view direction, they can render\r\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\r\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\r\nfunction _getInstanceNumberFromVolume(viewportData, viewportId, cornerstoneViewportService) {\r\n  const volumes = viewportData.volumes;\r\n\r\n  // Todo: support fusion of acquisition plane which has instanceNumber\r\n  if (!volumes || volumes.length > 1) {\r\n    return;\r\n  }\r\n\r\n  const volume = volumes[0];\r\n  const { direction, imageIds } = volume;\r\n\r\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n  if (!cornerstoneViewport) {\r\n    return;\r\n  }\r\n\r\n  const camera = cornerstoneViewport.getCamera();\r\n  const { viewPlaneNormal } = camera;\r\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\r\n\r\n  const scanAxisNormal = direction.slice(6, 9);\r\n\r\n  // check if viewPlaneNormal is parallel to scanAxisNormal\r\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\r\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\r\n\r\n  if (isAcquisitionPlane) {\r\n    const imageId = imageIds[imageIndex];\r\n\r\n    if (!imageId) {\r\n      return {};\r\n    }\r\n\r\n    const { instanceNumber } = metaData.get('generalImageModule', imageId) || {};\r\n    return parseInt(instanceNumber);\r\n  }\r\n}\r\n\r\nCustomizableViewportOverlay.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  imageIndex: PropTypes.number,\r\n  viewportId: PropTypes.string,\r\n};\r\n\r\nexport default CustomizableViewportOverlay;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n  metaData,\r\n  Enums,\r\n  Types,\r\n  getEnabledElement,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport PropTypes from 'prop-types';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\n\r\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}) {\r\n  // Rotation is in degrees\r\n  const [rotation, setRotation] = useState(0);\r\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\r\n  const [flipVertical, setFlipVertical] = useState(false);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\r\n      const { rotation, previousCamera, camera } = evt.detail;\r\n\r\n      if (rotation !== undefined) {\r\n        setRotation(rotation);\r\n      }\r\n\r\n      if (\r\n        camera.flipHorizontal !== undefined &&\r\n        previousCamera.flipHorizontal !== camera.flipHorizontal\r\n      ) {\r\n        setFlipHorizontal(camera.flipHorizontal);\r\n      }\r\n\r\n      if (\r\n        camera.flipVertical !== undefined &&\r\n        previousCamera.flipVertical !== camera.flipVertical\r\n      ) {\r\n        setFlipVertical(camera.flipVertical);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n    };\r\n  }, []);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData) {\r\n      return '';\r\n    }\r\n\r\n    let rowCosines, columnCosines;\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data.imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      ({ rowCosines, columnCosines } = metaData.get('imagePlaneModule', imageId) || {});\r\n    } else {\r\n      if (!element || !getEnabledElement(element)) {\r\n        return '';\r\n      }\r\n\r\n      const { viewport } = getEnabledElement(element);\r\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const viewRight = vec3.create();\r\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\r\n\r\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\r\n      rowCosines = viewRight;\r\n    }\r\n\r\n    if (!rowCosines || !columnCosines || rotation === undefined) {\r\n      return '';\r\n    }\r\n\r\n    const markers = _getOrientationMarkers(\r\n      rowCosines,\r\n      columnCosines,\r\n      rotation,\r\n      flipVertical,\r\n      flipHorizontal\r\n    );\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (!ohifViewport) {\r\n      console.log('ViewportOrientationMarkers::No viewport');\r\n      return null;\r\n    }\r\n    const backgroundColor = ohifViewport.getViewportOptions().background;\r\n\r\n    // Todo: probably this can be done in a better way in which we identify bright\r\n    // background\r\n    const isLight = backgroundColor ? csUtils.isEqual(backgroundColor, [1, 1, 1]) : false;\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          `${m}-mid orientation-marker`,\r\n          isLight ? 'text-[#726F7E]' : 'text-[#ccc]'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [\r\n    viewportData,\r\n    imageSliceData,\r\n    rotation,\r\n    flipVertical,\r\n    flipHorizontal,\r\n    orientationMarkers,\r\n    element,\r\n  ]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers noselect\">{markers}</div>;\r\n}\r\n\r\nViewportOrientationMarkers.propTypes = {\r\n  percentComplete: PropTypes.number,\r\n  error: PropTypes.object,\r\n};\r\n\r\nViewportOrientationMarkers.defaultProps = {\r\n  percentComplete: 0,\r\n  error: null,\r\n};\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n * @param {*} rotation in degrees\r\n * @returns\r\n */\r\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\r\n  // the rotation applications\r\n  if (flipVertical) {\r\n    markers.top = invertOrientationStringLPS(markers.top);\r\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\r\n  }\r\n\r\n  if (flipHorizontal) {\r\n    markers.left = invertOrientationStringLPS(markers.left);\r\n    markers.right = invertOrientationStringLPS(markers.right);\r\n  }\r\n\r\n  // Swap the labels accordingly if the viewport has been rotated\r\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\r\n  if (rotation === 90 || rotation === -270) {\r\n    return {\r\n      top: markers.left,\r\n      left: invertOrientationStringLPS(markers.top),\r\n      right: invertOrientationStringLPS(markers.bottom),\r\n      bottom: markers.right, // left\r\n    };\r\n  } else if (rotation === -90 || rotation === 270) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.left),\r\n      left: markers.top,\r\n      bottom: markers.left,\r\n      right: markers.bottom,\r\n    };\r\n  } else if (rotation === 180 || rotation === -180) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.top),\r\n      left: invertOrientationStringLPS(markers.left),\r\n      bottom: invertOrientationStringLPS(markers.bottom),\r\n      right: invertOrientationStringLPS(markers.right),\r\n    };\r\n  }\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  percentComplete: PropTypes.number,\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nViewportImageSliceLoadingIndicator.defaultProps = {\r\n  percentComplete: 0,\r\n  error: null,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props) {\r\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportId={viewportId}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportId={viewportId}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportId={viewportId}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useEffect } from 'react';\r\nimport { CinePlayer, useCine, useViewportGrid } from '@ohif/ui';\r\nimport { Enums, eventTarget } from '@cornerstonejs/core';\r\n\r\nfunction WrappedCinePlayer({ enabledVPElement, viewportId, servicesManager }) {\r\n  const { toolbarService, customizationService } = servicesManager.services;\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [{ activeViewportId }] = useViewportGrid();\r\n\r\n  const { component: CinePlayerComponent = CinePlayer } =\r\n    customizationService.get('cinePlayer') ?? {};\r\n\r\n  const handleCineClose = () => {\r\n    toolbarService.recordInteraction({\r\n      groupId: 'MoreTools',\r\n      interactionType: 'toggle',\r\n      commands: [\r\n        {\r\n          commandName: 'toggleCine',\r\n          commandOptions: {},\r\n          toolName: 'cine',\r\n          context: 'CORNERSTONE',\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const cineHandler = () => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const cine = cines[viewportId];\r\n    const isPlaying = cine.isPlaying || false;\r\n    const frameRate = cine.frameRate || 24;\r\n\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    if (isPlaying) {\r\n      cineService.playClip(enabledVPElement, {\r\n        framesPerSecond: validFrameRate,\r\n      });\r\n    } else {\r\n      cineService.stopClip(enabledVPElement);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    eventTarget.addEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, cineHandler);\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n      eventTarget.removeEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, cineHandler);\r\n    };\r\n  }, [enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      if (enabledVPElement && cines?.[viewportId]?.isPlaying) {\r\n        cineService.stopClip(enabledVPElement);\r\n      }\r\n    };\r\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\r\n\r\n  const cine = cines[viewportId];\r\n  const isPlaying = (cine && cine.isPlaying) || false;\r\n\r\n  return (\r\n    isCineEnabled && (\r\n      <CinePlayerComponent\r\n        className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\r\n        isPlaying={isPlaying}\r\n        onClose={handleCineClose}\r\n        onPlayPauseChange={isPlaying =>\r\n          cineService.setCine({\r\n            id: activeViewportId,\r\n            isPlaying,\r\n          })\r\n        }\r\n        onFrameRateChange={frameRate =>\r\n          cineService.setCine({\r\n            id: activeViewportId,\r\n            frameRate,\r\n          })\r\n        }\r\n      />\r\n    )\r\n  );\r\n}\r\n\r\nexport default WrappedCinePlayer;\r\n","import CinePlayer from './CinePlayer';\r\n\r\nexport default CinePlayer;\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport ReactResizeDetector from 'react-resize-detector';\r\nimport PropTypes from 'prop-types';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport {\r\n  Enums,\r\n  eventTarget,\r\n  getEnabledElement,\r\n  StackViewport,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { MeasurementService } from '@ohif/core';\r\nimport { Notification, useViewportDialog } from '@ohif/ui';\r\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/dist/esm/types';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\r\nimport CornerstoneServices from '../types/CornerstoneServices';\r\nimport CinePlayer from '../components/CinePlayer';\r\nimport { Types } from '@ohif/core';\r\n\r\nconst STACK = 'stack';\r\n\r\n/**\r\n * Caches the jump to measurement operation, so that if display set is shown,\r\n * it can jump to the measurement.\r\n */\r\nlet cacheJumpToMeasurementEvent;\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType) {\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.viewportOptions.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo(props => {\r\n  const {\r\n    displaySets,\r\n    dataSource,\r\n    viewportOptions,\r\n    displaySetOptions,\r\n    servicesManager,\r\n    commandsManager,\r\n    onElementEnabled,\r\n    onElementDisabled,\r\n    isJumpToMeasurementDisabled,\r\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n    // to set the initial state of the viewport's first image to render\r\n    initialImageIndex,\r\n  } = props;\r\n\r\n  const viewportId = viewportOptions.viewportId;\r\n  const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n  const elementRef = useRef();\r\n\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    toolbarService,\r\n    toolGroupService,\r\n    syncGroupService,\r\n    cornerstoneViewportService,\r\n    cornerstoneCacheService,\r\n    viewportGridService,\r\n    stateSyncService,\r\n  } = servicesManager.services as CornerstoneServices;\r\n\r\n  const [viewportDialogState] = useViewportDialog();\r\n  // useCallback for scroll bar height calculation\r\n  const setImageScrollBarHeight = useCallback(() => {\r\n    const scrollbarHeight = `${elementRef.current.clientHeight - 20}px`;\r\n    setScrollbarHeight(scrollbarHeight);\r\n  }, [elementRef]);\r\n\r\n  // useCallback for onResize\r\n  const onResize = useCallback(() => {\r\n    if (elementRef.current) {\r\n      cornerstoneViewportService.resize();\r\n      setImageScrollBarHeight();\r\n    }\r\n  }, [elementRef]);\r\n\r\n  const cleanUpServices = useCallback(\r\n    viewportInfo => {\r\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n      const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n      toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n\r\n      syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n    },\r\n    [viewportId]\r\n  );\r\n\r\n  const elementEnabledHandler = useCallback(\r\n    evt => {\r\n      // check this is this element reference and return early if doesn't match\r\n      if (evt.detail.element !== elementRef.current) {\r\n        return;\r\n      }\r\n\r\n      const { viewportId, element } = evt.detail;\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n      setEnabledElement(viewportId, element);\r\n      setEnabledVPElement(element);\r\n\r\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n      const toolGroupId = viewportInfo.getToolGroupId();\r\n      const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n      toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\r\n\r\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n      if (onElementEnabled) {\r\n        onElementEnabled(evt);\r\n      }\r\n    },\r\n    [viewportId, onElementEnabled, toolGroupService]\r\n  );\r\n\r\n  // disable the element upon unmounting\r\n  useEffect(() => {\r\n    cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\r\n\r\n    eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n\r\n    setImageScrollBarHeight();\r\n\r\n    return () => {\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n      if (!viewportInfo) {\r\n        return;\r\n      }\r\n\r\n      cleanUpServices(viewportInfo);\r\n      cornerstoneViewportService.storePresentation({ viewportId });\r\n\r\n      if (onElementDisabled) {\r\n        onElementDisabled(viewportInfo);\r\n      }\r\n\r\n      eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n    };\r\n  }, []);\r\n\r\n  // subscribe to displaySet metadata invalidation (updates)\r\n  // Currently, if the metadata changes we need to re-render the display set\r\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n  // we need to remove the old volume from the cache, and let the\r\n  // viewport to re-add it which will use the new metadata. Otherwise, the\r\n  // viewport will use the cached volume and the new metadata will not be used.\r\n  // Note: this approach does not actually end of sending network requests\r\n  // and it uses the network cache\r\n  useEffect(() => {\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      async ({\r\n        displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\r\n        invalidateData,\r\n      }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\r\n        if (!invalidateData) {\r\n          return;\r\n        }\r\n\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n          const viewportData = viewportInfo.getViewportData();\r\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n            viewportData,\r\n            invalidatedDisplaySetInstanceUID,\r\n            dataSource,\r\n            displaySetService\r\n          );\r\n\r\n          const keepCamera = true;\r\n          cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\r\n        }\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  useEffect(() => {\r\n    // handle the default viewportType to be stack\r\n    if (!viewportOptions.viewportType) {\r\n      viewportOptions.viewportType = STACK;\r\n    }\r\n\r\n    const loadViewportData = async () => {\r\n      const viewportData = await cornerstoneCacheService.createViewportData(\r\n        displaySets,\r\n        viewportOptions,\r\n        dataSource,\r\n        initialImageIndex\r\n      );\r\n\r\n      // The presentation state will have been stored previously by closing\r\n      // a viewport.  Otherwise, this viewport will be unchanged and the\r\n      // presentation information will be directly carried over.\r\n      const { lutPresentationStore, positionPresentationStore } = stateSyncService.getState();\r\n      const { presentationIds } = viewportOptions;\r\n      const presentations = {\r\n        positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\r\n        lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\r\n      };\r\n      let measurement;\r\n      if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\r\n        measurement = cacheJumpToMeasurementEvent.measurement;\r\n        // Delete the position presentation so that viewport navigates direct\r\n        presentations.positionPresentation = null;\r\n        cacheJumpToMeasurementEvent = null;\r\n      }\r\n\r\n      // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\r\n      // Used for segmentation hydration right now, since the logic to decide whether\r\n      // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\r\n      // so we need to re-render (force update via change of the needsRerendering) so that React\r\n      // does the diffing and decides we should render this again (although the id and element has not changed)\r\n      // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\r\n      if (viewportOptions.needsRerendering) {\r\n        viewportOptions.needsRerendering = false;\r\n      }\r\n\r\n      cornerstoneViewportService.setViewportData(\r\n        viewportId,\r\n        viewportData,\r\n        viewportOptions,\r\n        displaySetOptions,\r\n        presentations\r\n      );\r\n      if (measurement) {\r\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n      }\r\n    };\r\n\r\n    loadViewportData();\r\n  }, [viewportOptions, displaySets, dataSource]);\r\n\r\n  /**\r\n   * There are two scenarios for jump to click\r\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\r\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\r\n   * and we need to change the viewports displaySet for jumping.\r\n   * Since measurement_jump happens via events and listeners, the former case is handled\r\n   * by the measurement_jump direct callback, but the latter case is handled first by\r\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\r\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\r\n   */\r\n  useEffect(() => {\r\n    if (isJumpToMeasurementDisabled) {\r\n      return;\r\n    }\r\n\r\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportId,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    _checkForCachedJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportId,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeFromJumpToMeasurementEvents();\r\n    };\r\n  }, [displaySets, elementRef, viewportId]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"viewport-wrapper\">\r\n        <ReactResizeDetector\r\n          refreshMode=\"debounce\"\r\n          refreshRate={50} // Wait 50 ms after last move to render\r\n          onResize={onResize}\r\n          targetRef={elementRef.current}\r\n        />\r\n        <div\r\n          className=\"cornerstone-viewport-element\"\r\n          style={{ height: '100%', width: '100%' }}\r\n          onContextMenu={e => e.preventDefault()}\r\n          onMouseDown={e => e.preventDefault()}\r\n          ref={elementRef}\r\n        ></div>\r\n        <CornerstoneOverlays\r\n          viewportId={viewportId}\r\n          toolBarService={toolbarService}\r\n          element={elementRef.current}\r\n          scrollbarHeight={scrollbarHeight}\r\n          servicesManager={servicesManager}\r\n        />\r\n        <CinePlayer\r\n          enabledVPElement={enabledVPElement}\r\n          viewportId={viewportId}\r\n          servicesManager={servicesManager}\r\n        />\r\n      </div>\r\n      <div className=\"absolute w-full\">\r\n        {viewportDialogState.viewportId === viewportId && (\r\n          <Notification\r\n            id=\"viewport-notification\"\r\n            message={viewportDialogState.message}\r\n            type={viewportDialogState.type}\r\n            actions={viewportDialogState.actions}\r\n            onSubmit={viewportDialogState.onSubmit}\r\n            onOutsideClick={viewportDialogState.onOutsideClick}\r\n          />\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}, areEqual);\r\n\r\nfunction _subscribeToJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportId,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const { unsubscribe } = measurementService.subscribe(\r\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\r\n    props => {\r\n      cacheJumpToMeasurementEvent = props;\r\n      const { viewportId: jumpId, measurement, isConsumed } = props;\r\n      if (!measurement || isConsumed) {\r\n        return;\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\r\n        // Decide on which viewport should handle this\r\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\r\n          cornerstoneViewportService.getViewportIdToJump(\r\n            jumpId,\r\n            measurement.displaySetInstanceUID,\r\n            { referencedImageId: measurement.referencedImageId }\r\n          );\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\r\n        return;\r\n      }\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportId,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  );\r\n\r\n  return unsubscribe;\r\n}\r\n\r\n// Check if there is a queued jumpToMeasurement event\r\nfunction _checkForCachedJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportId,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  if (!cacheJumpToMeasurementEvent) {\r\n    return;\r\n  }\r\n  if (cacheJumpToMeasurementEvent.isConsumed) {\r\n    cacheJumpToMeasurementEvent = null;\r\n    return;\r\n  }\r\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\r\n  if (!displaysUIDs?.length) {\r\n    return;\r\n  }\r\n\r\n  // Jump to measurement if the measurement exists\r\n  const { measurement } = cacheJumpToMeasurementEvent;\r\n  if (measurement && elementRef) {\r\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportId,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction _jumpToMeasurement(\r\n  measurement,\r\n  targetElementRef,\r\n  viewportId,\r\n  measurementService,\r\n  displaySetService,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const targetElement = targetElementRef.current;\r\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\r\n\r\n  if (!SOPInstanceUID) {\r\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\r\n    return;\r\n  }\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\r\n  //  to set it properly\r\n  // setCornerstoneMeasurementActive(measurement);\r\n\r\n  viewportGridService.setActiveViewportId(viewportId);\r\n\r\n  const enabledElement = getEnabledElement(targetElement);\r\n\r\n  if (enabledElement) {\r\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\r\n    const viewport = enabledElement.viewport as IStackViewport | IVolumeViewport;\r\n\r\n    let imageIdIndex = 0;\r\n    let viewportCameraDirectionMatch = true;\r\n\r\n    if (viewport instanceof StackViewport) {\r\n      const imageIds = viewport.getImageIds();\r\n      imageIdIndex = imageIds.findIndex(imageId => {\r\n        const { SOPInstanceUID: aSOPInstanceUID, frameNumber: aFrameNumber } =\r\n          getSOPInstanceAttributes(imageId);\r\n        return aSOPInstanceUID === SOPInstanceUID && (!frameNumber || frameNumber === aFrameNumber);\r\n      });\r\n    } else {\r\n      // for volume viewport we can't rely on the imageIdIndex since it can be\r\n      // a reconstructed view that doesn't match the original slice numbers etc.\r\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\r\n      imageIdIndex = referencedDisplaySet.images.findIndex(\r\n        i => i.SOPInstanceUID === SOPInstanceUID\r\n      );\r\n\r\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\r\n\r\n      // should compare abs for both planes since the direction can be flipped\r\n      if (\r\n        measurementViewPlane &&\r\n        !csUtils.isEqual(measurementViewPlane.map(Math.abs), viewportViewPlane.map(Math.abs))\r\n      ) {\r\n        viewportCameraDirectionMatch = false;\r\n      }\r\n    }\r\n\r\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    cs3DTools.utilities.jumpToSlice(targetElement, {\r\n      imageIndex: imageIdIndex,\r\n    });\r\n\r\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n    // Jump to measurement consumed, remove.\r\n    cacheJumpToMeasurementEvent?.consume?.();\r\n    cacheJumpToMeasurementEvent = null;\r\n  }\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nOHIFCornerstoneViewport.defaultProps = {\r\n  isJumpToMeasurementDisabled: false,\r\n};\r\n\r\nOHIFCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.array.isRequired,\r\n  dataSource: PropTypes.object.isRequired,\r\n  viewportOptions: PropTypes.object,\r\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  onElementEnabled: PropTypes.func,\r\n  isJumpToMeasurementDisabled: PropTypes.bool,\r\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n  // to set the initial state of the viewport's first image to render\r\n  initialImageIdOrIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default OHIFCornerstoneViewport;\r\n"],"names":["CornerstoneImageScrollbar","_ref","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCurrentImageIdIndex","data","imageIds","length","updateStackIndex","event","newImageIdIndex","detail","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csToolsUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","formatNumberPrecision","number","precision","arguments","undefined","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","formatPN","name","cleaned","split","filter","s","join","trim","EPSILON","VOIOverlayItem","voi","customization","windowWidth","windowCenter","className","style","color","ZoomOverlayItem","_ref2","scale","InstanceNumberOverlayItem","_ref3","instanceNumber","CustomizableViewportOverlay","_ref4","toolbarService","customizationService","setVOI","useState","setScale","activeTools","setActiveTools","topLeftCustomization","getModeCustomization","topRightCustomization","bottomLeftCustomization","bottomRightCustomization","instance","useMemo","imageId","volumes","metaData","_getViewportInstance","generalImageModule","parseInt","_getInstanceNumberFromStack","_getInstanceNumberFromVolume","_getInstanceNumber","getActiveTools","updateVOI","eventDetail","range","lower","upper","VOI_MODIFIED","updateScale","previousCamera","camera","parallelScale","imageData","getImageData","spacing","clientHeight","CAMERA_MODIFIED","unsubscribe","subscribe","EVENTS","TOOL_BAR_STATE_MODIFIED","_renderOverlayItem","useCallback","item","overlayItemProps","formatters","formatDate","formatTime","customizationType","renderItem","transform","content","getTopLeftContent","items","map","i","key","getTopRightContent","getBottomLeftContent","getBottomRightContent","ViewportOverlay","topLeft","topRight","bottomLeft","bottomRight","volume","direction","cornerstoneViewport","getCamera","viewPlaneNormal","scanAxisNormal","slice","cross","vec3","getOrientationStringLPS","invertOrientationStringLPS","ViewportOrientationMarkers","orientationMarkers","rotation","setRotation","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","markers","rowCosines","columnCosines","getEnabledElement","viewUp","viewRight","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","ohifViewport","getViewportInfo","console","log","backgroundColor","getViewportOptions","background","isLight","csUtils","m","index","classNames","percentComplete","error","defaultProps","ViewportImageSliceLoadingIndicator","loading","setLoading","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","enabledVPElement","cines","useCine","activeViewportId","useViewportGrid","component","CinePlayerComponent","CinePlayer","get","cineHandler","cine","frameRate","validFrameRate","Math","playClip","framesPerSecond","eventTarget","STACK_VIEWPORT_NEW_STACK","onClose","handleCineClose","recordInteraction","groupId","interactionType","commands","commandName","commandOptions","toolName","context","onPlayPauseChange","onFrameRateChange","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","displaySets","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","prevDisplaySet","foundDisplaySet","find","nextDisplaySet","displaySetInstanceUID","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","commandsManager","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","setScrollbarHeight","setEnabledVPElement","elementRef","measurementService","displaySetService","toolGroupService","syncGroupService","cornerstoneCacheService","viewportGridService","stateSyncService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","elementEnabledHandler","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","enableViewport","ELEMENT_ENABLED","storePresentation","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","lutPresentationStore","positionPresentationStore","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","measurement","cs3DTools","uid","loadViewportData","unsubscribeFromJumpToMeasurementEvents","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","getViewportIdToJump","referencedImageId","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","displaySet","includes","_checkForCachedJumpToMeasurementEvents","ReactResizeDetector","refreshMode","refreshRate","targetRef","width","onContextMenu","e","preventDefault","onMouseDown","ref","CornerstoneOverlays","toolBarService","Notification","message","type","actions","onSubmit","onOutsideClick","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","getDisplaySetByUID","setActiveViewportId","enabledElement","imageIdIndex","viewportCameraDirectionMatch","StackViewport","getImageIds","findIndex","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","metadata","viewportViewPlane","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}